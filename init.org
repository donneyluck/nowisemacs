#+TITLE: Emacs Configuration
#+PROPERTY: header-args:elisp :tangle ~/my-emacs/init.el

* 启动优化
** UI 加速
#+begin_src elisp
  ;; -*- lexical-binding: t; -*-
  (tool-bar-mode -1)                      ;禁用工具栏
   ;; (menu-bar-mode -1)                      ;禁用菜单栏
   (scroll-bar-mode -1)                    ;禁用滚动条
   (setq
    ;; 不要缩放frame.
    frame-inhibit-implied-resize t
    ;; 默认用最简单的模式
    initial-major-mode 'fundamental-mode
    ;; 不要自动启用package
    package-enable-at-startup nil package--init-file-ensured t)
#+end_src
** Startup Performance
#+begin_src elisp
  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s seconds with %d garbage collections."
                       (emacs-init-time "%.2f")
                       gcs-done)))

(let (
      ;; 加载的时候临时增大`gc-cons-threshold'以加速启动速度。
      (gc-cons-threshold most-positive-fixnum)
      (gc-cons-percentage 0.6)
      ;; 清空避免加载远程文件的时候分析文件。
      (file-name-handler-alist nil))

  ;; 定义一些启动目录，方便下次迁移修改
  (defvar nowisemacs-root-dir (file-truename "~/nowisemacs/"))
  (defvar nowisemacs-config-dir (concat nowisemacs-root-dir "init.org"))
  (defvar nowisemacs-extension-dir (concat nowisemacs-root-dir "/extensions")))

#+end_src
** 启动全屏幕
#+begin_src elisp :tangle no
(if (featurep 'cocoa)
    (progn
      ;; 在Mac平台, Emacs不能进入Mac原生的全屏模式,否则会导致 `make-frame' 创建时也集成原生全屏属性后造成白屏和左右滑动现象.
      ;; 所以先设置 `ns-use-native-fullscreen' 和 `ns-use-fullscreen-animation' 禁止Emacs使用Mac原生的全屏模式.
      ;; 而是采用传统的全屏模式, 传统的全屏模式, 只会在当前工作区全屏,而不是切换到Mac那种单独的全屏工作区,
      ;; 这样执行 `make-frame' 先关代码或插件时,就不会因为Mac单独工作区左右滑动产生的bug.
      ;;
      ;; Mac平台下,不能直接使用 `set-frame-parameter' 和 `fullboth' 来设置全屏,
      ;; 那样也会导致Mac窗口管理器直接把Emacs窗口扔到单独的工作区, 从而对 `make-frame' 产生同样的Bug.
      ;; 所以, 启动的时候通过 `set-frame-parameter' 和 `maximized' 先设置Emacs为最大化窗口状态, 启动5秒以后再设置成全屏状态,
      ;; Mac就不会移动Emacs窗口到单独的工作区, 最终解决Mac平台下原生全屏窗口导致 `make-frame' 左右滑动闪烁的问题.
      (setq ns-use-native-fullscreen nil)
      (setq ns-use-fullscreen-animation nil)

      ;; 默认先最大化。
      (set-frame-parameter (selected-frame) 'fullscreen 'maximized)

      (run-at-time "2sec" nil
                   (lambda ()
                     (toggle-frame-fullscreen)
                     ))
      )

  ;; 非Mac平台直接全屏
  (require 'fullscreen)
  (fullscreen))
#+end_src
** Native Compilation
#+begin_src elisp :tangle no
  ;; Set the right directory to store the native comp cache
  (setq native
  ;; (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))
#+end_src
** recentf
#+begin_src elisp
  (recentf-mode t)
#+end_src
** generic
#+begin_src elisp
  (setq use-short-answers t)
#+end_src
#+begin_src elisp :tangle no
  ;; Restore emacs session.
  (setq initial-buffer-choice t)
  (run-with-timer 1 nil #'(lambda () (bury-buffer)))

  ;; 增加长行处理性能
  (setq bidi-inhibit-bpa t)
  (setq-default bidi-paragraph-direction 'left-to-right)

  ;; 增加IO性能
  (setq process-adaptive-read-buffering nil)
  (setq read-process-output-max (* 1024 1024))

  (fset 'yes-or-no-p 'y-or-n-p)           ;以 y/n代表 yes/no
  (blink-cursor-mode -1)                  ;指针不闪动
  (transient-mark-mode 1)                 ;标记高亮
  (global-subword-mode 1)                 ;Word移动支持 FooBar 的格式
  (setq use-dialog-box nil)               ;never pop dialog
  (setq inhibit-startup-screen t)         ;inhibit start screen
  (setq initial-scratch-message "") ;关闭启动空白buffer, 这个buffer会干扰session恢复
  (setq-default comment-style 'indent)    ;设定自动缩进的注释风格
  (setq ring-bell-function 'ignore)       ;关闭烦人的出错时的提示声
  (setq default-major-mode 'text-mode)    ;设置默认地主模式为TEXT模式
  (setq mouse-yank-at-point t)            ;粘贴于光标处,而不是鼠标指针处
  (setq x-select-enable-clipboard t)      ;支持emacs和外部程序的粘贴
  (setq split-width-threshold nil)        ;分屏的时候使用上下分屏
  (setq inhibit-compacting-font-caches t) ;使用字体缓存，避免卡顿
  (setq confirm-kill-processes nil)       ;退出自动杀掉进程
  (setq async-bytecomp-allowed-packages nil) ;避免magit报错
  (setq word-wrap-by-category t)             ;按照中文折行
  (setq profiler-report-cpu-line-format ;让 profiler-report 第一列宽一点
        '((100 left)
          (24 right ((19 right)
                     (5 right)))))
  (setq profiler-report-memory-line-format
        '((100 left)
          (19 right ((14 right profiler-format-number)
                     (5 right)))))

  ;; (add-hook 'find-file-hook 'highlight-parentheses-mode t) ;增强的括号高亮

  (setq ad-redefinition-action 'accept)   ;不要烦人的 redefine warning
  (setq frame-resize-pixelwise t) ;设置缩放的模式,避免Mac平台最大化窗口以后右边和下边有空隙

  ;; 平滑地进行半屏滚动，避免滚动后recenter操作
  (setq scroll-step 1
        scroll-conservatively 10000)
#+end_src

* Package Management
#+begin_src elisp
  (unless (featurep 'straight)
    ;; Bootstrap straight.el
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage)))
(setq straight-vc-git-default-clone-depth 1)
  ;; Use straight.el for use-package expressions
  ;; (straight-use-package 'use-package)

#+end_src

Sometimes it's good to clean up unused repositories if I've removed packages from my configuration.  Use =straight-remove-unused-repos= for this purpose.

** Streamlined Configuration with setup.el
#+begin_src elisp
  (straight-use-package '(setup :type git :host nil :repo "https://git.sr.ht/~pkal/setup"))
  (require 'setup)
#+end_src

*** :straight
#+begin_src elisp
(setup-define :straight
  (lambda (recipe)
    `(unless (straight-use-package ',recipe)
       ,(setup-quit)))
  :documentation
  "Install RECIPE with `straight-use-package'.
This macro can be used as HEAD, and will replace itself with the
first RECIPE's package."
  :repeatable t
  :shorthand (lambda (sexp)
               (let ((recipe (cadr sexp)))
                 (if (consp recipe)
                     (car recipe)
                   recipe))))
#+end_src
*** :pkg
#+begin_src elisp
;; Recipe is always a list
;; Install via Guix if length == 1 or :guix t is present

(defvar dw/guix-emacs-packages '()
  "Contains a list of all Emacs package names that must be
installed via Guix.")

(defun dw/filter-straight-recipe (recipe)
  (let* ((plist (cdr recipe))
         (name (plist-get plist
                          :straight)))
    (cons (if (and name
                   (not (equal name t))) name (car recipe))
          (plist-put plist
                     :straight nil))))

(setup-define :pkg (lambda
                     (&rest
                      recipe)
                     `(add-to-list 'dw/guix-emacs-packages ,(or (plist-get recipe
                                                                           :guix)
                                                                (concat "emacs-" (symbol-name (car
                                                                                               recipe)))))
                     `(straight-use-package ',(dw/filter-straight-recipe recipe)))
              :documentation "Install RECIPE via Guix or straight.el"
              :shorthand #'cadr)
#+end_src
*** :delay
#+begin_src elisp
  (setup-define :delay
     (lambda (&rest time)
       `(run-with-idle-timer ,(or time 1)
                             nil ;; Don't repeat
                             (lambda () (require ',(setup-get 'feature)))))
     :documentation "Delay loading the feature until a certain amount of idle time has passed.")
#+end_src
*** :disabled

Used to disable a package configuration, similar to =:disabled= in =use-package=.

#+begin_src elisp
  (setup-define :disabled
    (lambda ()
      `,(setup-quit))
    :documentation "Always stop evaluating the body.")
#+end_src
*** :load-after
This keyword causes a body to be executed after other packages/features are loaded:
#+begin_src elisp
(setup-define :load-after
    (lambda (&rest features)
      (let ((body `(require ',(setup-get 'feature))))
        (dolist (feature (nreverse features))
          (setq body `(with-eval-after-load ',feature ,body)))
        body))
  :documentation "Load the current feature after FEATURES.")
#+end_src
*** :if-system
#+begin_src elisp
(setup-define :if-system
    (lambda (systemtype)
      `(unless (eq system-type ,systemtype)
         ,(setup-quit)))
  :documentation "If SYSTEMTYPE is not the current systemtype, stop evaluating form.")
#+end_src
*** :autoload
#+begin_src elisp
      (setup-define :autoload
        (lambda (&rest funcs)
          (let ((body '())
                (feature-string (symbol-name (setup-get 'feature))))
            (dolist (single-func (nreverse funcs))
              (add-to-list 'body `(autoload ',single-func ,feature-string nil t))
              (add-to-list 'body 'progn))
              body))
          :documentation "Load the current feature after FEATURES.")

        ;; (setup (:pkg company-english-helper :host github
        ;;            :repo "manateelazycat/company-english-helper")
        ;;        (:autoload "company-english-helper" toggle-english-helper))
#+end_src

* Default Coding System
Avoid constant errors on Windows about the coding system by setting the default to UTF-8.
#+begin_src elisp
  (set-default-coding-systems 'utf-8)
#+end_src

* Keyboard Bindings
** meow
#+begin_src elisp
  (setup
   (:pkg meow)
   (require 'meow)
   (defun meow-setup()
                   (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
                   (meow-motion-overwrite-define-key '("j" . meow-next)
                                                     '("k" . meow-prev))
                   (meow-leader-define-key
                    ;; SPC j/k will run the original command in MOTION state.
                    '("j" . meow-motion-origin-command)
                    '("k" . meow-motion-origin-command)
                    ;; Use SPC (0-9) for digit arguments.
                    '("1" . meow-digit-argument)
                    '("2" . meow-digit-argument)
                    '("3" . meow-digit-argument)
                    '("4" . meow-digit-argument)
                    '("5" . meow-digit-argument)
                    '("6" . meow-digit-argument)
                    '("7" . meow-digit-argument)
                    '("8" . meow-digit-argument)
                    '("9" . meow-digit-argument)
                    '("0" . meow-digit-argument)
                    '("/" . meow-keypad-describe-key)
                    '("?" . meow-cheatsheet))
                   (meow-normal-define-key '("0" . meow-expand-0)
                                           '("9" . meow-expand-9)
                                           '("8" . meow-expand-8)
                                           '("7" . meow-expand-7)
                                           '("6" . meow-expand-6)
                                           '("5" . meow-expand-5)
                                           '("4" . meow-expand-4)
                                           '("3" . meow-expand-3)
                                           '("2" . meow-expand-2)
                                           '("1" . meow-expand-1)
                                           '("a" . meow-append)
                                           ;;'("A" . meow-open-below)
                                           '("b" . meow-back-word)
                                           '("B" . meow-back-symbol)
                                           '("c" . meow-change)
                                           '("C" . meow-change-save)
                                           '("d" . meow-clipboard-kill)
                                           '("e" . meow-next-word)
                                           '("E" . meow-next-symbol)
                                           '("f" . meow-find)
                                           '("F" . meow-find-expand)
                                           ;; (cons "g" (concat doom-leader-alt-key " c"))
                                           '("G" . meow-grab)
                                           '("h" . meow-left)
                                           '("H" . meow-left-expand)
                                           '("i" . meow-insert)
                                           '("I" . meow-open-above)
                                           '("j" . meow-next)
                                           '("J" . meow-next-expand)
                                           '("k" . meow-prev)
                                           '("K" . meow-prev-expand)
                                           '("l" . meow-right)
                                           '("L" . meow-right-expand)
                                           '("m" . meow-mark-word)
                                           '("M" . meow-mark-symbol)
                                           '("n" . meow-search)
                                           '("N" . meow-pop-search)
                                           '("o" . meow-open-below)
                                           '("O" . meow-open-above)
                                           '("p" . meow-yank)
                                           '("P" . meow-yank-pop)
                                           '("q" . meow-quit)
                                           '("Q" . meow-goto-line)
                                           '("r" . meow-replace)
                                           '("R" . meow-swap-grab)
                                           '("s" . meow-line)
                                           '("S" . meow-kmacro-lines)
                                           '("t" . meow-till)
                                           '("T" . meow-till-expand)
                                           '("u" . meow-undo)
                                           '("U" . undo-tree-redo)
                                           '("v" . meow-visit)
                                           '("V" . meow-kmacro-matches)
                                           '("w" . meow-block)
                                           '("W" . meow-block-expand)
                                           '("x" . meow-C-d)
                                           '("X" . meow-backward-delete)
                                           '("y" . meow-save)
                                           '("Y" . meow-sync-grab)
                                           '("z" . meow-pop-selection)
                                           '("Z" . meow-pop-all-selection)
                                           '("&" . meow-query-replace)
                                           '("%" . meow-query-replace-regexp)
                                           '("-" . negative-argument)
                                           '(";" . meow-reverse)
                                           '("{" . meow-inner-of-thing)
                                           '("}" . meow-bounds-of-thing)
                                           '("[" . meow-beginning-of-thing)
                                           '("]" . meow-end-of-thing)
                                           '("<" . sort-tab-select-first-tab)
                                           '(">" . sort-tab-select-next-tab)
                                           '("." . repeat)
                                           '("," . meow-join)
                                           '("\\" . quoted-insert)
                                           '("<escape>" . meow-cancel)
                                           '("!" . meow-start-kmacro-or-insert-counter)
                                           '("@" . meow-end-or-call-kmacro)
                                           '("'" . meow-comment)
                                           '("/" . meow-last-buffer)))
    ;; (setq doom-leader-alt-key "M-SPC")
    (meow-global-mode 1)

    ;; (custom-set-default meow-cursor-type-normal '(box 4))

    ;; meow-setup 用于自定义按键绑定，可以直接使用下文中的示例
    (meow-setup)
    ;; 如果你需要在 NORMAL 下使用相对行号（基于 display-line-numbers-mode）
    ;; (meow-setup-line-number)
    ;; 如果你需要自动的 mode-line 设置（如果需要自定义见下文对 `meow-indicator' 说明）
    ;; (meow-setup-indicator)
    ;; (setq which-key-show-transient-maps t)
    (setq meow-use-keypad-when-execute-kbd nil)
    (setq meow-expand-exclude-mode-list nil)
    (setq meow-use-clipboard t)
    (setq meow-cursor-type-normal '(bar . 5))
    (setq meow-cursor-type-insert '(bar . 1))
    (setq meow-replace-state-name-list '((normal . "N")
                                         (motion . "M")
                                         (keypad . "K")
                                         (insert . "I")))
    )
#+end_src
** undo-tree
#+begin_src elisp :tangle no
  (setup (:pkg undo-tree)
    (setq undo-tree-auto-save-history nil)
    (global-undo-tree-mode 1))
#+end_src

** which-key
#+begin_src elisp
  (setup (:pkg which-key)
    (which-key-mode)
    (setq which-key-idle-delay 0.1))
#+end_src

** lewis-define-key
#+begin_src elisp
  (defun lewis/define-leader-key (key-alist &optional key-prefix)
    (let (key def)
      (setq keymap meow-leader-keymap)
      (if key-prefix
	  (setq key-prefix (concat key-prefix " "))
	(setq key-prefix ""))
      (dolist (element key-alist)
	(setq key (car element))
	(setq def (cdr element))
	(cond ((stringp key) (setq key (read-kbd-macro (concat key-prefix key))))
	      ((vectorp key) nil)
	      (t (signal 'wrong-type-argument (list 'array key))))
	(define-key keymap key def))))
#+end_src

** keybinding
*** lewis
#+begin_src elisp
  (lewis/define-leader-key
   '(;; youdao
     ("y p" . youdao-dictionary-search-at-point-posframe)
     ("y s" . youdao-dictionary-search)
     ("y i" . youdao-dictionary-search-from-input)
     ("y r" . youdao-dictionary-search-and-replace)
     ;; citre
     ("c a" . citre-ace-peek)
     ("c j" . citre-jump)
     ("c p" . citre-peek)
     ("c J" . citre-jump-back)
     ("c u" . citre-update-this-tags-file)
     ("c r" . citre-peek-restore)
     ("c s" . citre-peek-save-session)
     ("c l" . citre-peek-load-session)
     ;; aweshell
     ("a a" . aweshell-toggle)
     ("a d" . aweshell-dedicated-toggle)
     ("a b" . aweshell-switch-buffer)
     ("a s" . aweshell-search-history)
     ;; insert-translated
     ("i i" . insert-translated-name-insert)
     ("i r" . insert-translated-name-replace)

     ;; imenu-list
     ("l" . imenu-list-smart-toggle)
     ;; org-download
     ("d" . org-download-screenshot)
     ;; english help
     ("h c" . toggle-company-english-helper)
     ("h f" . english-teacher-follow-mode)
     ;;leader: lewisliu
     ) "e")
#+end_src
*** search
#+begin_src elisp
  (lewis/define-leader-key '(
                             ("s" . consult-line)
                             ("b" . consult-buffer)
                             ("d" . consult-ripgrep)
                             ("D" . lewis/ripgrep-search-other-dir)
                             ("f" . consult-find)
                             ) "s")

  (defun find-config-file()
    (interactive)
       (find-file nowisemacs-config-dir))
  (lewis/define-leader-key '(
                             ("r" . consult-recent-file)
                             ("p" . find-config-file)
                             ) "f")
#+end_src
*** notes
#+begin_src elisp
  (lewis/define-leader-key '(
                             ("D" . org-roam-demote-entire-buffer)
                             ("f" . org-roam-node-find)
                             ("F" . org-roam-ref-find)
                             ("g" . org-roam-graph)
                             ("i" . org-roam-node-insert)
                             ("I" . org-id-get-create)
                             ("m" . org-roam-buffer-toggle)
                             ("M" . org-roam-buffer-display-dedicated)
                             ("n" . org-roam-capture)
                             ("r" . org-roam-refile)
                             ("R" . org-roam-link-replace-all)
                             ;; date
                             ("d b" . org-roam-dailies-goto-previous-note)
                             ("d d" . org-roam-dailies-goto-date)
                             ("d D" . org-roam-dailies-capture-date)
                             ("d f" . org-roam-dailies-goto-next-note)
                             ("d m" . org-roam-dailies-goto-tomorrow)
                             ("d M" . org-roam-dailies-capture-tomorrow)
                             ("d n" . org-roam-dailies-capture-today)
                             ("d t" . org-roam-dailies-goto-today)
                             ("d T" . org-roam-dailies-capture-today)
                             ("d y" . org-roam-dailies-goto-yesterday)
                             ("d Y" . org-roam-dailies-capture-yesterday)
                             ("d -" . org-roam-dailies-find-directory)
                             ;; "node properties"
                             ("o a" . org-roam-alias-add)
                             ("o A" . org-roam-alias-remove)
                             ("o t" . org-roam-tag-add)
                             ("o T" . org-roam-tag-remove)
                             ("o r" . org-roam-ref-add)
                             ("o R" . org-roam-ref-remove)
                             ) "n r")
  (lewis/define-leader-key '(
                             ("e" . org-noter)
                             )
                           "n")
#+end_src
*** time
#+begin_src elisp
  (lewis/define-leader-key '(
                             ("t" . org-pomodoro)
                             )
                           "t")
#+end_src

* UI
** line-number
#+begin_src elisp
  ;; Line numbers are not displayed when large files are used.
  (setq line-number-display-limit large-file-warning-threshold)
  (setq line-number-display-limit-width 1000)

  (dolist (hook (list
		 'c-mode-common-hook
		 'c-mode-hook
		 'elisp-mode-hook
		 'lisp-interaction-mode-hook
		 'lisp-mode-hook
		 'java-mode-hook
		 'asm-mode-hook
		 'haskell-mode-hook
		 'rcirc-mode-hook
		 'erc-mode-hook
		 'sh-mode-hook
		 'makefile-gmake-mode-hook
		 'python-mode-hook
		 'js-mode-hook
		 'html-mode-hook
		 'css-mode-hook
		 'tuareg-mode-hook
		 'go-mode-hook
		 'coffee-mode-hook
		 'qml-mode-hook
		 'markdown-mode-hook
		 'slime-repl-mode-hook
		 'package-menu-mode-hook
		 'cmake-mode-hook
		 'php-mode-hook
		 'web-mode-hook
		 'coffee-mode-hook
		 'sws-mode-hook
		 'jade-mode-hook
		 'vala-mode-hook
		 'rust-mode-hook
		 'ruby-mode-hook
		 'qmake-mode-hook
		 'lua-mode-hook
		 'swift-mode-hook
		 'llvm-mode-hook
		 'conf-toml-mode-hook
		 'nxml-mode-hook
		 'nim-mode-hook
		 'org-mode-hook
		 ))
    (add-hook hook (lambda () (display-line-numbers-mode))))
#+end_src
** Theme
#+begin_src elisp
  (setup (:pkg doom-themes)
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-monokai-pro t)
    )
#+end_src
** Font
#+begin_src elisp
  (let ((emacs-font-size 12)
        emacs-font-name)
       ;; (when (eq system-type 'darwin)
      (setq emacs-font-name "InconsolataGo QiHei NF")
       ;; (when (eq system-type 'gnu/linux)
      ;; (setq emacs-font-name "等距更纱黑体 SC"))
    (when (display-grayscale-p)
      (set-frame-font (format "%s-%s" (eval emacs-font-name) (eval emacs-font-size)) t t)
      (set-fontset-font (frame-parameter nil 'font) 'unicode (eval emacs-font-name))
      ))
#+end_src

#+begin_src elisp :tangle no
(defun +my/better-font()
(interactive)
;; english font
(if (display-graphic-p)
    (progn
        (set-face-attribute 'default nil :font (format   "%s:pixelsize=%d" "InconsolataGo QiHei NF" 16)) ;; 11 13 17 19 23
        ;; chinese font
        (dolist (charset '(kana han symbol cjk-misc bopomofo))
        (set-fontset-font (frame-parameter nil 'font)
                            charset
                            (font-spec :family "等距更纱黑体 SC")))
        ) ;; 14 16 20 22 28
    ))

(defun +my|init-font(frame)
(with-selected-frame frame
    (if (display-graphic-p)
        (+my/better-font))))

(if (and (fboundp 'daemonp) (daemonp))
    (add-hook 'after-make-frame-functions #'+my|init-font)
(+my/better-font))

#+end_src

** all-the-icons
*** all-the-icons
#+begin_src elisp
  (setup (:pkg all-the-icons)
    (:option all-the-icons-scale-factor 1.0)
    )
#+end_src
*** all-the-icons-completion
#+begin_src elisp
  (setup (:pkg all-the-icons-completion)
  (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))
#+end_src
*** all-the-icons-dired
#+begin_src elisp
  (setup (:pkg all-the-icons-dired)
    (:hook-into dired-mode)
    )
#+end_src
** rainbow-delimiters
#+begin_src elisp
  (setup (:pkg rainbow-delimiters)
    (:hook-into prog-mode)
    )
#+end_src
** diff-hl
#+begin_src elisp
  (setup (:pkg diff-hl)
    (:delay)
    (global-diff-hl-mode)
    (diff-hl-margin-mode)
    )
#+end_src
* General Configuration
** awesome-tray
#+begin_src elisp :tangle no
  (setup
   (:pkg awesome-tray
    :host github
    :repo "manateelazycat/awesome-tray")
   (require 'awesome-tray)

   (defun pyim-awesome-tray()
     (concat current-input-method-title))

   (defun conda-awesome-tray()
     (concat conda-env-current-name))

    (add-to-list 'awesome-tray-module-alist '("meow" . (meow-indicator awesome-tray-module-evil-face)))
    (add-to-list 'awesome-tray-module-alist '("pyim" . (pyim-awesome-tray awesome-tray-module-evil-face)))
    (add-to-list 'awesome-tray-module-alist '("conda" . (conda-awesome-tray awesome-tray-module-evil-face)))

   (setq awesome-tray-active-modules (list "meow" "pyim" "conda" "location" "buffer-name" "mode-name" "git"))
   (awesome-tray-mode 1))
#+end_src
** doom-modeline
#+begin_src elisp
  (setup (:pkg doom-modeline)
    (:option doom-modeline-window-width-limit fill-column
             doom-modeline-height 20)
    (:hook-into after-init)
  )
#+end_src
** sort-tab
#+begin_src elisp
  (setup (:pkg sort-tab
            :host github
    :repo "manateelazycat/sort-tab")
    (:delay)
         (require 'sort-tab)
         ;; (sort-tab-mode 1)
  )
#+end_src
** backup
#+begin_src elisp
  ;; 不要自动备份，auto-save.el 就挺好用
  (setq make-backup-files nil)
  (setq auto-save-default nil)

  (setup (:pkg super-save)
    (:delay)
         (super-save-mode 1)
       (setq super-save-auto-save-when-idle t)

  )
#+end_src
** mode 绑定
#+begin_src elisp :tangle no
  ;;; ### auto-mode-alist ###
  ;;; --- 绑定扩展名到特定的模式
  (defun add-to-alist (alist-var elt-cons &optional no-replace)
    "Add to the value of ALIST-VAR an element ELT-CONS if it isn't there yet.
  If an element with the same car as the car of ELT-CONS is already present,
  replace it with ELT-CONS unless NO-REPLACE is non-nil; if a matching
  element is not already present, add ELT-CONS to the front of the alist.
  The test for presence of the car of ELT-CONS is done with `equal'."
    (let ((existing-element (assoc (car elt-cons) (symbol-value alist-var))))
      (if existing-element
          (or no-replace
              (rplacd existing-element (cdr elt-cons)))
        (set alist-var (cons elt-cons (symbol-value alist-var)))))
    (symbol-value alist-var))

  (dolist (elt-cons '(
                      ("\\.markdown" . markdown-mode)
                      ("\\.md" . markdown-mode)
                      ("\\.coffee$" . coffee-mode)
                      ("\\.iced$" . coffee-mode)
                      ("Cakefile" . coffee-mode)
                      ("\\.stumpwmrc\\'" . lisp-mode)
                      ("\\.[hg]s\\'" . haskell-mode)
                      ("\\.hi\\'" . haskell-mode)
                      ("\\.hs-boot\\'" . haskell-mode)
                      ("\\.chs\\'" . haskell-mode)
                      ("\\.l[hg]s\\'" . literate-haskell-mode)
                      ("\\.inc\\'" . asm-mode)
                      ("\\.max\\'" . maxima-mode)
                      ("\\.org\\'" . org-mode)
                      ("\\.cron\\(tab\\)?\\'" . crontab-mode)
                      ("cron\\(tab\\)?\\." . crontab-mode)
                      ("\\.a90\\'" . intel-hex-mode)
                      ("\\.hex\\'" . intel-hex-mode)
                      ("\\.py$" . python-mode)
                      ("SConstruct". python-mode)
                      ("\\.ml\\'" . tuareg-mode)
                      ("\\.mli\\'" . tuareg-mode)
                      ("\\.mly\\'" . tuareg-mode)
                      ("\\.mll\\'" . tuareg-mode)
                      ("\\.mlp\\'" . tuareg-mode)
                      ("\\.qml\\'" . qml-mode)
                      ("\\.jl\\'" . lisp-mode)
                      ("\\.asdf\\'" . lisp-mode)
                      ("CMakeLists\\.txt\\'" . cmake-mode)
                      ("\\.cmake\\'" . cmake-mode)
                      ("\\.php\\'" . php-mode)
                      ("\\.vue" . web-mode)
                      ("\\.wxml" . web-mode)
                      ("\\.blade\\.php\\'" . web-mode)
                      ("\\.phtml\\'" . web-mode)
                      ("\\.tpl\\.php\\'" . web-mode)
                      ("\\.jsp\\'" . web-mode)
                      ("\\.as[cp]x\\'" . web-mode)
                      ("\\.erb\\'" . web-mode)
                      ("\\.mustache\\'" . web-mode)
                      ("\\.djhtml\\'" . web-mode)
                      ("\\.html?\\'" . web-mode)
                      ("\\.coffee\\'" . coffee-mode)
                      ("\\.coffee.erb\\'" . coffee-mode)
                      ("\\.js.erb\\'" . js-mode)
                      ("\\.iced\\'" . coffee-mode)
                      ("\\.css\\'" . css-mode)
                      ("\\.wxss\\'" . css-mode)
                      ("Cakefile\\'" . coffee-mode)
                      ("\\.styl$" . sws-mode)
                      ("\\.jade" . jade-mode)
                      ("\\.go$" . go-mode)
                      ("\\.vala$" . vala-mode)
                      ("\\.vapi$" . vala-mode)
                      ("\\.rs$" . rust-mode)
                      ("\\.pro$" . qmake-mode)
                      ("\\.js$" . js-mode)
                      ("\\.wxs$" . js-mode)
                      ("\\.jsx$" . web-mode)
                      ("\\.lua$" . lua-mode)
                      ("\\.swift$" . swift-mode)
                      ("\\.l$" . flex-mode)
                      ("\\.y$" . bison-mode)
                      ("\\.pdf$" . pdf-view-mode)
                      ("\\.cpp$" . c++-mode)
                      ("\\.h$" . c++-mode)
                      ("\\.ll$" . llvm-mode)
                      ("\\.bc$" . hexl-mode)
                      ("\\.nim$" . nim-mode)
                      ("\\.nims$" . nim-mode)
                      ("\\.nimble$" . nim-mode)
                      ("\\.nim.cfg$" . nim-mode)
                      ))
    (add-to-alist 'auto-mode-alist elt-cons))

  (add-to-list 'interpreter-mode-alist '("coffee" . coffee-mode))
#+end_src
** 自动换行
#+begin_src elisp :tangle no
    ;;; ### Auto-fill ###
    ;;; --- 自动换行
    (setq fill-column 120)          ;默认显示 100列就换行
  (setq word-wrap t)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src
** awesome-pair
#+begin_src elisp
  (setup (:pkg awesome-pair :host github :repo "manateelazycat/awesome-pair")
    (:hook-into prog-mode
                text-mode
                )
    (:bind "(" awesome-pair-open-round
           "[" awesome-pair-open-bracket

           "(" awesome-pair-open-round
           "[" awesome-pair-open-bracket
           "{" awesome-pair-open-curly
           ")" awesome-pair-close-round
           "]" awesome-pair-close-bracket
           "}" awesome-pair-close-curly
           "=" awesome-pair-equal

           "%" awesome-pair-match-paren
           "\"" awesome-pair-double-quote

           "SPC" awesome-pair-space
           "RET" awesome-pair-newline

           "M-o" awesome-pair-backward-delete
           "C-d" awesome-pair-forward-delete
           "C-k" awesome-pair-kill

           "M-\"" awesome-pair-wrap-double-quote
           "M-[" awesome-pair-wrap-bracket
           "M-{" awesome-pair-wrap-curly
           "M-(" awesome-pair-wrap-round
           "M-)" awesome-pair-unwrap

           "M-p" awesome-pair-jump-right
           "M-n" awesome-pair-jump-left
           "M-:" awesome-pair-jump-out-pair-and-newline
           )
    )
#+end_src
** indent
#+begin_src elisp :tangle no
    (setq-default fill-column 120)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

  (defun adjust-languages-indent (n)
    (setq-local c-basic-offset n)

    (setq-local coffee-tab-width n)
    (setq-local javascript-indent-level n)
    (setq-local js-indent-level n)
    (setq-local js2-basic-offset n)

    (setq-local web-mode-attr-indent-offset n)
    (setq-local web-mode-attr-value-indent-offset n)
    (setq-local web-mode-code-indent-offset n)
    (setq-local web-mode-css-indent-offset n)
    (setq-local web-mode-markup-indent-offset n)
    (setq-local web-mode-sql-indent-offset n)

    (setq-local css-indent-offset n))

  (dolist (hook (list
		 'c-mode-hook
		 'c++-mode-hook
		 'java-mode-hook
		 'haskell-mode-hook
		 'asm-mode-hook
		 'sh-mode-hook
		 'haskell-cabal-mode-hook
		 'ruby-mode-hook
		 'qml-mode-hook
		 'scss-mode-hook
		 'coffee-mode-hook
		 ))
    (add-hook hook #'(lambda ()
		       (setq indent-tabs-mode nil)
		       (adjust-languages-indent 4)
		       )))

  (dolist (hook (list
		 'web-mode-hook
		 'js-mode-hook
		 ))
    (add-hook hook #'(lambda ()
		       (setq indent-tabs-mode nil)
		       (adjust-languages-indent 2)
		       )))

  ;;; init-indent.el ends here

#+end_src

** TRAMP
#+begin_src elisp
  ;; Set default connection mode to SSH
  (setq tramp-default-method "ssh")
#+end_src

** undo-tree

** Automatically clean whitespace
#+begin_src elisp
  (setup (:pkg ws-butler)
    (:hook-into text-mode prog-mode))
#+end_src
** avy
#+begin_src elisp
  (setup (:pkg avy)
    (:global "M-j" avy-goto-char-timer))
#+end_src
* 补全
** Completions with Vertico
#+begin_src elisp
  (setup (:pkg vertico)
    (vertico-mode)
    (:option vertico-cycle t))
#+end_src

** Orderless
#+begin_src elisp
  (setup (:pkg orderless)
    (require 'orderless)
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src
** savehist
#+begin_src elisp
(setup savehist
       (savehist-mode))
#+end_src
** Completions in Regions with Corfu
#+begin_src elisp :tangle no
  (setup (:pkg corfu :host github :repo "minad/corfu")
    ;; (:with-map corfu-map
    ;;   (:bind "C-j" corfu-next
    ;;          "C-k" corfu-previous
    ;;          "TAB" corfu-insert
    ;;          "C-f" corfu-insert))
    (:option corfu-cycle t)
    (corfu-global-mode))
#+end_src
** Consult Commands
*** consult
#+begin_src elisp
  (setup (:pkg consult)
    (:with-map minibuffer-local-map
      (:bind "C-r" consult-history))
    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)
    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (project-roots)
    (setq consult-project-root-function
          (lambda ()
            (when-let (project (project-current))
              (car (project-roots project)))))
    )
#+end_src
*** consult-dir
#+begin_src elisp :tangle no
  (setup (:pkg consult-dir))
#+end_src
*** search other cwd
#+begin_src elisp
  (defun lewis/ripgrep-search-other-dir()
    (interactive)
    (let ((current-prefix-arg '(-1)))
      (call-interactively 'consult-ripgrep)))
#+end_src
** Completion Annotations with Marginalia

Marginalia provides helpful annotations for various types of minibuffer completions.  You can think of it as a replacement of =ivy-rich=.

#+begin_src elisp

  (setup (:pkg marginalia)
    (:option marginalia-annotators '(marginalia-annotators-heavy
                                     marginalia-annotators-light
                                     nil))
    (marginalia-mode))

#+end_src
** embark
#+begin_src elisp
  (setup (:pkg embark-consult))
  (setup (:pkg embark)
    (:also-load embark-consult)
    (:with-map minibuffer-local-map
      (:bind "C-d" embark-act)
      )
    ;; Show Embark actions via which-key
    (setq embark-action-indicator
	  (lambda (map)
	    (which-key--show-keymap "Embark" map nil nil 'no-paging)
	    #'which-key--hide-popup-ignore-command)
	  embark-become-indicator embark-action-indicator))
#+end_src
** company 相关
*** company-mode
#+begin_src elisp
  (setup
      (:pkg company)
    (:option company-dabbrev-other-buffers nil
             company-dabbrev-ignore-case nil
             company-dabbrev-downcase nil
             company-minimum-prefix-length 2 ; pop up a completion menu by tapping a character
             company-show-numbers nil ; number the candidates (use M-1, M-2 etc to select completions).
             company-require-match nil ; allow input string that do not match candidate words
             company-idle-delay 0 ; trigger completion immediately.
             company-dabbrev-downcase nil
             company-dabbrev-ignore-case t

             company-backends '(
                                (company-capf :with company-yasnippet)
                                (company-dabbrev-code company-keywords company-files)
                                company-dabbrev
                                )
             )
    (:with-hook after-init
      (:hook global-company-mode))
    ;; Add `company-elisp' backend for elisp.
    (add-hook 'emacs-lisp-mode-hook
              #'(lambda ()
                  (require 'company-elisp)
                  (push 'company-elisp company-backends)))
    (:when-loaded
      (with-eval-after-load 'yasnippet
        (defun company-backend-with-yas (backend)
          "Add `yasnippet' to company backend."
          (if (and (listp backend) (member 'company-yasnippet backend))
              backend
            (append (if (consp backend) backend (list backend))
                    '(:with company-yasnippet))))

        (defun my-company-enbale-yas (&rest _)
          "Enable `yasnippet' in `company'."
          (setq company-backends (mapcar #'company-backend-with-yas company-backends)))

        (defun my-lsp-fix-company-capf ()
          "Remove redundant `comapny-capf'."
          (setq company-backends
                (remove 'company-backends (remq 'company-capf company-backends))))
        (advice-add #'lsp-completion--enable :after #'my-lsp-fix-company-capf)

        (defun my-company-yasnippet-disable-inline (fn cmd &optional arg &rest _ignore)
          "Enable yasnippet but disable it inline."
          (if (eq cmd  'prefix)
              (when-let ((prefix (funcall fn 'prefix)))
                (unless (memq (char-before (- (point) (length prefix)))
                              '(?. ?< ?> ?\( ?\) ?\[ ?{ ?} ?\" ?' ?`))
                  prefix))
            (progn
              (when (and (bound-and-true-p lsp-mode)
                         arg (not (get-text-property 0 'yas-annotation-patch arg)))
                (let* ((name (get-text-property 0 'yas-annotation arg))
                       (snip (format "%s (Snippet)" name))
                       (len (length arg)))
                  (put-text-property 0 len 'yas-annotation snip arg)
                  (put-text-property 0 len 'yas-annotation-patch t arg)))
              (funcall fn cmd  arg))))
        (advice-add #'company-yasnippet :around #'my-company-yasnippet-disable-inline)))
    )

#+end_src
*** company-box
#+begin_src elisp
  (setup (:pkg company-box)
    (:hook-into company-mode)
    (:option company-box-doc-delay 0.1
             company-box-show-single-candidate t
             company-box-backends-colors nil
             company-box-max-candidates 50
             )
    (:when-loaded
      ;; Display borders and optimize performance
      (defun my-company-box--display (string on-update)
        "Display the completions."
        (company-box--render-buffer string on-update)

        (let ((frame (company-box--get-frame))
              (border-color (face-foreground 'font-lock-comment-face nil t)))
          (unless frame
            (setq frame (company-box--make-frame))
            (company-box--set-frame frame))
          (company-box--compute-frame-position frame)
          (company-box--move-selection t)
          (company-box--update-frame-position frame)
          (unless (frame-visible-p frame)
            (make-frame-visible frame))
          (company-box--update-scrollbar frame t)
          (set-face-background 'internal-border border-color frame)
          (when (facep 'child-frame-border)
            (set-face-background 'child-frame-border border-color frame)))
        (with-current-buffer (company-box--get-buffer)
          (company-box--maybe-move-number (or company-box--last-start 1))))
      (advice-add #'company-box--display :override #'my-company-box--display)

      (setq company-box-doc-frame-parameters '((internal-border-width . 1)
                                               (left-fringe . 8)
                                               (right-fringe . 8)))

      (defun my-company-box-doc--make-buffer (object)
        (let* ((buffer-list-update-hook nil)
               (inhibit-modification-hooks t)
               (string (cond ((stringp object) object)
                             ((bufferp object) (with-current-buffer object (buffer-string))))))
          (when (and string (> (length (string-trim string)) 0))
            (with-current-buffer (company-box--get-buffer "doc")
              (erase-buffer)
              (insert (propertize "\n" 'face '(:height 0.5)))
              (insert string)
              (insert (propertize "\n\n" 'face '(:height 0.5)))

              ;; Handle hr lines of markdown
              ;; @see `lsp-ui-doc--handle-hr-lines'
              (with-current-buffer (company-box--get-buffer "doc")
                (let (bolp next before after)
                  (goto-char 1)
                  (while (setq next (next-single-property-change (or next 1) 'markdown-hr))
                    (when (get-text-property next 'markdown-hr)
                      (goto-char next)
                      (setq bolp (bolp)
                            before (char-before))
                      (delete-region (point) (save-excursion (forward-visible-line 1) (point)))
                      (setq after (char-after (1+ (point))))
                      (insert
                       (concat
                        (and bolp (not (equal before ?\n)) (propertize "\n" 'face '(:height 0.5)))
                        (propertize "\n" 'face '(:height 0.5))
                        (propertize " "
                                    'display '(space :height (1))
                                    'company-box-doc--replace-hr t
                                    'face `(:background ,(face-foreground 'font-lock-comment-face)))
                        (propertize " " 'display '(space :height (1)))
                        (and (not (equal after ?\n)) (propertize " \n" 'face '(:height 0.5)))))))))

              (setq mode-line-format nil
                    display-line-numbers nil
                    header-line-format nil
                    show-trailing-whitespace nil
                    cursor-in-non-selected-windows nil)
              (current-buffer)))))
      (advice-add #'company-box-doc--make-buffer :override #'my-company-box-doc--make-buffer)

      ;; Display the border and fix the markdown header properties
      (defun my-company-box-doc--show (selection frame)
        (cl-letf (((symbol-function 'completing-read) #'company-box-completing-read)
                  (window-configuration-change-hook nil)
                  (inhibit-redisplay t)
                  (display-buffer-alist nil)
                  (buffer-list-update-hook nil))
          (-when-let* ((valid-state (and (eq (selected-frame) frame)
                                         company-box--bottom
                                         company-selection
                                         (company-box--get-frame)
                                         (frame-visible-p (company-box--get-frame))))
                       (candidate (nth selection company-candidates))
                       (doc (or (company-call-backend 'quickhelp-string candidate)
                                (company-box-doc--fetch-doc-buffer candidate)))
                       (doc (company-box-doc--make-buffer doc)))
            (let ((frame (frame-local-getq company-box-doc-frame))
                  (border-color (face-foreground 'font-lock-comment-face nil t)))
              (unless (frame-live-p frame)
                (setq frame (company-box-doc--make-frame doc))
                (frame-local-setq company-box-doc-frame frame))
              (set-face-background 'internal-border border-color frame)
              (when (facep 'child-frame-border)
                (set-face-background 'child-frame-border border-color frame))
              (company-box-doc--set-frame-position frame)

              ;; Fix hr props. @see `lsp-ui-doc--fix-hr-props'
              (with-current-buffer (company-box--get-buffer "doc")
                (let (next)
                  (while (setq next (next-single-property-change (or next 1) 'company-box-doc--replace-hr))
                    (when (get-text-property next 'company-box-doc--replace-hr)
                      (put-text-property next (1+ next) 'display
                                         '(space :align-to (- right-fringe 1) :height (1)))
                      (put-text-property (1+ next) (+ next 2) 'display
                                         '(space :align-to right-fringe :height (1)))))))

              (unless (frame-visible-p frame)
                (make-frame-visible frame))))))
      (advice-add #'company-box-doc--show :override #'my-company-box-doc--show)

      (defun my-company-box-doc--set-frame-position (frame)
        (-let* ((frame-resize-pixelwise t)

                (box-frame (company-box--get-frame))
                (box-position (frame-position box-frame))
                (box-width (frame-pixel-width box-frame))
                (box-height (frame-pixel-height box-frame))
                (box-border-width (frame-border-width box-frame))

                (window (frame-root-window frame))
                ((text-width . text-height) (window-text-pixel-size window nil nil
                                                                    (/ (frame-pixel-width) 2)
                                                                    (/ (frame-pixel-height) 2)))
                (border-width (or (alist-get 'internal-border-width company-box-doc-frame-parameters) 0))

                (x (- (+ (car box-position) box-width) border-width))
                (space-right (- (frame-pixel-width) x))
                (space-left (car box-position))
                (fringe-left (or (alist-get 'left-fringe company-box-doc-frame-parameters) 0))
                (fringe-right (or (alist-get 'right-fringe company-box-doc-frame-parameters) 0))
                (width (+ text-width border-width fringe-left fringe-right))
                (x (if (> width space-right)
                       (if (> space-left width)
                           (- space-left width)
                         space-left)
                     x))
                (y (cdr box-position))
                (bottom (+ company-box--bottom (frame-border-width)))
                (height (+ text-height (* 2 border-width)))
                (y (cond ((= x space-left)
                          (if (> (+ y box-height height) bottom)
                              (+ (- y height) border-width)
                            (- (+ y box-height) border-width)))
                         ((> (+ y height) bottom)
                          (- (+ y box-height) height))
                         (t y))))
          (set-frame-position frame (max x 0) (max y 0))
          (set-frame-size frame text-width text-height t)))
      (advice-add #'company-box-doc--set-frame-position :override #'my-company-box-doc--set-frame-position)


        (setq company-box-icons-all-the-icons
              `((Unknown . ,(all-the-icons-material "find_in_page" :height 1.0 :v-adjust -0.2))
                (Text . ,(all-the-icons-faicon "text-width" :height 1.0 :v-adjust -0.02))
                (Method . ,(all-the-icons-faicon "cube" :height 1.0 :v-adjust -0.02 :face 'all-the-icons-purple))
                (Function . ,(all-the-icons-faicon "cube" :height 1.0 :v-adjust -0.02 :face 'all-the-icons-purple))
                (Constructor . ,(all-the-icons-faicon "cube" :height 1.0 :v-adjust -0.02 :face 'all-the-icons-purple))
                (Field . ,(all-the-icons-octicon "tag" :height 1.1 :v-adjust 0 :face 'all-the-icons-lblue))
                (Variable . ,(all-the-icons-octicon "tag" :height 1.1 :v-adjust 0 :face 'all-the-icons-lblue))
                (Class . ,(all-the-icons-material "settings_input_component" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-orange))
                (Interface . ,(all-the-icons-material "share" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-lblue))
                (Module . ,(all-the-icons-material "view_module" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-lblue))
                (Property . ,(all-the-icons-faicon "wrench" :height 1.0 :v-adjust -0.02))
                (Unit . ,(all-the-icons-material "settings_system_daydream" :height 1.0 :v-adjust -0.2))
                (Value . ,(all-the-icons-material "format_align_right" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-lblue))
                (Enum . ,(all-the-icons-material "storage" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-orange))
                (Keyword . ,(all-the-icons-material "filter_center_focus" :height 1.0 :v-adjust -0.2))
                (Snippet . ,(all-the-icons-material "format_align_center" :height 1.0 :v-adjust -0.2))
                (Color . ,(all-the-icons-material "palette" :height 1.0 :v-adjust -0.2))
                (File . ,(all-the-icons-faicon "file-o" :height 1.0 :v-adjust -0.02))
                (Reference . ,(all-the-icons-material "collections_bookmark" :height 1.0 :v-adjust -0.2))
                (Folder . ,(all-the-icons-faicon "folder-open" :height 1.0 :v-adjust -0.02))
                (EnumMember . ,(all-the-icons-material "format_align_right" :height 1.0 :v-adjust -0.2))
                (Constant . ,(all-the-icons-faicon "square-o" :height 1.0 :v-adjust -0.1))
                (Struct . ,(all-the-icons-material "settings_input_component" :height 1.0 :v-adjust -0.2 :face 'all-the-icons-orange))
                (Event . ,(all-the-icons-octicon "zap" :height 1.0 :v-adjust 0 :face 'all-the-icons-orange))
                (Operator . ,(all-the-icons-material "control_point" :height 1.0 :v-adjust -0.2))
                (TypeParameter . ,(all-the-icons-faicon "arrows" :height 1.0 :v-adjust -0.02))
                (Template . ,(all-the-icons-material "format_align_left" :height 1.0 :v-adjust -0.2)))
              company-box-icons-alist 'company-box-icons-all-the-icons)))

#+end_src
** yasnippet
#+begin_src elisp
  (setup (:pkg yasnippet)
    (:delay)
    (require 'yasnippet)
    (:option yas-snippet-dirs '("~/nowisemacs/snippets"))
    (yas-global-mode 1))
  (setup (:pkg yasnippet-snippets)
    (:delay))
#+end_src
* Window Management
* 输入与阅读
** pyim
只在linux平台使用
#+begin_src elisp
   (setup (:pkg posframe))

  (defun lewis/pyim-config()
        (setq pyim-default-scheme 'quanpin)
        (setq pyim-punctuation-translate-p
              '(auto yes no))
        (progn
          (set-default 'pyim-punctuation-half-width-functions
                       '(pyim-probe-punctuation-line-beginning pyim-probe-punctuation-after-punctuation)))
        (pyim-isearch-mode 1)
        (defalias 'pyim-probe-meow-normal-mode
          #'(lambda nil
              (meow-normal-mode-p)))
        (progn
          (set-default 'pyim-english-input-switch-functions
                       '(pyim-probe-auto-english pyim-probe-isearch-mode pyim-probe-program-mode pyim-probe-org-structure-template pyim-probe-org-latex-mode pyim-probe-meow-normal-mode)))
        (setq pyim-page-tooltip 'posframe)
        (setq pyim-page-length 5)
        ;; (setq ivy-re-builders-alist
        ;; 	    '((t . pyim-cregexp-ivy)))
        (defalias 'my-orderless-regexp
          #'(lambda
              (orig_func component)
              (let
                  ((result
                    (funcall orig_func component)))
                (pyim-cregexp-build result))))
        (advice-add 'orderless-regexp :around #'my-orderless-regexp)

    )
  (setup (:pkg pyim)
        (:option pyim-dicts
           '((:name "lewis_pyim_dict" :file "~/Documents/emacs/pyim-dict/lewis_pyim_dict.pyim")
             (:name "lewis_big_dict" :file "~/Documents/emacs/pyim-dict/pyim-bigdict.pyim.gz")))
        (:delay)
        (:when-loaded (lewis/pyim-config))
        (setq default-input-method "pyim")
        )
#+end_src

** good-scroll
#+begin_src elisp
(setup (:pkg good-scroll))
#+end_src
* File Browsing
** dired

** fd-dired
#+begin_src elisp
(setup (:pkg fd-dired))
#+end_src
** treemacs
#+begin_src elisp
(setup (:pkg treemacs))
#+end_src
** app-launcher
#+begin_src elisp
(setup (:pkg app-launcher :host github :repo "SebastienWae/app-launcher"))
#+end_src
** exwm
#+begin_src elisp :tangle no
  (setup exwm
    (:if-system 'gnu/linux)
    (:pkg exwm)
    (:when-loaded
      (require 'exwm)

      (require 'exwm-config)
      (exwm-config-example)
        ;; using xim input
  (require 'exwm-xim)
  (exwm-xim-enable)
  (push ?\C-\\ exwm-input-prefix-keys)   ;; use Ctrl + \ to switch input method
      )
    )
#+end_src
* shell
** aweshell
#+begin_src elisp
      (setup (:pkg aweshell :host github :repo "manateelazycat/aweshell")
	(:autoload aweshell-toggle)
	(:autoload aweshell-dedicated-toggle))
#+end_src
** exec-path-from-shell
#+begin_src elisp
  (setup (:pkg exec-path-from-shell)
    (:delay)
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))
    )
#+end_src
* git
** magit
#+begin_src elisp
  (setup (:pkg magit))
#+end_src
** blamer
#+begin_src elisp
  (setup (:pkg blamer :host github :repo "artawower/blamer.el")
    (:option blamer-idle-time 0.3
             blamer-min-offset 70)
    ;; (:delay)
    ;; (:when-loaded
      ;; (global-blamer-mode 1))
    )
#+end_src
* 编程
** flycheck
** elisp
*** helpful
#+begin_src elisp
(setup (:pkg helpful)
       (:global "C-h f" #'helpful-callable
                "C-h v" #'helpful-variable
                "C-h k" #'helpful-key
                "C-c C-d" #'helpful-at-point
                "C-h F" #'helpful-function
                "C-h C" #'helpful-command))
#+end_src
*** elisp-demos
#+begin_src elisp
(setup (:pkg elisp-demos)
       (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update)
       )
#+end_src
*** elispfl
#+begin_src elisp
(setup (:pkg elispfl :host github :repo "cireu/elispfl")
       (:hook-into emacs-lisp-mode ielm)
       )
#+end_src
** tree-sitter
#+begin_src elisp
  (setup tree-sitter-langs
    (:if-system 'gnu/linux)
    (:pkg tree-sitter-langs)
    )
  (setup tree-sitter
    (:if-system 'gnu/linux)
    (:pkg tree-sitter)
    ;; (:hook-into prog-mode)
    (:when-loaded
      (require 'tree-sitter-langs)
      (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
      )
    )
#+end_src

** lsp mode
*** lsp-mode
#+begin_src elisp
  (setup (:pkg lsp-mode)
    (:hook lsp-enable-which-key-integration)
    (:option lsp-keymap-prefix "C-c l"
             lsp-keep-workspace-alive nil
             lsp-signature-auto-activate nil
             lsp-modeline-code-actions-enable nil
             lsp-modeline-diagnostics-enable nil
             lsp-modeline-workspace-status-enable nil
             lsp-headerline-breadcrumb-enable nil

             lsp-enable-file-watchers nil
             lsp-enable-folding nil
             lsp-enable-symbol-highlighting nil
             lsp-enable-text-document-color nil

             lsp-enable-indentation nil
             lsp-enable-on-type-formatting nil
             )

             ;; lsp-clients-svlangserver-launchConfiguration "verilator -sv --lint-only -Wall"
             ;; lsp-clients-svlangserver-formatCommand "verible-verilog-format")
    (:bind [remap xref-find-definitions] lsp-find-definition)
    (:bind [remap xref-find-references] lsp-find-references)
    ;; verilog-mode
    ;; (:with-mode verilog-mode
    ;;   (:hook lsp-deferred))

    )
#+end_src
*** lsp-ui
#+begin_src elisp
  (setup (:pkg lsp-ui)
    (:bind [remap xref-find-definitions] lsp-ui-peek-find-definitions)
    (:bind [remap xref-find-references] lsp-ui-peek-find-references)
    (:hook-into lsp-mode)
    (:option lsp-ui-sideline-show-diagnostics nil
             lsp-ui-sideline-ignore-duplicate t
             lsp-ui-doc-delay 0.1
             lsp-ui-doc-position 'at-point
             lsp-ui-doc-border (face-foreground 'font-lock-comment-face nil t)
             lsp-ui-imenu-colors `(,(face-foreground 'font-lock-keyword-face)
                                  ,(face-foreground 'font-lock-string-face)
                                   ,(face-foreground 'font-lock-constant-face)
                                   ,(face-foreground 'font-lock-variable-name-face)))
    )
#+end_src
*** lsp-treemacs
#+begin_src elisp
(setup (:pkg lsp-treemacs))
#+end_src
*** dap-mode
#+begin_src elisp
  (setup (:pkg dap-mode))
  (setup (:pkg consult-lsp))
#+end_src
*** lsp-org-special
#+begin_src elisp
  (cl-defmacro lsp-org-babel-enable (lang)
    "Support LANG in org source code block."
    (setq centaur-lsp 'lsp-mode)
    (cl-check-type lang stringp)
    (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
           (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
      `(progn
         (defun ,intern-pre (info)
           (let ((file-name (->> info caddr (alist-get :file))))
             (unless file-name
               (setq file-name (make-temp-file "babel-lsp-")))
             (setq buffer-file-name file-name)
             ;; (eglot-ensure)))
             (lsp-deferred)))
         (put ',intern-pre 'function-documentation
              (format "Enable lsp-mode in the buffer of org source block (%s)."
                      (upcase ,lang)))
         (if (fboundp ',edit-pre)
             (advice-add ',edit-pre :after ',intern-pre)
           (progn
             (defun ,edit-pre (info)
               (,intern-pre info))
             (put ',edit-pre 'function-documentation
                  (format "Prepare local buffer environment for org source block (%s)."
                          (upcase ,lang))))))))
  (defvar org-babel-lang-list
    '("go" "python" "ipython" "bash" "sh" "C++" "C" "verilog"))
  (dolist (lang org-babel-lang-list)
    (eval `(lsp-org-babel-enable ,lang)))
#+end_src
** conda
#+begin_src elisp
  (setup (:pkg conda)
    (:delay)
    (:when-loaded
      (when (eq system-type 'darwin)
        (custom-set-variables '(conda-anaconda-home "/Users/liuyi/miniforge3"))
        (setq conda-env-home-directory (expand-file-name "~/miniforge3/"))
        )
      (when (eq system-type 'gnu/linux)
        ;; 要用绝对路径
        (custom-set-variables '(conda-anaconda-home "/home/lewisliu/miniconda3"))
        (setq conda-env-home-directory (expand-file-name "/home/lewisliu/miniconda3/"))
        )
      ;; interactivate shell support
      (conda-env-initialize-interactive-shells)
      ;; eshell support
      (conda-env-initialize-eshell)
      ;; (conda-env-autoactivate-mode t)
      )
    )
#+end_src
** citre
#+begin_src elisp
  (setup (:pkg citre)
    ;; This is needed in `:init' block for lazy load to work.
    (require 'citre-config)
    (:option
     ;; citre-project-root-function #'projectile-project-root
     ;; See the "Create tags file" section above to know these options
     citre-use-project-root-when-creating-tags t
     citre-prompt-language-for-ctags-command t
     ;; By default, when you open any file, and a tags file can be found for it,
     ;; `citre-mode' is automatically enabled.  If you only want this to work for
     ;; certain modes (like `prog-mode'), set it like this.
     citre-auto-enable-citre-mode-modes '(prog-mode)))
#+end_src
** symbol-overlay
#+begin_src elisp
  (setup (:pkg symbol-overlay)
    (:autoload symbol-overlay-put)
    )
#+end_src
** graphviz-dot-mode
#+begin_src elisp
  (setup (:pkg graphviz-dot-mode)
    (:file-match "\\.dot\\'")
    (:option graphviz-dot-indent-width 4))
#+end_src
** verilog
#+begin_src elisp :tangle nil
  (setup verilog-mode
    (:file-match "//.sv//")
    (:when-loaded
      (require 'lsp)
      (lsp-register-client
       (make-lsp-client :new-connection (lsp-stdio-connection '("svls"))
                        :major-modes '(verilog-mode)
                        :priority -1
                        ))
      ;; (lsp)
      ;; (flycheck-mode t)
      (add-to-list 'lsp-language-id-configuration '(verilog-mode . "verilog"))
      )
    )

#+end_src
* Org Mode
** 杂项设置
#+begin_src elisp
  (setup (:pkg org :type built-in)
    (setq org-directory "~/Documents/emacs/orgmode/")
    (:option org-adapt-indentation t
             org-startup-indented t
             org-imenu-depth 5
             org-startup-folded t
             org-blank-before-new-entry '((heading . nil)
                                          (plain-list-item . nil))

             )
    (:file-match "\\.org\\'")
    (:when-loaded
      (require 'org-tempo)
      (setq-default org-todo-keywords
                    (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                            (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))
      (setq-default org-todo-keyword-faces
                    (quote (("TODO" :foreground "red" :weight bold)
                            ("NEXT" :foreground "blue" :weight bold)
                            ("DONE" :foreground "forest green" :weight bold)
                            ("WAITING" :foreground "orange" :weight bold)
                            ("HOLD" :foreground "magenta" :weight bold)
                            ("CANCELLED" :foreground "forest green" :weight bold)
                            ("MEETING" :foreground "forest green" :weight bold)
                            ("PHONE" :foreground "forest green" :weight bold))))
      ;; 导出相关的设置

      (setq org-latex-pdf-process
            '("xelatex -interaction nonstopmode %f"
              "bibtex %b"
              "xelatex -interaction nonstopmode %f"
              "xelatex -interaction nonstopmode %f"))

      ;;设置粗体高亮颜色
      (require 'cl)
      (setq org-emphasis-alist
            (cons '("*" '(:emphasis t :foreground "pale violet red" :weight bold))
                  (delete* "*" org-emphasis-alist :key 'car :test 'equal))
            )
      (setq org-emphasis-alist
            (cons '("/" '(:slant t :foreground "green3" :slant italic))
                  (delete* "/" org-emphasis-alist :key 'car :test 'equal))
            )
      ))

  (setup (:pkg org-contrib :host github :repo "emacsmirror/org-contrib"))

  ;; (add-hook 'visual-line-mode-hook #'visual-fill-column-mode)
  ;; (add-hook 'visual-line-mode-hook #'(lambda () (setq word-wrap nil)))
#+end_src
** org-babel
#+begin_src elisp

#+end_src
** imenu-list
#+begin_src elisp
  (setup (:pkg imenu-list)
    (:autoload imenu-list-smart-toggle)
    (:option imenu-list-focus-after-activate t
             imenu-list-auto-resize t
             imenu-list-position 'left
             )
    )
#+end_src
** beauty
#+begin_src elisp
  (setup (:pkg org-superstar)
    (:hook-into org-mode)
    (:option org-superstar-leading-bullet ?\s
	     org-superstar-leading-fallback ?\s
	     org-hide-leading-stars nil
	     org-superstar-todo-bullet-alist
	'(("TODO" . 9744)
	  ("[ ]"  . 9744)
	  ("DONE" . 9745)
	  ("[X]"  . 9745))))
(setq org-superstar-headline-bullets-list '("①" "②" "③"
                                "④" "⑤" "⑥" "⑦"
                                "⑧" "⑨" "⑩" "⑪"
                                "⑫" "⑬" "⑭"
                                "⑮" "⑯" "⑰"
                                "⑱" "⑲" "⑳"))
;;"⓪"

(setq org-hide-emphasis-markers t)
(setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "ℱ")
                                       ("#+END_SRC" . "Ⅎ")
                                       ("#+begin_src" . "ℱ")
                                       ("#+end_src" . "Ⅎ")))
(add-hook 'org-mode-hook 'prettify-symbols-mode)

#+end_src

** org-download
#+begin_src elisp
  (setup (:pkg org-download)
    (:option org-download-method 'directory
              org-download-screenshot-basename "screenshot.jpg"
              org-download-image-dir "~/Documents/emacs/orgmode/PicturesForAll/org_download_images")
    (:when-loaded
      (when (eq system-type 'gnu/linux)
        (setq-default org-download-screenshot-method "spectacle"))
      (when (eq system-type 'darwin)
        (setq org-download-screenshot-method "screencapture -i %s")))
    (:autoload org-download-screenshot)
    )
#+end_src
** org-roam
*** org-roam
#+begin_src elisp
  (setup (:pkg emacsql))
  (setq org-roam-v2-ack t)
  (setq org-roam-directory "~/Documents/emacs/orgmode/roam/")
  (setq org-roam-dailies-directory "~/Documents/emacs/orgmode/roam")
  (setup (:pkg org-roam)
    (:option org-roam-mode-section-functions
             (list #'org-roam-backlinks-section
                   #'org-roam-reflinks-section
                   ;; #'org-roam-unlinked-references-section
                   )
             org-roam-completion-everywhere t
             org-roam-db-gc-threshold most-positive-fixnum
             org-roam-node-display-template "${doom-hierarchy:*} ${tags:37}"
             )
    (:when-loaded
      (org-roam-db-autosync-mode)

      (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node))
        "Return the value of \"#+title:\" (if any) from file that NODE resides in.
  If there's no file-level title in the file, return empty string."
        (or (if (= (org-roam-node-level node) 0)
                (org-roam-node-title node)
              (org-roam-get-keyword "TITLE" (org-roam-node-file node)))
            ""))

      (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node))
        "Return hierarchy for NODE, constructed of its file title, OLP and direct title.
    If some elements are missing, they will be stripped out."
        (let ((title     (org-roam-node-title node))
              (olp       (org-roam-node-olp   node))
              (level     (org-roam-node-level node))
              (filetitle (org-roam-node-doom-filetitle node))
              (separator (propertize " > " 'face 'shadow)))
          (cl-case level
            ;; node is a top-level file
            (0 filetitle)
            ;; node is a level 1 heading
            (1 (concat (propertize filetitle 'face '(shadow italic))
                       separator title))
            ;; node is a heading with an arbitrary outline path
            (t (concat (propertize filetitle 'face '(shadow italic))
                       separator (propertize (string-join olp " > ") 'face '(shadow italic))
                       separator title)))))


      (add-to-list 'display-buffer-alist
                   '("\\*org-roam\\*"
                     (display-buffer-in-side-window)
                     (side . right)
                     (slot . 0)
                     (window-width . 0.25)
                     (window-parameters . ((no-other-window . t)
                                           (no-delete-other-windows . t)))))

      ))



#+end_src
*** org-roam-ui
#+begin_src elisp
  (setup (:pkg websocket))
  (setup (:pkg simple-httpd))
  (setup (:pkg org-roam-ui :host github :repo "org-roam/org-roam-ui" :files ("*.el" "out")))
#+end_src
*** org-roam-agenda
#+begin_src elisp
(defun vulpea-project-p ()
  "Return non-nil if current buffer has any todo entry.
TODO entries marked as done are ignored, meaning the this
function returns nil if current buffer contains only completed
tasks."
  (seq-find                                 ; (3)
   (lambda (type)
     (eq type 'todo))
   (org-element-map                         ; (2)
       (org-element-parse-buffer 'headline) ; (1)
       'headline
     (lambda (h)
       (org-element-property :todo-type h)))))

(defun vulpea-project-update-tag ()
    "Update PROJECT tag in the current buffer."
    (when (and (not (active-minibuffer-window))
               (vulpea-buffer-p))
      (save-excursion
        (goto-char (point-min))
        (let* ((tags (vulpea-buffer-tags-get))
               (original-tags tags))
          (if (vulpea-project-p)
              (setq tags (cons "project" tags))
            (setq tags (remove "project" tags)))

          ;; cleanup duplicates
          (setq tags (seq-uniq tags))

          ;; update tags if changed
          (when (or (seq-difference tags original-tags)
                    (seq-difference original-tags tags))
            (apply #'vulpea-buffer-tags-set tags))))))

(defun vulpea-buffer-p ()
  "Return non-nil if the currently visited buffer is a note."
  (and buffer-file-name
       (string-prefix-p
        (expand-file-name (file-name-as-directory org-roam-directory))
        (file-name-directory buffer-file-name))))

(defun vulpea-project-files ()
    "Return a list of note files containing 'project' tag." ;
    (seq-uniq
     (seq-map
      #'car
      (org-roam-db-query
       [:select [nodes:file]
        :from tags
        :left-join nodes
        :on (= tags:node-id nodes:id)
        :where (like tag (quote "%\"project\"%"))]))))

(defun vulpea-agenda-files-update (&rest _)
  "Update the value of `org-agenda-files'."
  (setq org-agenda-files (vulpea-project-files)))

(add-hook 'find-file-hook #'vulpea-project-update-tag)
(add-hook 'before-save-hook #'vulpea-project-update-tag)

(advice-add 'org-agenda :before #'vulpea-agenda-files-update)

;; functions borrowed from `vulpea' library
;; https://github.com/d12frosted/vulpea/blob/6a735c34f1f64e1f70da77989e9ce8da7864e5ff/vulpea-buffer.el

(defun vulpea-buffer-tags-get ()
  "Return filetags value in current buffer."
  (vulpea-buffer-prop-get-list "filetags" " "))

(defun vulpea-buffer-tags-set (&rest tags)
  "Set TAGS in current buffer.
If filetags value is already set, replace it."
  (vulpea-buffer-prop-set "filetags" (string-join tags " ")))

(defun vulpea-buffer-tags-add (tag)
  "Add a TAG to filetags in current buffer."
  (let* ((tags (vulpea-buffer-tags-get))
         (tags (append tags (list tag))))
    (apply #'vulpea-buffer-tags-set tags)))

(defun vulpea-buffer-tags-remove (tag)
  "Remove a TAG from filetags in current buffer."
  (let* ((tags (vulpea-buffer-tags-get))
         (tags (delete tag tags)))
    (apply #'vulpea-buffer-tags-set tags)))

(defun vulpea-buffer-prop-set (name value)
  "Set a file property called NAME to VALUE in buffer file.
If the property is already set, replace its value."
  (setq name (downcase name))
  (org-with-point-at 1
    (let ((case-fold-search t))
      (if (re-search-forward (concat "^#\\+" name ":\\(.*\\)")
                             (point-max) t)
          (replace-match (concat "#+" name ": " value) 'fixedcase)
        (while (and (not (eobp))
                    (looking-at "^[#:]"))
          (if (save-excursion (end-of-line) (eobp))
              (progn
                (end-of-line)
                (insert "\n"))
            (forward-line)
            (beginning-of-line)))
        (insert "#+" name ": " value "\n")))))

(defun vulpea-buffer-prop-set-list (name values &optional separators)
  "Set a file property called NAME to VALUES in current buffer.
VALUES are quoted and combined into single string using
`combine-and-quote-strings'.
If SEPARATORS is non-nil, it should be a regular expression
matching text that separates, but is not part of, the substrings.
If nil it defaults to `split-string-default-separators', normally
\"[ \f\t\n\r\v]+\", and OMIT-NULLS is forced to t.
If the property is already set, replace its value."
  (vulpea-buffer-prop-set
   name (combine-and-quote-strings values separators)))

(defun vulpea-buffer-prop-get (name)
  "Get a buffer property called NAME as a string."
  (org-with-point-at 1
    (when (re-search-forward (concat "^#\\+" name ": \\(.*\\)")
                             (point-max) t)
      (buffer-substring-no-properties
       (match-beginning 1)
       (match-end 1)))))

(defun vulpea-buffer-prop-get-list (name &optional separators)
  "Get a buffer property NAME as a list using SEPARATORS.
If SEPARATORS is non-nil, it should be a regular expression
matching text that separates, but is not part of, the substrings.
If nil it defaults to `split-string-default-separators', normally
\"[ \f\t\n\r\v]+\", and OMIT-NULLS is forced to t."
  (let ((value (vulpea-buffer-prop-get name)))
    (when (and value (not (string-empty-p value)))
      (split-string-and-unquote value separators))))
#+end_src

** ox-hugo
** org-pomodoro
#+begin_src elisp
  (setup (:pkg org-pomodoro)
    (:option org-pomodoro-finished-sound "~/Documents/emacs/pyim-dict/applaud.wav")
    )
    ;; (:when-loaded
    ;;   (alert-add-rule :category "org-pomodoro"
    ;;                   :style (cond (alert-growl-command
    ;;                                 'growl)
    ;;                                (alert-notifier-command
    ;;                                 'notifier)
    ;;                                (alert-libnotify-command
    ;;                                 'libnotify)
    ;;                                (alert-default-style)))
    ;;   (defun pomodoro-awesome-tray()
    ;;     (let ((s (cl-case org-pomodoro-state
    ;;                (:pomodoro
    ;;                 (propertize org-pomodoro-format))
    ;;                (:overtime
    ;;                 (propertize org-pomodoro-overtime-format))
    ;;                (:short-break
    ;;                 (propertize org-pomodoro-short-break-format))
    ;;                (:long-break
    ;;                 (propertize org-pomodoro-long-break-format)))))
    ;;               (concat "[" (format s (org-pomodoro-format-seconds)) "] ")))
    ;;     (add-to-list 'awesome-tray-module-alist '("pomodoro" . (pomodoro-awesome-tray awesome-tray-module-evil-face)))
    ;;     (add-to-list 'awesome-tray-active-modules "pomodoro")
    ;;     )
    ;;   )


#+end_src
** ox-hugo
#+begin_src elisp
  (setup (:pkg ox-hugo)
    (:load-after ox)
   )
#+end_src
* 翻译
** 有道词典
#+begin_src elisp
(setup (:pkg youdao-dictionary)
  )
#+end_src
** english-teacher
自动翻译当前buffer 的句子，在下方显示，按键和 company-teacher-helper-mode 在一起
#+begin_src elisp
(setup (:pkg english-teacher :host github
           :repo "loyalpartner/english-teacher.el")
  )
#+end_src
** insert-translated-name
#+begin_src elisp
    (setup (:pkg insert-translated-name :host github :repo "manateelazycat/insert-translated-name")
      (:autoload insert-translated-name-insert)
      (:autoload insert-translated-name-replace))
#+end_src
** company-english-helper
在输入英文的时候，自动提示单词
#+begin_src elisp
(setup (:pkg company-english-helper :host github
           :repo "manateelazycat/company-english-helper")
       (:autoload toggle-company-english-helper))

#+end_src
* 阅读
** pdf-tools
#+begin_src elisp
  (setup (:pkg pdf-tools :host github :repo "vedang/pdf-tools")
    (:option pdf-view-use-scaling t)
    ;; (pdf-annot-list-format '((page . 3) (type . 10) (contents . 25)))
    (pdf-loader-install)
    )
  (setup (:pkg pdf-continuous-scroll-mode :host github :repo "dalanicolai/pdf-continuous-scroll-mode.el")
    (:hook-into pdf-view-mode-hook)
    )

#+end_src
** org-noter
#+begin_src elisp
  (setup (:pkg org-noter)
    (:option
     org-noter-notes-search-path (list org-directory)
     org-noter-auto-save-last-location t
     org-noter-separate-notes-from-heading nil
     org-noter-doc-split-percentage '(0.6 . 0.4)
     )
    )
#+end_src
** nov
#+begin_src elisp
#+end_src
** elfeed
* Runtime Performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.
#+begin_src elisp
  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src
