#+TITLE: Emacs Configuration
#+PROPERTY: header-args:elisp :tangle ~/.emacs.d/modules/init-config.el
I failed in love with denote, so previous *org-roam* configs were refiled into [[file:useful-tools/old-elisps/org-roam-config.org][org-roam configs]]
* Content                                                               :toc:
- [[#startup-config][Startup config]]
  - [[#ui-speed-up][UI speed up]]
  - [[#basic-modes][basic modes]]
  - [[#load-path][load-path]]
  - [[#drop][drop]]
  - [[#set-vars][set vars]]
- [[#package-management][Package Management]]
  - [[#setup][setup]]
  - [[#epkg][epkg]]
- [[#gcmh][gcmh]]
- [[#keyboard-bindings][Keyboard Bindings]]
  - [[#meow][meow]]
  - [[#transient-and-related-leader-map][transient and related leader-map]]
  - [[#meow-leader-keybindings][meow leader keybindings]]
  - [[#which-key][which-key]]
  - [[#electric][electric]]
- [[#package-library][Package Library]]
  - [[#dash][dash]]
  - [[#s][s]]
  - [[#f][f]]
- [[#ui][UI]]
  - [[#font][font]]
  - [[#variable-pitch][variable-pitch]]
  - [[#theme][Theme]]
  - [[#line-number][line number]]
  - [[#nerd-icons][nerd-icons]]
  - [[#nerd-icons-completion][nerd-icons-completion]]
  - [[#rainbow-delimiters][rainbow-delimiters]]
  - [[#diff-hl][diff-hl]]
  - [[#emacs-dashboard][emacs-dashboard]]
  - [[#doom-modeline][doom-modeline]]
  - [[#hl-todo][hl-todo]]
  - [[#pulsar][pulsar]]
  - [[#show-paren-mode][show-paren-mode]]
- [[#general-configuration][General Configuration]]
  - [[#simple][simple]]
  - [[#general-builtin-modes][general builtin modes]]
  - [[#backup][backup]]
  - [[#no-littering][no-littering]]
  - [[#recentf][recentf]]
  - [[#自动换行][自动换行]]
  - [[#so-long][so-long]]
  - [[#tramp][TRAMP]]
  - [[#automatically-clean-whitespace][Automatically clean whitespace]]
  - [[#exec-path-from-shell][exec-path-from-shell]]
  - [[#undo][Undo]]
- [[#search][Search]]
  - [[#isearch][isearch]]
  - [[#consult-commands][Consult Commands]]
  - [[#rgel][rg.el]]
- [[#补全][补全]]
  - [[#completions-with-vertico][Completions with Vertico]]
  - [[#orderless-and-pinyinlib][Orderless and pinyinlib]]
  - [[#marginalia][Marginalia]]
  - [[#embark][embark]]
  - [[#yasnippet][yasnippet]]
  - [[#tempel][tempel]]
- [[#window-management][Window Management]]
  - [[#winner-mode][winner-mode]]
  - [[#popper][popper]]
  - [[#move][Move]]
- [[#ibuffer][ibuffer]]
  - [[#ibuffer-1][ibuffer]]
- [[#input][Input]]
  - [[#posframe][posframe]]
  - [[#pyim][pyim]]
  - [[#rime][rime]]
- [[#file-and-browsing][File and Browsing]]
  - [[#file-browsing][file browsing]]
  - [[#structure-browsing][structure browsing]]
  - [[#tab-line-and-tab-bar][tab-line and tab-bar]]
  - [[#tabspaces][tabspaces]]
  - [[#project][project]]
  - [[#project-rootfile][project-rootfile]]
- [[#shell][shell]]
  - [[#vterm][vterm]]
  - [[#vterm-toggle][vterm-toggle]]
  - [[#eshell][eshell]]
  - [[#eat][eat]]
- [[#git][git]]
  - [[#magit][magit]]
  - [[#ediff][ediff]]
- [[#program][Program]]
  - [[#language][Language]]
  - [[#useful-programing-tools][Useful programing tools]]
- [[#org-mode][Org Mode]]
  - [[#org-mode-1][org-mode]]
  - [[#org-modern][org-modern]]
  - [[#org-modern-indent][org-modern-indent]]
  - [[#org-appear][org-appear]]
  - [[#org-download][org-download]]
  - [[#ox-hugo][ox-hugo]]
  - [[#org-clock][org-clock]]
  - [[#org-noter][org-noter]]
  - [[#org-present][org-present]]
  - [[#bibtex-related][bibtex related]]
  - [[#toc-org][toc-org]]
  - [[#denote][denote]]
  - [[#denote-lumn][denote-lumn]]
  - [[#find-orgmode-dir-files][find orgmode dir files]]
  - [[#org-imagine-excalidraw][org-imagine, excalidraw]]
  - [[#shrface][shrface]]
  - [[#org-remark][org-remark]]
  - [[#annotate][annotate]]
  - [[#clue][clue]]
  - [[#org-gtd][org-gtd]]
  - [[#agendagtd-disabled][agenda/gtd (disabled)]]
  - [[#org-ql][org-ql]]
  - [[#mpvi][mpvi]]
  - [[#orgtbl-aggregate][orgtbl-aggregate]]
  - [[#org-fc][org-fc]]
- [[#english-翻译][english 翻译]]
  - [[#go-translate][go-translate]]
  - [[#sdcv][sdcv]]
  - [[#immersive-translate][immersive-translate]]
- [[#阅读][阅读]]
  - [[#pdf-tools][pdf-tools]]
  - [[#pdf-view-pagemark][pdf-view-pagemark]]
  - [[#elfeed][elfeed]]
  - [[#efleed-org][efleed-org]]
  - [[#nov][nov]]
  - [[#nov-xwidget][nov-xwidget]]
  - [[#darkroom][darkroom]]
  - [[#markdown-mode][markdown-mode]]
- [[#tools][tools]]
  - [[#xwidget-and-browser][xwidget and browser]]
  - [[#eaf][eaf]]
  - [[#holo-layer][holo-layer]]
  - [[#app-launcher][app-launcher]]
  - [[#gif-screencast][gif-screencast]]
  - [[#ai-related][ai related]]
  - [[#webjump][webjump]]
  - [[#scripts][scripts]]
  - [[#video-and-music][video and music]]
  - [[#esup][esup]]
- [[#use-single-file-to-load-configs][use single file to load configs]]
  - [[#provide][provide]]
  - [[#load-init-configel][load init-config.el]]
- [[#quick-edit-and-minimal-file][quick-edit and minimal-file]]
  - [[#init-quick-edit][init-quick-edit]]
  - [[#init-minimal][init-minimal]]

* Startup config
** UI speed up
#+NAME: ui-speed-up
#+begin_src elisp :tangle ~/.emacs.d/early-init.el
;; -*- lexical-binding: t; -*-
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.5) ;;defer gc futher back
;; Package initialize occurs automatically, before `user-init-file' is
;; loaded, but after `early-init-file'. We handle package
;; initialization, so we must prevent Emacs from doing it early!
(setq package-enable-at-startup nil)

;; Inhibit resizing frame
(setq frame-inhibit-implied-resize t)
;; disable warning
(setq byte-compile-warnings nil)
;; no title bar
;; (add-to-list 'default-frame-alist '(undecorated . t))
;; Faster to disable these here (before they've been initialized)
;; (push '(alpha-background . 85) default-frame-alist)
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
;; (push '(undecorated . t) default-frame-alist)
(setq initial-major-mode 'fundamental-mode ;; 默认用最简单的模式
      package--init-file-ensured t
      inhibit-startup-message t             ; 关闭启动 Emacs 时的欢迎界面
      )

;; speed font
;; (add-to-list 'default-frame-alist '(font . "Maple Mono SC NF"))
#+end_src
** basic modes
#+NAME: basic-modes
#+begin_src elisp
;; -*- lexical-binding: t; -*-
;; basic modes
(setq use-short-answers t)
(setq confirm-kill-emacs 'y-or-n-p)
(setq ring-bell-function 'ignore)       ;关闭烦人的出错时的提示声
(set-default-coding-systems 'utf-8)
(setq-default indent-tabs-mode nil)

(setq-default tab-width 4)
;; 平滑地进行半屏滚动，避免滚动后recenter操作
(setq scroll-step 1
      scroll-conservatively 10000)
(setq completions-detailed t) ;;useful in emacs 28
(setq use-dialog-box nil)               ;never pop dialog
(setq mouse-yank-at-point t)            ;粘贴于光标处,而不是鼠标指针处

;; (setq frame-resize-pixelwise t) ;设置缩放的模式,避免Mac平台最大化窗口以后右边和下边有空隙
;; (set-frame-parameter nil 'fullscreen 'maximized)
#+end_src
** load-path
#+NAME: load-path
#+begin_src elisp
(add-to-list 'load-path (expand-file-name "lib/borg" user-emacs-directory))
(require 'borg)
(setq borg-rewrite-urls-alist
      '(("git@github.com:" . "https://github.com/")
        ("git@gitlab.com:" . "https://gitlab.com/")))
(borg-initialize)
#+end_src
** drop
The following content is not enabled yet, because I want to minimize unnecessary settings as much as possible
#+begin_src elisp :tangle no
;; Restore emacs session.
(setq initial-buffer-choice t)
(run-with-timer 1 nil #'(lambda () (bury-buffer)))
;; 增加IO性能
(setq process-adaptive-read-buffering nil)
(setq read-process-output-max (* 1024 1024))

(transient-mark-mode 1)                 ;标记高亮
(global-subword-mode 1)                 ;Word移动支持 FooBar 的格式
(setq initial-scratch-message "") ;关闭启动空白buffer, 这个buffer会干扰session恢复
(setq-default comment-style 'indent)    ;设定自动缩进的注释风格
(setq default-major-mode 'text-mode)    ;设置默认地主模式为TEXT模式
(setq split-width-threshold nil)        ;分屏的时候使用上下分屏
(setq inhibit-compacting-font-caches t) ;使用字体缓存，避免卡顿
(setq confirm-kill-processes nil)       ;退出自动杀掉进程
(setq async-bytecomp-allowed-packages nil) ;避免magit报错
(setq profiler-report-cpu-line-format ;让 profiler-report 第一列宽一点
      '((100 left)
        (24 right ((19 right)
                   (5 right)))))
(setq profiler-report-memory-line-format
      '((100 left)
        (19 right ((14 right profiler-format-number)
                   (5 right)))))

;; (add-hook 'find-file-hook 'highlight-parentheses-mode t) ;增强的括号高亮
(setq ad-redefinition-action 'accept)   ;不要烦人的 redefine warning
#+end_src
** set vars
I use the following file paths to manage all the files in Nowisemacs:
#+begin_example
emacs
├── 01-orgmode
│   ├── org-remark
│   └── xnotes
├── 02-binary-files
│   ├── 01-pictures
│   ├── 02-searchable
│   ├── 03-stardicts
│   ├── 04-org-imagine
│   └── 10-report-backup
├── 03-bibliography
├── 04-beancount
├── 05-excalidraw
├── 06-anki
├── 07-pyim
│   └── dcache
├── 08-keys
└── 09-scripts
#+end_example
1. All files and folders except =02-binary-files= are managed under git control, and =02-binary-file= is managed under =rsync= or =restic=.
2. =01-orgmode= stores .org files, where =org-remark= is used to store remark notes, =xnote= is the default directory of =Denote= .
3. =02-binary-files=, as its name, storing binary-fils. For example, =02-searchable= is used store the PDF of the literature
   and daily MS Office files, the meaning of searchable means that all files under this folder maybe searched or
   modified latter, and they should have nice naming specifications for convenience search.

#+begin_src elisp
(defvar nowis-config-file (expand-file-name "init.org" user-emacs-directory))
(defvar nowis-config-useful-tools (expand-file-name "useful-tools/" user-emacs-directory))
(defvar nowis-doc-emacs-dir (file-truename "~/Documents/emacs/"))
(defvar nowis-gtd-dir (concat nowis-doc-emacs-dir "01-orgmode/xnotes/gtd"))
(defvar nowis-bib-dir (concat nowis-doc-emacs-dir "03-bibliography/"))
(defvar nowis-bib-pdf-dir (concat nowis-doc-emacs-dir "02-binary-files/02-searchable/01-papers-markable/"))
#+end_src
* Package Management
** setup
#+NAME: setup
#+begin_src elisp
(require 'setup)

(setup-define :defer
  (lambda (features)
    `(run-with-idle-timer 2 nil
                          (lambda ()
                            ,features)))
  :documentation "Delay loading the feature until a certain amount of idle time has passed."
  :repeatable t)

(setup-define :load-after
  (lambda (features &rest body)
    (let ((body `(progn
                   (require ',(setup-get 'feature))
                   ,@body)))
      (dolist (feature (if (listp features)
                           (nreverse features)
                         (list features)))
        (setq body `(with-eval-after-load ',feature ,body)))
      body))
  :documentation "Load the current feature after FEATURES."
  :indent 1)

(setup-define :if-system
  (lambda (systemtype)
    `(unless (eq system-type ,systemtype)
       ,(setup-quit)))
  :documentation "If SYSTEMTYPE is not the current systemtype, stop evaluating form.")

(setup-define :autoload
  (lambda (func)
    (let ((fn (if (memq (car-safe func) '(quote function))
                  (cadr func)
                func)))
      `(unless (fboundp (quote ,fn))
         (autoload (function ,fn) ,(symbol-name (setup-get 'feature)) nil t))))
  :documentation "Autoload COMMAND if not already bound."
  :repeatable t
  :signature '(FUNC ...))

(setup-define :mtime
  (lambda ()
    (defvar start-time (current-time))
    (let ((feature-string (symbol-name (setup-get 'feature)))
          (load-time `(float-time (time-subtract (current-time) start-time))))
      `(progn
         (message (format (concat ,feature-string ":%f") ,load-time))
         (setq start-time (current-time))
         )))
  :documentation "Measures the time from the end of the previous feature to the end of the current feature")

#+end_src
** epkg
I use borg to manage packages, so setup.el is only used to config packages quickly, I write several macros in [[https://github.com/nowislewis/nowisemacs-base.git][nowisemacs-base]]. It should be noticed that if you use only a =init.el= file, all the funcs or macros defined in =init.el= can't pass native comp, so move these things that you defined yourself to a seperate repo(nowisemacs-base) will resolve this problem.
#+begin_src elisp
(setup compat)
;; (setup emacsql)
;; (setup closql)

;; (when (>= emacs-major-version 29)
;;   (setq epkg-database-connector 'sqlite-builtin))
;; (setup epkg)
#+end_src
* gcmh
Enforce a sneaky Garbage Collection strategy to minimize GC interference with user activity.
#+name: gcmh
#+begin_src elisp
(setup gcmh
  (setq gcmh-auto-idle-delay-factor 10
           gcmh-high-cons-threshold (* 16 1024 1024))
  (gcmh-mode 1))
#+end_src
* Keyboard Bindings
I used to be a vim(evil) user, but now I use meow to manage all my keys.
** meow
Maybe I should add a new state.
#+name: meow
#+begin_src elisp
(setup meow
  (require 'meow)
  (setq meow-use-keypad-when-execute-kbd nil
        meow-expand-exclude-mode-list nil
        meow-use-clipboard t
        ;; meow-cursor-type-normal '(bar . 5)
        meow-cursor-type-normal 'box
        meow-cursor-type-insert '(bar . 1)
        meow-replace-state-name-list '((normal . "N")
                                       (motion . "M")
                                       (keypad . "K")
                                       (insert . "I")
                                       (beacon . "B"))
        meow-use-enhanced-selection-effect t
        meow-cheatsheet-layout meow-cheatsheet-layout-qwerty
        meow-keypad-start-keys '((?c . ?c)
                                 (?x . ?x))
        meow-char-thing-table '((?\( . round)
                                (?\) . round)
                                (?\[ . square)
                                (?\] . square)
                                (?\{ . curly)
                                (?\} . curly)
                                (?\" . string)
                                (?w . symbol)
                                ;; (?w . window)
                                (?b . buffer)
                                (?p . paragraph)
                                (?l . line)
                                (?d . defun)
                                (?s . sentence))
        )
  ;; motion keys
  (meow-motion-overwrite-define-key '("j" . meow-next)
                                    '("k" . meow-prev)
                                    ;; '("h" . meow-left)
                                    ;; '("l" . meow-right)
                                    '("<escape>" . ignore)
                                    '("." . repeat))
  ;; normal keys
  (meow-normal-define-key '("0" . meow-expand-0)
                          '("9" . meow-expand-9)
                          '("8" . meow-expand-8)
                          '("7" . meow-expand-7)
                          '("6" . meow-expand-6)
                          '("5" . meow-expand-5)
                          '("4" . meow-expand-4)
                          '("3" . meow-expand-3)
                          '("2" . meow-expand-2)
                          '("1" . meow-expand-1)

                          '("a" . meow-vim-append)
                          ;; '("A" . meow-append-vim)
                          '("b" . meow-back-word)
                          '("B" . meow-back-symbol)
                          '("c c" . meow-change)
                          '("d" . meow-kill)
                          '("e" . meow-next-word)
                          '("E" . meow-next-symbol)
                          '("f" . meow-find)
                          '("g" . g-extra-commands)
                          '("G" . meow-grab)
                          '("h" . meow-left)
                          '("H" . meow-left-expand)
                          '("i" . meow-insert)
                          ;; '("I" . meow-insert-vim)
                          '("j" . meow-next)
                          '("J" . meow-next-expand)
                          '("k" . meow-prev)
                          '("K" . meow-prev-expand)
                          '("l" . meow-right)
                          '("L" . meow-right-expand)
                          '("m" . consult-register-store)
                          '("M" . meow-block)
                          '("n" . meow-search)
                          '("N" . meow-pop-selection);;

                          '("o" . meow-open-below)
                          '("O" . meow-open-above)
                          '("p" . meow-yank)
                          '("P" . meow-yank-pop);;
                          '("q" . meow-quit)
                          '("Q" . consult-goto-line)
                          '("r" . meow-replace)
                          '("R" . meow-swap-grab)
                          '("s" . meow-line)
                          '("S" . meow-kmacro-lines) ;;
                          '("t" . meow-till)
                          '("u" . meow-undo)
                          '("U" . vundo)
                          '("v v" . meow-visit) ;;
                          '("V" . meow-kmacro-matches) ;;
                          '("w" . meow-mark-word)
                          '("W" . meow-mark-symbol)

                          '("x" . meow-delete)
                          '("X" . meow-backward-delete)
                          '("y" . meow-save)
                          ;; '("Y" . meow-sync-save)
                          '("z a" . hs-toggle-hiding)
                          '("z c" . hs-hide-block)
                          '("z o" . hs-show-block)
                          '("z m" . hs-hide-all)
                          '("z r" . hs-show-all)

                          '("v i" . meow-inner-of-thing)
                          '("v a" . meow-bounds-of-thing)
                          '("v =" . insert-equation)

                          '("-" . negative-argument)
                          '("=" . indent-region)
                          '("[" . meow-beginning-of-thing)
                          '("]" . meow-end-of-thing)
                          '("\\" . quoted-insert)
                          '(";" . meow-expand-1)
                          ;; '(":" . async-shell-command)
                          '("'" . consult-register-load)
                          '("," . meow-reverse)
                          '("." . repeat)

                          '("<escape>" . ignore)
                          '("!" . meow-start-kmacro-or-insert-counter)
                          '("@" . meow-end-or-call-kmacro)
                          '("#" . embark-toggle-highlight)
                          '("^" . meow-join)
                          '("*" . embark-next-symbol)
                          '("/" . consult-line))
  (defun meow-vim-append ()
    "Like vim, move to the end of selection, switch to INSERT state."
    (interactive)
    (if meow--temp-normal
        (progn
          (message "Quit temporary normal mode")
          (meow--switch-state 'motion))
      (if (not (region-active-p))
          (progn
            (when (and meow-use-cursor-position-hack
                       (< (point) (point-max)))
              (forward-char 1))
            (forward-char 1)
            )
        (meow--direction-forward)
        (meow--cancel-selection))
      (meow--switch-state 'insert)))
  (meow-global-mode 1)
  )
#+end_src
** transient and related leader-map
*** transient
#+name: transient
#+begin_src elisp
(setup transient
  (require 'transient)
  (:with-map transient-base-map
    (:bind "<escape>" transient-quit-one)))
#+end_src
*** g in normal mode
#+begin_src elisp
(transient-define-prefix g-extra-commands()
  "Define notes leader-key maps"
  [["Code find"
    ("d" "find-definitions" xref-find-definitions)
    ("D" "find-references" xref-find-references)
    ("i" "find-impl" eglot-find-implementation)
    ;; ("d" "find-definitions" lsp-bridge-find-def)
    ;; ("D" "find-references" lsp-bridge-find-references)
    ;; ("i" "find-impl" lsp-bridge-find-impl)

    ("j" "find-apropos" xref-find-apropos)
    ("o" "find-def-other-window" xref-find-definitions-other-window)
    ]
   ["Code action"
    ("a" "code-actions" eglot-code-actions)
    ("r" "rename" eglot-rename)
    ;; ("a" "code-actions" lsp-bridge-code-action)
    ;; ("r" "rename" lsp-bridge-rename)
    ("f" "format-all-region" format-all-region)
    ("F" "format-all-buffer" format-all-buffer)]
   ["diagnostic"
    ("n" "jump-to-next-diagnostic" flymake-goto-next-error)
    ("p" "jump-to-prev-diagnostic" flymake-goto-prev-error)
    ("l" "list-diagnostics" consult-flymake)
    ;; ("n" "jump-to-next-diagnostic" lsp-bridge-diagnostic-jump-next)
    ;; ("p" "jump-to-prev-diagnostic" lsp-bridge-diagnostic-jump-prev)
    ;; ("l" "list-diagnostics" lsp-bridge-diagnostic-list)
    ]
   ["Navigate"
    ("m" "consult-mark" consult-mark)
    ]
   ["Clue"
    ("w" "clue-copy" clue-copy)
    ("y" "clue-yank" clue-paste)
    ]
   ["citre"
    ;; ("p" "citre-peek" citre-peek)
    ("c" "citre-ace-peek" citre-ace-peek)
    ]
   ])
#+end_src
*** find-file
#+begin_src elisp
(transient-define-prefix file-leader-map()
  "Define leader-key map for file-related functions"
  [["config"
    ("p" "personal emacs config" (lambda()
                                   (interactive)
                                   (find-file nowis-config-file)))
    ("e" "emacs documents" (lambda()
                             (interactive)
                             (find-file nowis-doc-emacs-dir)))
    ("d" "dot files" (lambda()
                       (interactive)
                       (find-file "~/dotfiles")))
    ]
   ["history"
    ("r" "recent file" consult-recent-file)]])
#+end_src
*** lewis
#+begin_src elisp
(transient-define-prefix lewis-leader-map()
  "Define leader-key map for special functions"
  [["Citre"
    ("c a" "ace-peek" citre-ace-peek)
    ("c j" "jump" citre-jump)
    ("c p" "peek" citre-peek)
    ("c J" "jump-back" citre-jump-back)
    ("c u" "update-this-tags-file" citre-update-this-tags-file)
    ("c r" "peek-restore" citre-peek-restore)
    ("c s" "peek-save-session" citre-peek-save-session)
    ("c l" "peek-load-session" citre-peek-load-session)]
   ["Imenu"
    ("l" "Imenu list smart toggle" imenu-list-smart-toggle)]
   ;; ("L" "Boxy imenu" boxy-imenu)]
   ;; org-download
   ["Org download"
    ("d" "Screenshot" org-download-screenshot)]
   ["Translate"
    ("t" "toggle english helper" lsp-bridge-toggle-sdcv-helper)
    ("i" "immersive translate buffer" immersive-translate-buffer)
    ]])
#+end_src
*** buffer
#+begin_src elisp
(transient-define-prefix buffer-leader-map()
  "Define leader-key map for buffer functions"
  [["Buffer"
    ("b" "consult-buffer" consult-buffer) ;; work with C-x b
    ("k" "kill-current-buffer" kill-current-buffer)
    ("l" "meow-last-buffer" meow-last-buffer)
    ("n" "next-buffer" next-buffer)
    ("p" "previous-buffer" previous-buffer)
    ("r" "revert-buffer" revert-buffer)]
   ["Bookmark"
    ("j" "bookmark-jump" bookmark-jump)
    ("m" "bookmark-set" bookmark-set)
    ("M" "bookmark-delete" bookmark-delete)]])
#+end_src
*** notes
#+begin_src elisp
(transient-define-prefix notes-leader-map()
  "Define leader-key map for notes functions"
  [["Roam"
    ("r f" "denote-open-or-create" denote-open-or-create-with-subdirectory)
    ("r p" "find-papers" project-find-papers-dir-files)
    ("r s" "find-all-searchable" project-find-searchable-dir-files)
    ;; ("rc" "consult-notes" consult-notes)
    ("r g" "project-find-gtd-dir-files" project-find-gtd-dir-files)
    ("r z" "ls zettel" my/zettel-signature-buffer)
    ]
   ["bibtex"
    ("e" "ebib" ebib)
    ("b" "citar-open" citar-open)
    ]
   ;; ["serch engine"
   ;;  ("x" "xeft" xeft)
   ;;  ]
   ["org-noter"
    ("n" "org-noter" org-noter)]
   ["org fc"
    ("f r" "review-all" org-fc-review-all)
    ("f u" "update card" org-fc-update)
    ("f n" "normal init" org-fc-type-normal-init)
    ("f d" "double init" org-fc-type-double-init)
    ("f t" "text input" org-fc-type-text-input-init)
    ("f c" "cloze init" org-fc-type-cloze-init)
    ]
   ])
#+end_src
*** search
#+begin_src elisp
(transient-define-prefix search-leader-map()
  "Define leader-key map for search functions"
  [
   ;; ["blink-search"
   ;;  ("b" "blink-search" blink-search)]
   ["grep"
    ("d" "grep-in-current" consult-ripgrep)
    ("D" "grep-other-dir" lewis/ripgrep-search-other-dir)
    ("g" "rg" rg)]
   ["find"
    ("f" "find-in-current" consult-find)
    ("F" "find-other-dir" lewis/find-file-other-dir)]
   ["built-in enhance"
    ("h" "history" consult-history)
    ("i" "imenu" consult-imenu)
    ("l" "keep-lines" consult-keep-lines)
    ("s" "line" consult-line)]
   ["web search"
    ("w" "webjump" webjump)]
   ])
#+end_src
*** apps
#+begin_src elisp
(transient-define-prefix apps-leader-map()
  "Define leader-key map for apps functions"
  [["agenda"
    ("a" "org-agenda" org-agenda)
    ("c" "org-capture" org-capture)]
   ["gif-screencast"
    ("g s" "start-or-stop" gif-screencast-start-or-stop)
    ("g p" "toggle-pause" gif-screencast-toggle-pause)
    ]
   ["vterm"
    ("b" "toggle-backward" vterm-toggle-backward)
    ("i" "toggle-insert-cd" double-vterm-toggle-insert-cd)
    ]
   ["mpvi"
    ("mo" "open" mpvi-open)
    ("ms" "seek" mpvi-seek)
    ("mi" "insert" mpvi-insert)
    ("ma" "emms-add" mpvi-emms-add)]
   ["others"
    ("t" "org-pomodoro" org-pomodoro)
    ("l" "app-launcher-run-app" app-launcher-run-app)
    ("e" "elfeed" my-elfeed)
    ("r" "restart emacs" restart-emacs)
    ]
   ])
#+end_src
*** gtd
#+begin_src elisp
(transient-define-prefix org-gtd-leader-map()
  "Define leader-key map for org-gtd functions"
  [("c" "capture" org-gtd-capture)
    ("e" "engage" org-gtd-engage)
    ("p" "process inbox" org-gtd-process-inbox)
    ("o" "organize" org-gtd-organize)])
#+end_src
*** ui
#+begin_src elisp
(transient-define-prefix ui-leader-map()
  "Define leader-key map for ui functions"
  [("v" "variable-pitch" variable-pitch-mode)
   ("d" "darkroom" darkroom-mode)
    ])

#+end_src
** meow leader keybindings
#+name: meow-leader-keys
#+begin_src elisp
;; default
(meow-leader-define-key
 ;; SPC j/k will run the original command in MOTION state.
 '("j" . "H-j")
 '("k" . "H-k")
 ;; '("h" . "H-h")
 ;; '("l" . "H-l")
 '("." . "H-.")
 ;; Use SPC (0-9) for digit arguments.
 '("1" . meow-digit-argument)
 '("2" . meow-digit-argument)
 '("3" . meow-digit-argument)
 '("4" . meow-digit-argument)
 '("5" . meow-digit-argument)
 '("6" . meow-digit-argument)
 '("7" . meow-digit-argument)
 '("8" . meow-digit-argument)
 '("9" . meow-digit-argument)
 '("0" . meow-digit-argument)
 '("/" . meow-keypad-describe-key)
 '("?" . meow-cheatsheet))

;; buffer
(meow-leader-define-key
 '("b" . buffer-leader-map)
;; lewisliu
 '("e" . lewis-leader-map)
;; search
 '("s" . search-leader-map)
;; apps
 '("a" . apps-leader-map)
;; file
 '("f" . file-leader-map)
;; notes
 '("n" . notes-leader-map)
 ;;w workspace
 '("TAB" . tabspaces-leader-map)
 ;; org gtd
 '("d" . org-gtd-leader-map)
 ;; ui
 '("u" . ui-leader-map)
 )
#+END_SRC
** which-key
#+name: which-key
#+begin_src elisp
(setup which-key
  (setq which-key-idle-delay 0.1)
  (:defer
  (which-key-mode))
  )
#+end_src
** electric
#+begin_src elisp
(setup elec-pair
  (electric-pair-mode))
#+end_src
* Package Library
** dash
#+begin_src elisp
(setup dash)
#+end_src
** s
#+begin_src elisp
(setup s)
#+end_src
** f
#+begin_src elisp
(setup f)
#+end_src
* UI
** font
#+name: font
#+begin_src elisp
(defun font-installed-p (font-name)
  "Check if font with FONT-NAME is available."
  (find-font (font-spec :name font-name)))

;; font size
(if (eq system-type 'darwin)
    (defvar lewis-font-size 140)
  (defvar lewis-font-size 150))

;; fixed font
(setq lewis-fixed-font (cl-loop for font in '(
                                              "Maple Mono SC NF"
                                              ;; "InconsolataGo QiHei NF"
                                              ;; "yaheiInconsolata"
                                              "JetBrainsMono Nerd Font"
                                              "JetBrains Mono"
                                              "Sarasa Mono SC Nerd"
                                              "Monaco"
                                              "Consolas"
                                              )
                                when (font-installed-p font)
                                return font))
;; variable font
(setq lewis-variable-font (cl-loop for font in '(
                                                 "Source Han Sans SC VF"
                                                 "Noto Sans CJK SC"
                                                 "Arial"
                                                 "Helvetica"
                                                 "Times New Roman")
                                   when (font-installed-p font)
                                   return font))

;; chinese font
(setq lewis-chinese-font (cl-loop for font in '("Maple Mono SC NF"
                                                "Sarasa Mono SC Nerd"
                                                "Microsoft Yahei")
                                  when (font-installed-p font)
                                  return font))

;; symbol font
(setq lewis-symbol-font (cl-loop for font in '("Symbola"
                                               "Symbol")
                                 when (font-installed-p font)
                                 return font))

;; mayby I should remove all this font-seting and use only default font
(defun nowis-setup-fonts()
  "Setup fonts."
  (when (display-graphic-p)
    ;; Set default font
    (if lewis-fixed-font
        (progn
          (set-face-attribute 'default nil :family lewis-fixed-font :height lewis-font-size)
          (set-face-attribute 'fixed-pitch nil :family lewis-fixed-font :height 1.0)
          ))

    ;; variable-pitch
    (if lewis-variable-font
        (set-face-attribute 'variable-pitch nil :family lewis-variable-font :height 1.0))

    ;; Specify font for all unicode characters
    (if lewis-symbol-font
        (set-fontset-font t 'unicode lewis-symbol-font nil 'prepend))

    ;; Specify font for Chinese characters
    (if lewis-chinese-font
        (set-fontset-font t '(#x4e00 . #x9fff) lewis-chinese-font))
    )
  )

(nowis-setup-fonts)
#+end_src
** variable-pitch
#+begin_src elisp
(defun dynamic-change-line-spacing( &optional ARG)
  (if line-spacing (setq-local line-spacing nil) (setq-local line-spacing 0.3)))
(advice-add 'variable-pitch-mode :after #'dynamic-change-line-spacing)
#+end_src
** Theme
*** ef-themes
#+name: themes
#+begin_src elisp
(setup ef-themes)
(load-theme 'ef-winter t)
#+end_src
** line number
#+name: line-number
#+begin_src elisp
;; line number
;; only enable line number in some modes, borrowed from lazycat-emacs
(setq display-line-numbers-width-start t)
(setq line-number-display-limit large-file-warning-threshold)
(setq line-number-display-limit-width 1000)

(dolist (hook (list
               'prog-mode-hook
               ;;'org-mode-hook
               ))
  (add-hook hook (lambda () (display-line-numbers-mode))))
#+end_src
** nerd-icons
#+begin_src elisp
(setup nerd-icons)
#+end_src
** nerd-icons-completion
#+begin_src elisp
(setup nerd-icons-completion
  (:hook-into vertico-mode marginalia-mode))
#+end_src
** rainbow-delimiters
rainbow-delimiters is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth.
#+begin_src elisp
(setup rainbow-delimiters
  (:hook-into prog-mode))
#+end_src
** diff-hl
diff-hl-mode highlights uncommitted changes on the left side of the window (area also known as the "gutter"), allows you to jump between and revert them selectively.
#+begin_src elisp
(setup diff-hl
  (:hook-into prog-mode)
  (:when-loaded
    (diff-hl-margin-mode)))
#+end_src
** emacs-dashboard
#+begin_src elisp
(setup dashboard
  (setq dashboard-items '((recents . 5)
                          (bookmarks . 5))
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-center-content t
        dashboard-startup-banner (concat nowis-config-useful-tools "banner.txt")
        dashboard-set-init-info t)
  (dashboard-setup-startup-hook)
  )
#+end_src
** doom-modeline
#+begin_src elisp
(setup shrink-path)

(setup doom-modeline
  (setq doom-modeline-height 1
        ;; doom-modeline-hud t
        doom-modeline-unicode-fallback t)
  (:when-loaded
    (custom-set-faces
     '(mode-line ((t (:height 0.9))))
     '(mode-line-active ((t (:height 0.9)))) ; For 29+
     '(mode-line-inactive ((t (:height 0.9))))) ; xs
     )
  (:hook-into after-init))
#+end_src
** hl-todo
#+begin_src elisp
(setup hl-todo
  (global-hl-todo-mode))
#+end_src
** pulsar
#+begin_src elisp
(setup pulsar
  (pulsar-global-mode 1)
  (:when-loaded
  (add-hook 'pulsar-pulse-functions 'ace-window)))
#+end_src
** show-paren-mode
#+begin_src elisp
(setup paren
  (setq show-paren-context-when-offscreen 'child-frame))
#+end_src
* General Configuration
** simple
#+name: simple
#+begin_src elisp
(setup simple
  ;; show line/column/filesize in modeline
  (setq line-number-mode t
        column-number-mode t
        size-indication-mode t
        kill-do-not-save-duplicates t
        shell-command-prompt-show-cwd t
        what-cursor-show-names t)
  (global-visual-line-mode)
  )
#+end_src
** general builtin modes
#+name: general-builtin-modes
#+begin_src elisp
(setup save-place
  (:defer
   (save-place-mode))
  )

(setup autorevert
  (setq global-auto-revert-non-file-buffers t)
  (:defer
   (global-auto-revert-mode t)))                  ; 当另一程序修改了文件时，让 Emacs 及时刷新 Buffer
(setup hl-line
  (global-hl-line-mode))
(setup frame
  (blink-cursor-mode -1)                  ;指针不闪动
  )

(setup pixel-scroll
  ;; 最近发现和 pdf-view-mode 工作不协调
  (when (>= emacs-major-version 29)
    (pixel-scroll-precision-mode t)))
(setup repeat
  (repeat-mode))
#+end_src
** backup
*** super-save
#+begin_src elisp
(setq make-backup-files nil)
(setq auto-save-default nil)

(setup super-save
  (setq super-save-auto-save-when-idle t)
   (super-save-mode 1))
#+end_src
*** savehist
#+begin_src elisp
(setup savehist
  (setq history-length 10000
        history-delete-duplicates t
        savehist-save-minibuffer-history t)
  (savehist-mode))
#+end_src
** no-littering
#+begin_src elisp
(setup no-littering
  ;; (setq no-littering-var-directory (expand-file-name (concat user-emacs-directory "var/"))
  ;;       no-littering-etc-directory (expand-file-name (concat user-emacs-directory "etc/")))
   (require 'no-littering)
  )
#+end_src
** recentf
#+begin_src elisp
(setup recentf
   (setq recentf-max-saved-items 1000
         recentf-exclude `("/tmp/" "/ssh:" ,(concat user-emacs-directory "lib/.*-autoloads\\.el\\'")))
   (add-to-list 'recentf-exclude no-littering-var-directory)
   (add-to-list 'recentf-exclude no-littering-etc-directory)
   (recentf-mode)
  )
#+end_src
** 自动换行
#+begin_src elisp
(setq fill-column 100)          ;默认显示 100列就换行
(setq word-wrap t)
(setq word-wrap-by-category t)
;; (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src
** so-long
解决长行卡死问题
#+begin_src elisp
(setup so-long
  (:defer
   (global-so-long-mode 1)
   ))
#+end_src
** TRAMP
#+begin_src elisp
(setq tramp-default-method "ssh")
#+end_src
** Automatically clean whitespace
#+begin_src elisp
(setup ws-butler
  (:hook-into text-mode prog-mode))
#+end_src
** exec-path-from-shell
可以优化速度, 建议看一下官网的一篇文章
#+name: exec-path-from-shell
#+begin_src elisp
(setup exec-path-from-shell
  (:defer
   (when (memq window-system '(mac ns x))
     (exec-path-from-shell-initialize)))
  )
#+end_src
** Undo
*** vundo for undo history
#+name: vundo
#+begin_src elisp
(setup vundo
  (:bind "l" vundo-forward
         "h" vundo-backward
         "j" vundo-next
         "k" vundo-previous))
#+end_src
* Search
** isearch
#+begin_src elisp
(setup isearch
  (setq isearch-lazy-count t
           ;; lazy-highlight-cleanup nil
           )
  (:bind [remap isearch-delete-char] isearch-del-char))
#+end_src
** Consult Commands
*** consult
#+name: consult
#+begin_src elisp
(setup consult
  (setq register-preview-delay 0.1
           register-preview-function #'consult-register-format
           xref-show-xrefs-function #'consult-xref
           xref-show-definitions-function #'consult-xref
           consult-project-root-function #'(lambda ()
                                           (when-let (project (project-current))
                                             (car (project-roots project)))))
  (:with-map minibuffer-local-map
    (:bind "C-r" consult-history)))
#+end_src
*** search other cwd
#+begin_src elisp
(defun lewis/ripgrep-search-other-dir()
  (interactive)
  (let ((current-prefix-arg '(-1)))
    (call-interactively 'consult-ripgrep)))

(defun lewis/find-file-other-dir()
  (interactive)
  (let ((current-prefix-arg '(-1)))
    (call-interactively 'consult-find)))
#+end_src
** rg.el
#+begin_src elisp
(setup rg)
#+end_src
* 补全
** Completions with Vertico
#+name: vertico
#+begin_src elisp
(setq vertico-cycle t)
(setup vertico
  (:with-map vertico-map
    (:bind [backspace] vertico-directory-delete-char))
  (vertico-mode))
#+end_src
** Orderless and pinyinlib
#+name: orderless
#+begin_src elisp
(setup orderless
  (setq completion-styles '(orderless)
           completion-category-defaults nil
           completion-category-overrides '((file (styles . (partial-completion)))))
  (:when-loaded
    (require 'pinyinlib)
    (defun completion--regex-pinyin (str)
      (orderless-regexp (pinyinlib-build-regexp-string str)))
    (add-to-list 'orderless-matching-styles 'completion--regex-pinyin)
    ))
#+end_src
** Marginalia
#+begin_src elisp
(setup marginalia
  (setq marginalia-annotators '(marginalia-annotators-heavy
                                   marginalia-annotators-light
                                   nil))
  (:hook-into after-init))
#+end_src
** embark
should be check after reading the embark.el manual
#+begin_src elisp
(setup embark-consult
  (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode))

(setup embark
  (:also-load embark-consult)
  (:autoload embark-toggle-highlight)
  (setq prefix-help-command #'embark-prefix-help-command)
  (:global "C-S-a" embark-act))

(setup wgrep)
#+end_src
** yasnippet
#+begin_src elisp
(setup yasnippet
  (setq yas-snippet-dirs (list (concat nowis-config-useful-tools "snippets")))
  (yas-global-mode)
  )
#+end_src
** tempel
#+begin_src elisp
(setup tempel
  (setq tempel-path "~/.emacs.d/useful-tools/tempel-snippets"
           tempel-trigger-prefix "<")
  (:global "M-*" tempel-insert
           "M-+"  tempel-complete)
  (:with-map tempel-map
    (:bind "M-]"  tempel-next
           "M-["  tempel-previous)))
;; Setup completion at point
;; (defun tempel-setup-capf ()
;;   (setq-local completion-at-point-functions
;;               (cons #'tempel-completed
;;                     completion-at-point-functions)))
;; (add-hook 'prog-mode-hook 'tempel-setup-capf)
;; (add-hook 'text-mode-hook 'tempel-setup-capf)
#+end_src
* Window Management
** winner-mode
#+name: winner-mode
#+begin_src elisp
(setup winner
  (:defer
  (winner-mode t))
  )
#+end_src
** popper
Popper is a minor-mode to tame the flood of ephemeral windows Emacs produces, while still keeping them within arm’s reach.
#+begin_src elisp
(setup popper
  (setq popper-reference-buffers '("\\*Messages\\*"
                                      "Output\\*$"
                                      "\\*Async Shell Command\\*"
                                      "Go-Translate"
                                      help-mode
                                      helpful-mode
                                      compilation-mode
                                      youdao-dictionary-mode)
           popper-window-height  (lambda (win)
                                   (fit-window-to-buffer
                                    win
                                    (floor (frame-height) 2)))
           )
  (:global "M-`" popper-toggle-latest ;; shadown tmm-menubar
           "C-M-`" popper-toggle-type)
  (popper-mode +1)
  (popper-echo-mode +1))
#+end_src
** Move
*** avy
Jump anywhere in the world
#+begin_src elisp
(setup avy
  (:global "M-j" avy-goto-word-1))
#+end_src
*** bookmark
#+begin_src elisp
(setq bookmark-default-file (concat nowis-doc-emacs-dir "bookmarks"))
#+end_src
*** windmove
#+begin_src elisp
(setup windmove
  (transient-define-prefix windmove-transient-keybindings()
    "Define windmove maps"
    [[("h" "left" windmove-left :transient t)
      ("H" "swap-left" windmove-swap-states-left :transient t)]
     [("j" "down" windmove-down :transient t)
      ("J" "swap-down" windmove-swap-states-down :transient t)]
     [("k" "up" windmove-up :transient t)
      ("K" "swap-up" windmove-swap-states-up :transient t)]
     [("l" "right" windmove-right :transient t)
      ("L" "swap-right" windmove-swap-states-right :transient t)]
     ])
  (:global "C-x O" #'windmove-transient-keybindings)
  )

#+end_src
*** ace-window
#+begin_src elisp
(setup ace-window
  (:global "M-o" ace-window))
(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
#+end_src
* ibuffer
** ibuffer
#+name: ibuffer
#+begin_src elisp
(setup ibuffer
  (:global [remap list-buffers] #'ibuffer))
#+end_src
* Input
** posframe
#+begin_src elisp
(setup posframe)
#+end_src
** pyim
#+begin_src elisp :tangle no
(setup xr)
(setup pyim
  (setq pyim-cloudim 'baidu
           pyim-punctuation-translate-p '(no yes auto)
           pyim-page-tooltip 'posframe
           pyim-page-length 5
           pyim-dcache-backend 'pyim-dregcache
           pyim-dcache-directory (concat nowis-doc-emacs-dir "01-binary-files/pyim/dcache/")
           )
  (:when-loaded
    (require 'popup nil t)
    (require 'pyim-dregcache)
    (require 'pyim-cregexp-utils)
    (require 'pyim-cstring-utils)
    (set-default 'pyim-punctuation-half-width-functions
                 '(pyim-probe-punctuation-line-beginning pyim-probe-punctuation-after-punctuation))
    ;; (pyim-default-scheme 'xiaohe-shuangpin)
    (pyim-default-scheme 'quanpin)
    (pyim-isearch-mode 1)

    (defalias 'pyim-probe-meow-normal-mode #'(lambda nil
                                               (meow-normal-mode-p)))
    (set-default 'pyim-english-input-switch-functions '(pyim-probe-auto-english
                                                        pyim-probe-isearch-mode
                                                        pyim-probe-program-mode
                                                        pyim-probe-org-structure-template
                                                        pyim-probe-org-latex-mode
                                                        pyim-probe-meow-normal-mode))
    (defalias 'my-orderless-regexp
      #'(lambda
          (orig_func component)
          (let
              ((result
                (funcall orig_func component)))
            (pyim-cregexp-build result))))
    (advice-add 'orderless-regexp :around #'my-orderless-regexp)
    )
   (require 'pyim)
  ;; (setq default-input-method "pyim")
  )
#+end_src
** rime
#+begin_src elisp
(setq default-input-method "rime")
(with-eval-after-load 'rime
(setq rime-disable-predicates '(meow-normal-mode-p
                                   meow-motion-mode-p
                                   meow-keypad-mode-p
                                   rime-predicate-prog-in-code-p
                                   rime-predicate-punctuation-line-begin-p ;;在行首要输入符号时
                                   rime-predicate-after-alphabet-char-p ;;在英文字符串之后（必须为以字母开头的英文字符串）
                                   rime-predicate-current-input-punctuation-p ;;当要输入的是符号时
                                   ;; rime-predicate-after-ascii-char-p ;;任意英文字符后 ,enable this to use with <s
                                   rime-predicate-current-uppercase-letter-p ;; 将要输入的为大写字母时
                                   rime-predicate-space-after-cc-p ;;在中文字符且有空格之后
                                   )
         rime-show-candidate 'posframe
         rime-posframe-properties (list :internal-border-width 1
                                        :font lewis-fixed-font
                                        )
         rime-user-data-dir "~/Documents/emacs/02-binary-files/05-input-rime/"
         rime-inline-ascii-trigger 'shift-r
         ))
(when (eq system-type 'darwin)
  (setq
   ;; rime-emacs-module-header-root "/Applications/Emacs.app/Contents/Resources/include/" ;; use build-emacs
   rime-emacs-module-header-root "/opt/homebrew/opt/emacs-plus@29/include" ;;use emacs-plus
   rime-librime-root "~/Downloads/librime/dist"
   ))
#+end_src
* File and Browsing
** file browsing
*** dired
#+begin_src elisp
(setup dired
  (setq dired-dwim-target t)
  (:hook dired-hide-details-mode
         ;; dired-omit-mode
         ))
#+end_src
*** dirvish
Dirvish is a minimalistic file manager based on Dired. It's fast
#+begin_src elisp :tangle no
(setup dirvish
  (setq dirvish-attributes '(subtree-state nerd-icons)
        dirvish-side-width 40)
  (:bind "TAB" dirvish-toggle-subtree)
  (add-hook 'dired-load-hook #'dirvish-override-dired-mode)
  (:when-loaded
    (dirvish-side-follow-mode)))
#+end_src
*** dired-rsync
#+begin_src elisp
(setup dired-rsync)
#+end_src
*** dired-preview
#+begin_src elisp
(setup dired-preview
  (setq dired-preview-delay 0.3)
  (add-hook 'dired-mode-hook #'dired-preview-mode)
  )
#+end_src
*** nerd-icons-dired
#+begin_src elisp
(setup nerd-icons-dired)
(add-hook 'dired-mode-hook #'nerd-icons-dired-mode)
#+end_src
** structure browsing
*** imenu-list
#+begin_src elisp
(setup imenu-list
  (:autoload himenu-list-smart-toggle)
  (setq imenu-list-focus-after-activation t
           imenu-list-auto-resize t
           imenu-list-position 'left
           imenu-list-auto-update nil
           ))
#+end_src
*** maple-explorer
#+begin_src elisp
(setup maple-explorer
  (:autoload maple-explorer-file maple-explorer-buffer maple-explorer-imenu maple-explorer-recentf)
  (setq maple-explorer-file-display-alist '((side . left) (slot . -1))
        maple-explorer-imenu-display-alist '((side . left) (slot . -1))))
#+end_src
** tab-line and tab-bar
#+name: tab-bar
#+begin_src elisp
(setup tab-bar
  (setq tab-bar-new-button-show nil
           tab-bar-close-button-show nil)
  (:when-loaded
    (defun tab-bar-select-tab-1st()
      (interactive)
      (tab-bar-select-tab 1))
    (defun tab-bar-select-tab-2nd()
      (interactive)
      (tab-bar-select-tab 2))
    (defun tab-bar-select-tab-3rd()
      (interactive)
      (tab-bar-select-tab 3))
    (defun tab-bar-select-tab-4th()
      (interactive)
      (tab-bar-select-tab 4))
    (defun tab-bar-select-tab-5th()
      (interactive)
      (tab-bar-select-tab 5))
    (defun tab-bar-select-tab-6th()
      (interactive)
      (tab-bar-select-tab 6))
    (defun tab-bar-select-tab-7th()
      (interactive)
      (tab-bar-select-tab 7))
    )
  )
(setup tab-line
  (setq tab-line-new-button-show nil
           tab-line-close-button-show nil)
  ;; (:defer (global-tab-line-mode))
  )
#+end_src
** tabspaces
#+name: tabspaces
#+begin_src elisp
(setup tabspaces
  (setq tabspaces-use-filtered-buffers-as-default t
        tabspaces-keymap-prefix nil)
  (:defer
   (tabspaces-mode)
   )
  (:when-loaded
    (transient-define-prefix tabspaces-leader-map()
      "Define tabspaces leader-key maps"
      [["Create or close"
        ("s" "tabspaces-switch-or-create-workspace" tabspaces-switch-or-create-workspace)
        ("b" "tabspaces-switch-to-buffer" tabspaces-switch-to-buffer)
        ("d" "tabspaces-close-workspace" tabspaces-close-workspace)
        ("k" "tabspaces-remove-selected-buffer" tabspaces-remove-selected-buffer)
        ("K" "tabspaces-kill-buffers-close-workspace" tabspaces-kill-buffers-close-workspace)
        ("o" "tabspaces-open-or-create-project-and-workspace" tabspaces-open-or-create-project-and-workspace)
        ("R" "tabspaces-remove-selected-buffer" tabspaces-remove-selected-buffer)
        ("r" "tab-bar-rename-tab-by-name" tab-bar-rename-tab-by-name)
        ("t" "tabspaces-switch-buffer-and-tab" tabspaces-switch-buffer-and-tab)
        ]
       ["Switch tab bar"
        ("n" "tab-bar-switch-to-next-tab" tab-bar-switch-to-next-tab)
        ("p" "tab-bar-switch-to-prev-tab" tab-bar-switch-to-prev-tab)
        ("l" "tab-bar-switch-to-last-tab" tab-bar-switch-to-last-tab)
        ]
       ["Switch tab bar by index"
        ("1" "tab-bar-select-tab-1st" tab-bar-select-tab-1st)
        ("2" "tab-bar-select-tab-2nd" tab-bar-select-tab-2nd)
        ("3" "tab-bar-select-tab-3rd" tab-bar-select-tab-3rd)
        ("4" "tab-bar-select-tab-4th" tab-bar-select-tab-4th)
        ("5" "tab-bar-select-tab-5th" tab-bar-select-tab-5th)
        ("6" "tab-bar-select-tab-6th" tab-bar-select-tab-6th)
        ("7" "tab-bar-select-tab-7th" tab-bar-select-tab-7th)
        ]
       ]
      )
    )
  )
#+end_src
** project
#+begin_src elisp
(setup project
  (:when-loaded
    (add-to-list 'project-find-functions #'project-rootfile-try-detect)
    )
  )
#+end_src
** project-rootfile
#+begin_src elisp
(setup project-rootfile
  (setq project-rootfile-list '(".project"))
  )
#+end_src
* shell
** vterm
#+name: vterm
#+begin_src elisp
(setup vterm
  (:bind [(control return)] vterm-toggle-insert-cd))
#+end_src
** vterm-toggle
#+begin_src elisp
(setup vterm-toggle
  (setq vterm-toggle-hide-method 'reset-window-configration)
  (:global "C-`" vterm-toggle)
  (:when-loaded
    (setq vterm-toggle-fullscreen-p nil)
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   (reusable-frames . visible)
                   (window-height . 0.3)))
    (defun double-vterm-toggle-insert-cd()
      (interactive)
      (vterm-toggle-insert-cd)
      (vterm-toggle-insert-cd))
    )
  )
#+end_src
** eshell
#+name: eshell
#+begin_src elisp
(setup eshell)
#+end_src
** eat
#+begin_src elisp
(setup eat)
#+end_src
* git
** magit
#+begin_src elisp
(setup with-editor)
(setup magit)
#+end_src
** ediff
#+begin_src elisp
(setup ediff
  (setq ediff-split-window-function 'split-window-horizontally
           ediff-window-setup-function 'ediff-setup-windows-plain)
  ;; restore windows Configuration after ediff
  (add-hook 'ediff-before-setup-hook #'ediff-save-window-conf)
  (add-hook 'ediff-quit-hook #'ediff-restore-window-conf)
  (:when-loaded
    (defvar local-ediff-saved-window-conf nil)

    (defun ediff-save-window-conf ()
      (setq local-ediff-saved-window-conf (current-window-configuration)))

    (defun ediff-restore-window-conf ()
      (when (window-configuration-p local-ediff-saved-window-conf)
        (set-window-configuration local-ediff-saved-window-conf)))
    ))

#+end_src
* Program
** Language
*** elisp
**** helpful
#+begin_src elisp
(setup elisp-refs)
(setup helpful
  (:global "C-h f" #'helpful-callable
           "C-h v" #'helpful-variable
           "C-h k" #'helpful-key
           "C-c C-d" #'helpful-at-point
           "C-h F" #'helpful-function
           "C-h C" #'helpful-command))
#+end_src
**** elisp-demos
#+begin_src elisp
(setup elisp-demos
  (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src
*** graphviz-dot-mode
#+begin_src elisp
(setup graphviz-dot-mode
  (:file-match "\\.dot\\'")
  (setq graphviz-dot-indent-width 4)
  )
#+end_src
*** plantuml-mode
#+begin_src elisp
(setup plantuml-mode
  (setq plantuml-jar-path (concat no-littering-var-directory "plantuml.jar")))
#+end_src
*** beancount
Emacs major-mode to work with Beancount ledger files
#+begin_src elisp
(setup beancount
  (:file-match "\\.beancount\\'"))
(add-to-list 'auto-mode-alist
             (cons "\\.[pP][dD][fF]\\'" 'eaf-mode))
#+end_src
*** latex
**** basic
#+begin_src elisp
;;  (setup auctex)
(setup cdlatex)
#+end_src
**** org-elp
#+begin_src elisp
(setup org-elp
  (setq org-elp-idle-time 1))
#+end_src
*** python
**** python
#+begin_src elisp
(setup python
  (:with-hook inferior-python-mode-hook
    (:hook (lambda ()
             (process-query-on-exit-flag
              (get-process "Python")))))
  (:when-loaded
    (when (and (executable-find "python3")
               (string= python-shell-interpreter "python"))
      (setq python-shell-interpreter "python3"))
    (with-eval-after-load 'exec-path-from-shell
      (exec-path-from-shell-copy-env "PYTHONPATH"))
    ))
#+end_src
*** scheme
#+begin_src elisp
(setup geiser)
(setup geiser-guile)
#+end_src
*** common lisp slime
#+begin_src elisp
(setup slime
  (setq inferior-lisp-program "sbcl"))
#+end_src
*** cc-mode
#+begin_src emacs-lisp
(setup cc-mode
  (setq c-basic-offset 4))

(setup hideif
  (setq hide-ifdef-shadow t
           hide-ifdef-initially t)
  (:with-feature hide-ifdef-mode
    (:hook-into c-mode c++-mode)))
#+end_src
*** lua-mode
#+begin_src elisp
(setup lua-mode)
#+end_src
*** cmake-mode
#+begin_src elisp
(setup cmake-mode)
#+end_src
** Useful programing tools
*** xref related
**** xref
#+begin_src elisp
(setup xref
  (setq xref-search-program (cond
                             ((executable-find "rg") 'ripgrep)
                             (t 'grep))
        xref-history-storage #'xref-window-local-history)
  (:autoload xref-push-marker-stack)) ;; autoload this command for jump-back
#+end_src
**** xref jump back
borrowed from citre, now you can always jump-back use "M-," after any jump in the list.
#+begin_src elisp
(defun my--push-point-to-xref-marker-stack (&rest r)
  (xref-push-marker-stack (point-marker))) ;; must autoload this command in xref
(dolist (func '(find-function
                consult-imenu
                consult-ripgrep
                consult-line
                consult-find
                find-file
                blink-search
                consult-goto-line
                isearch-forward))
  (if (fboundp func)
      (advice-add func :before 'my--push-point-to-xref-marker-stack)))
#+end_src
*** UI
**** electric-pair
#+begin_src elisp
(setup elec-pair
  (electric-pair-mode))
#+end_src
*** treesit tools
**** treesit
#+begin_src elisp
(setup treesit
  (setq treesit-font-lock-level 4))
#+end_src
**** treesit-auto
#+begin_src elisp
(setup treesit-auto
  (:defer
   (if (treesit-available-p)
       (require 'treesit-auto)))
  (:when-loaded
    (global-treesit-auto-mode)
    (setq treesit-auto-install t)
    )
  )
#+end_src
*** Complete
**** corfu related
***** corfu
#+begin_src elisp
(defun corfu-enable-always-in-minibuffer ()
  "Enable Corfu in the minibuffer if Vertico/Mct are not active."
  (unless (or (bound-and-true-p mct--active)
              (bound-and-true-p vertico--input)
              (eq (current-local-map) read-passwd-map))
    (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                corfu-popupinfo-delay nil)
    (corfu-mode 1)))


(setup corfu
  (setq corfu-cycle t                ;; Enable cycling for `corfu-next/previous'
        corfu-auto t                 ;; Enable auto completion
        corfu-quit-no-match t        ;; Automatically quit if there is no match
        corfu-preview-current nil    ;; Disable current candidate preview
        corfu-auto-prefix 1
        corfu-auto-delay 0.05
        corfu-scroll-margin 5)        ;; Use scroll margin
  (:with-map corfu-map
    (:bind "<escape>" corfu-quit))
  (global-corfu-mode)
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)
  )

(setup corfu-popupinfo
  (:load-after corfu)
  (setq corfu-popupinfo-delay '(0.5 . 0.5))
  (:hook corfu-popupinfo-mode))

(setup cape
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  (add-to-list 'completion-at-point-functions #'cape-file)
  )
#+end_src
***** kind-icon
#+begin_src elisp
(setq kind-icon-use-icons nil)
(setq kind-icon-mapping
      `(
        (array ,(nerd-icons-codicon "nf-cod-symbol_array") :face font-lock-type-face)
        (boolean ,(nerd-icons-codicon "nf-cod-symbol_boolean") :face font-lock-builtin-face)
        (class ,(nerd-icons-codicon "nf-cod-symbol_class") :face font-lock-type-face)
        (color ,(nerd-icons-codicon "nf-cod-symbol_color") :face success)
        (command ,(nerd-icons-codicon "nf-cod-terminal") :face default)
        (constant ,(nerd-icons-codicon "nf-cod-symbol_constant") :face font-lock-constant-face)
        (constructor ,(nerd-icons-codicon "nf-cod-triangle_right") :face font-lock-function-name-face)
        (enummember ,(nerd-icons-codicon "nf-cod-symbol_enum_member") :face font-lock-builtin-face)
        (enum-member ,(nerd-icons-codicon "nf-cod-symbol_enum_member") :face font-lock-builtin-face)
        (enum ,(nerd-icons-codicon "nf-cod-symbol_enum") :face font-lock-builtin-face)
        (event ,(nerd-icons-codicon "nf-cod-symbol_event") :face font-lock-warning-face)
        (field ,(nerd-icons-codicon "nf-cod-symbol_field") :face font-lock-variable-name-face)
        (file ,(nerd-icons-codicon "nf-cod-symbol_file") :face font-lock-string-face)
        (folder ,(nerd-icons-codicon "nf-cod-folder") :face font-lock-doc-face)
        (interface ,(nerd-icons-codicon "nf-cod-symbol_interface") :face font-lock-type-face)
        (keyword ,(nerd-icons-codicon "nf-cod-symbol_keyword") :face font-lock-keyword-face)
        (macro ,(nerd-icons-codicon "nf-cod-symbol_misc") :face font-lock-keyword-face)
        (magic ,(nerd-icons-codicon "nf-cod-wand") :face font-lock-builtin-face)
        (method ,(nerd-icons-codicon "nf-cod-symbol_method") :face font-lock-function-name-face)
        (function ,(nerd-icons-codicon "nf-cod-symbol_method") :face font-lock-function-name-face)
        (module ,(nerd-icons-codicon "nf-cod-file_submodule") :face font-lock-preprocessor-face)
        (numeric ,(nerd-icons-codicon "nf-cod-symbol_numeric") :face font-lock-builtin-face)
        (operator ,(nerd-icons-codicon "nf-cod-symbol_operator") :face font-lock-comment-delimiter-face)
        (param ,(nerd-icons-codicon "nf-cod-symbol_parameter") :face default)
        (property ,(nerd-icons-codicon "nf-cod-symbol_property") :face font-lock-variable-name-face)
        (reference ,(nerd-icons-codicon "nf-cod-references") :face font-lock-variable-name-face)
        (snippet ,(nerd-icons-codicon "nf-cod-symbol_snippet") :face font-lock-string-face)
        (string ,(nerd-icons-codicon "nf-cod-symbol_string") :face font-lock-string-face)
        (struct ,(nerd-icons-codicon "nf-cod-symbol_structure") :face font-lock-variable-name-face)
        (text ,(nerd-icons-codicon "nf-cod-text_size") :face font-lock-doc-face)
        (typeparameter ,(nerd-icons-codicon "nf-cod-list_unordered") :face font-lock-type-face)
        (type-parameter ,(nerd-icons-codicon "nf-cod-list_unordered") :face font-lock-type-face)
        (unit ,(nerd-icons-codicon "nf-cod-symbol_ruler") :face font-lock-constant-face)
        (value ,(nerd-icons-codicon "nf-cod-symbol_field") :face font-lock-builtin-face)
        (variable ,(nerd-icons-codicon "nf-cod-symbol_variable") :face font-lock-variable-name-face)
        (t ,(nerd-icons-codicon "nf-cod-code") :face font-lock-warning-face)))

(setup kind-icon
  (:autoload kind-icon-margin-formatter)
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
**** lsp mode
***** eglot
#+begin_src elisp
(setup project)

(setq read-process-output-max (* 1024 1024))
(setup eglot
  (setq eglot-events-buffer-size 0
        ;; eglot-workspace-configuration '((:python.analysis :useLibraryCodeForTypes t))
        ;; eglot-stay-out-of '("xref") ;; xref is controlled in xref-union
        )
  (:autoload eglot-find-implementation)
  (add-hook 'prog-mode-hook (lambda ()
                        (unless (derived-mode-p 'emacs-lisp-mode 'lisp-mode 'makefile-mode 'snippet-mode)
                          (eglot-ensure))))
  (:when-loaded
    (defface new-hi-green
      '((((min-colors 88) (background dark))
         (:background "light green" :foreground "black"))
        (((background dark)) (:background "green" :foreground "black"))
        (((min-colors 88)) (:background "light green"))
        (t (:background "green")))
      "Face for hi-lock mode.")
    (set-face-attribute 'eglot-highlight-symbol-face nil :inherit 'new-hi-green)

    ;; the following code enable combine dumb-jump with eglot
    (advice-add 'eglot-xref-backend :override 'xref-eglot+dumb-backend)

    (defun xref-eglot+dumb-backend () 'eglot+dumb)

    (cl-defmethod xref-backend-identifier-at-point ((_backend (eql eglot+dumb)))
      (cons (xref-backend-identifier-at-point 'eglot)
            (xref-backend-identifier-at-point 'dumb-jump)))

    (cl-defmethod xref-backend-identifier-completion-table ((_backend (eql eglot+dumb)))
      (xref-backend-identifier-completion-table 'eglot))

    (cl-defmethod xref-backend-definitions ((_backend (eql eglot+dumb)) identifier)
      (or (xref-backend-definitions 'eglot (car identifier))
          (xref-backend-definitions 'dumb-jump (cdr identifier))))

    (cl-defmethod xref-backend-references ((_backend (eql eglot+dumb)) identifier)
      (or (xref-backend-references 'eglot (car identifier))
          (xref-backend-references 'dumb-jump (cdr identifier))))

    (cl-defmethod xref-backend-apropos ((_backend (eql eglot+dumb)) pattern)
      (xref-backend-apropos 'eglot pattern))
    )
  )

(setup eldoc
  (setq eldoc-echo-area-use-multiline-p nil
        eldoc-echo-area-display-truncation-message t))
;; (setq eldoc-echo-area-prefer-doc-buffer nil)
#+end_src
***** consult-eglot
#+begin_src elisp
(setup consult-eglot
  (:load-after eglot)
  (:with-map eglot-mode-map
    (:bind [remap xref-find-apropos] #'consult-eglot-symbols)))
#+end_src
***** lsp-bridge
install dependencies.
#+begin_src bash
pip3 install epc orjson sexpdata six paramiko
#+end_src
#+begin_src elisp :tangle no
(setup lsp-bridge
  (setq lsp-bridge-enable-org-babel nil
        lsp-bridge-python-lsp-server "pylsp"
        lsp-bridge-enable-completion-in-minibuffer t
        lsp-bridge-enable-hover-diagnostic t
        ;; acm
        acm-enable-citre nil
        acm-enable-codeium nil
        acm-backend-codeium-api-key-path (concat nowis-doc-emacs-dir "08-keys/codeium_api_key.txt")
        )
  (:defer
   (global-lsp-bridge-mode)))
#+end_src
**** citre
Citre is an advanced Ctags (or actually, readtags) frontend for Emacs.
#+begin_src elisp
(setup citre
  (add-hook 'prog-mode (lambda()
                         (require 'citre-config)
                         ))
  (setq citre-use-project-root-when-creating-tags t
        citre-prompt-language-for-ctags-command t
        ;; citre-auto-enable-citre-mode-modes '(prog-mode)
        )
  )
#+end_src
**** dumb-jump
#+begin_src elisp
(setup popup)
(setup dumb-jump)
(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
#+end_src
*** quickrun
#+begin_src elisp
(setup ht)
(setup quickrun)
#+end_src
*** Code toggle with hideshow, hideif
#+begin_src elisp
(setup hideshow
  (:with-hook prog-mode-hook
    (:hook hs-minor-mode))
  (add-to-list 'hs-special-modes-alist '(verilog-mode "\\(\\<begin\\>\\|\\<case\\>\\|\\<module\\>\\|\\<class\\>\\|\\<function\\>\\|\\<task\\>\\)"
                                                      )))

;; (setup hideif
;;   (add-hook 'c-mode-common-hook
;;             (lambda ()
;;               (hide-ifdef-mode)
;;               (add-hook 'after-save-hook (lambda () (hide-ifdefs))))))
#+end_src
*** format-all
#+begin_src elisp
(setup inheritenv)
(setup language-id)
(setup format-all)
#+end_src
*** gdb
#+begin_src elisp
(setup gdb-mi
  (:global "<f5>" gdb-transient-keybindings)
  (:when-loaded
    (transient-define-prefix gdb-transient-keybindings()
      "Define map for gdb functions"
      [[("b" "gud-break" gud-break)
        ("c" "gud-cont" gud-cont)]
       [("f" "gud-finish" gud-finish)
        ("j" "gud-jump" gud-jump)]
       [("n" "gud-next" gud-next)
        ("p" "gud-print" gud-print)]
       [("r" "gud-run" gud-run)
        ("R" "gud-remove" gud-remove)]
       [("s" "gud-step" gud-step)
        ("u" "gud-until" gud-until)]
       [("w" "gud-watch" gud-watch)]
       ])))
#+end_src
*** disaster
Disassemble C, C++ or Fortran code under cursor
#+begin_src elisp
(setup disaster
  (setq disaster-assembly-mode 'nasm-mode
           disaster-objdump "objdump -d -M att -Sl --no-show-raw-insn"))
#+end_src
*** jupyter
#+begin_src elisp :tangle no
(setup websocket)
(setup zmq)
(setup simple-httpd)
(setup jupyter
  (setenv "PYDEVD_DISABLE_FILE_VALIDATION" "1") ;; to solve (json-number-format 5) problems because it fails to separate from stdout,
  )
#+end_src
* Org Mode
** org-mode
#+begin_src elisp
(setup org
  (setq org-directory (concat nowis-doc-emacs-dir "01-orgmode/"))
  (setq org-adapt-indentation nil
        org-startup-indented t
        org-edit-src-content-indentation 0
        org-hide-emphasis-markers t
        org-imenu-depth 8
        org-return-follows-link t
        org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                               (vm-imap . vm-visit-imap-folder-other-frame)
                               (gnus . org-gnus-no-new-news)
                               (file . find-file)
                               (wl . wl-other-frame))
        org-log-done 'time ;; 记录完成时间
        org-blank-before-new-entry '((heading . nil)
                                     (plain-list-item . nil))

        org-image-actual-width 600 ;; this will use 600 for width for all the images.
        org-preview-latex-image-directory (concat no-littering-var-directory "ltximg/")
        org-confirm-babel-evaluate nil
        org-src-window-setup 'split-window-below
        org-ellipsis "⤵"
        org-plantuml-jar-path plantuml-jar-path
        org-special-ctrl-a/e t
        org-attach-id-dir (concat nowis-doc-emacs-dir "02-binary-files/01-pictures/01-org-attach")
        fill-column 100

        ;; habit
        org-habit-following-days 2

        ;; todo keywords
        org-todo-keywords (quote ((sequence "TODO(t!/!)" "NEXT(n!/!)" "|" "DONE(d!/!)")
                                  (type "PROJECT(p!/!)" "|" "DONE_PROJECT(D!/!)")
                                  (type "SOMEDAY(S!)" "|" "NEED_COLLECTED(N!)")
                                  (sequence "WAIT(w@/!)" "|" "CANCELLED(c@/!)")))
        org-todo-keyword-faces (quote (("TODO" :foreground "red" :weight bold)
                                       ("NEXT" :foreground "blue" :weight bold)
                                       ("DONE" :foreground "forest green" :weight bold)
                                       ("PROJECT" :foreground "red" :weight bold)
                                       ("DONE_PROJECT" :foreground "forest green" :weight bold)
                                       ("SOMEDAY" :foreground "orange" :weight bold)
                                       ("NEED_COLLECTED" :foreground "orange" :weight bold)
                                       ("WAIT" :foreground "orange" :weight bold)
                                       ("CANCELLED" :foreground "forest green" :weight bold)
                                       ))
        )

  ;; (:hook org-num-mode)
  (:when-loaded
    (require 'org-tempo) ;; so that <s is useful
    ;; 导出相关的设置
    (setq org-latex-pdf-process '("tectonic %f"))
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0)) ;; use a large preview for latex

    ;; emphasis
    (defface my-org-emphasis-bold
      '((default :inherit bold)
        (((class color) (min-colors 88) (background light))
         :foreground "pale violet red")
        (((class color) (min-colors 88) (background dark))
         :foreground "pale violet red"))
      "My bold emphasis for Org.")

    (defface my-org-emphasis-italic
      '((default :inherit italic)
        (((class color) (min-colors 88) (background light))
         :foreground "green3")
        (((class color) (min-colors 88) (background dark))
         :foreground "green3"))
      "My italic emphasis for Org.")

    (defface my-org-emphasis-underline
      '((default :inherit underline)
        (((class color) (min-colors 88) (background light))
         :foreground "#813e00")
        (((class color) (min-colors 88) (background dark))
         :foreground "#d0bc00"))
      "My underline emphasis for Org.")

    (setq org-emphasis-alist
          '(("*" my-org-emphasis-bold)
            ("/" my-org-emphasis-italic)
            ("_" underline)
            ("=" org-verbatim verbatim)
            ("~" org-code verbatim)
            ("+" (:strike-through t))
            ))

    ;; dynamic load org-src modules to accelerate speed
    (defun my/org-babel-execute-src-block (&optional _arg info _params)
      "Load language if needed"
      (let* ((lang (nth 0 info))
             (sym (cond ((member (downcase lang) '("c" "cpp" "c++")) 'C)
                        ((member (downcase lang) '("jupyter-python")) 'jupyter)
                        (t (intern lang))))
             (backup-languages org-babel-load-languages))
        (unless (assoc sym backup-languages)
          (condition-case err
              (progn
                (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t)))
                (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages)))
            (file-missing
             (setq-default org-babel-load-languages backup-languages)
             err)))))
    (advice-add 'org-babel-execute-src-block :before #'my/org-babel-execute-src-block )


    ;; didn't redisplay for now
    ;; (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)

    ;; export and open word
    (add-to-list 'org-file-apps '("\\.docx\\'" . default))
    (add-to-list 'org-structure-template-alist
                 '("jp" . "src jupyter-python :async yes :kernel python3 :session py"))
    (defun lewis/org-export-docx ()
      (interactive)
      (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) ".docx"))
            (template-file (concat nowis-doc-emacs-dir
                                   "02-binary-files/template.docx")))
        (shell-command (format "pandoc %s -o %s --reference-doc=%s"
                               (buffer-file-name)
                               docx-file
                               template-file
                               ))
        (message "Convert finish: %s" docx-file)))
    ))
#+end_src
** org-modern
#+begin_src elisp
(setup org-modern
  (setq
   org-modern-star '("Ⓐ" "Ⓑ" "Ⓒ" "Ⓓ" "Ⓔ" "Ⓕ" "Ⓖ" "Ⓗ" "Ⓘ" "Ⓙ" "Ⓚ" "Ⓛ" "Ⓜ")
   org-modern-table nil)
  (:hook-into org-mode)
  ;; (add-hook 'org-agenda-finalize-hook #'org-modern-agenda)
  )
#+end_src
** org-modern-indent
#+begin_src elisp
(setup org-modern-indent
  (add-hook 'org-mode-hook #'org-modern-indent-mode 90))
#+end_src
** org-appear
#+begin_src elisp
(setup org-appear
  (:hook-into org-mode))
#+end_src
** org-download
#+begin_src elisp
(setup async)
(setup org-download
  (setq org-download-method 'directory
           org-download-screenshot-basename "screenshot.jpg"
           org-download-image-dir (concat nowis-doc-emacs-dir "02-binary-files/01-pictures/org_download_images")
           org-download-abbreviate-filename-function 'expand-file-name)
  (:when-loaded
    (when (eq system-type 'gnu/linux)
      (setq-default org-download-screenshot-method "scrot -s %s"))

    (when (eq system-type 'darwin)
      (setq org-download-screenshot-method "screencapture -i %s")))
  (:autoload org-download-screenshot
             org-download-yank))
#+end_src
** ox-hugo
#+begin_src elisp
(setup tomelr)
(setup ox-hugo
  (:load-after ox))
#+end_src
** org-clock
*** org-pomodoro
#+begin_src elisp
(setup alert)
(setup org-pomodoro
  (setq org-pomodoro-finished-sound (concat nowis-doc-emacs-dir "02-binary-files/applaud.wav")))
#+end_src
** org-noter
#+begin_src elisp
(setup org-noter
  (setq org-noter-notes-search-path (concat nowis-doc-emacs-dir "02-binary-files/02-searchable/01-papers-markable/")
           org-noter-auto-save-last-location t
           org-noter-separate-notes-from-heading nil
           org-noter-hide-other nil
           org-noter-doc-split-percentage '(0.6 . 0.4)
           org-noter-highlight-selected-text t
           )
  ;; (:when-loaded
  ;;   (require 'org-noter-pdf)
  ;;   (require 'org-noter-nov)
  ;;   (require 'org-noter-nov-overlay)
  ;;   (require 'org-noter-dynamic-block))
  )
#+end_src
** org-present
#+begin_src elisp
(setup org-present)
#+end_src
** bibtex related
*** bibtex
#+begin_src elisp
(setup bibtex
  (setq bibtex-autokey-year-length 4
           bibtex-autokey-titleword-separator "_"
           bibtex-autokey-name-year-separator "_"
           bibtex-autokey-year-title-separator "_"
           bibtex-autokey-titleword-length 15
           bibtex-autokey-titlewords 10
           bibtex-autokey-titleword-ignore ;; I took "On" out of this
           '("A" "An" "The" "Eine?" "Der" "Die" "Das")))


(defun do.refs/get-db-file-list ()
  "Get the list of all the bib files containing my bib database."
  (if (file-exists-p nowis-bib-dir)
      (directory-files nowis-bib-dir t "\\.bib\\'")
    nil))
#+end_src
*** citar
#+begin_src elisp
(setup parsebib)
;; (setup citeproc) ;;<- (setup queue) (setup string-inflection)
(setup citar
  (setq org-cite-global-bibliography (do.refs/get-db-file-list)
           org-cite-insert-processor 'citar
           org-cite-follow-processor 'citar
           org-cite-activate-processor 'citar
           citar-library-paths (list nowis-bib-pdf-dir)
           citar-bibliography org-cite-global-bibliography))
#+end_src
*** citar-denote
#+begin_src elisp
(setup citar-denote
  (setq citar-denote-title-format "title")
  (:defer
  (citar-denote-mode)))
#+end_src
*** ebib
#+begin_src elisp
(setup ebib
  (setq ebib-preload-bib-files org-cite-global-bibliography
           ebib-file-search-dirs (list nowis-bib-pdf-dir)
           ebib-bib-search-dirs (list nowis-bib-dir)
           ebib-default-directory 'first-bib-dir
           ebib-file-associations '(("pdf")
                                    ("ps" . "gv")
                                    ("epub"))
           ebib-index-window-size 25
           ebib-index-columns '(("Score" 2 t)
                                ("Year" 6 t)
                                ("Title" 50 t)
                                ("Author/Editor" 40 t)
                                ("Entry Key" 40 t)
                                )
           ebib-reading-list-file (concat nowis-doc-emacs-dir "01-orgmode/xnotes/20230403T125743--ebib-reading-lists.org")
           ebib-use-timestamp t
           ebib-bibtex-dialect 'biblatex
           ebib-create-backups nil
           )
  )
#+end_src
*** zotra
**** a installation script
#+begin_src bash
cd ~/Downloads
git clone --recurse-submodules https://github.com/mpedramfar/zotra-cli.git
cd zotra-cli
npm install .
cd ~/Downloads
git clone https://github.com/l0o0/translators_CN.git --depth=1
rm -rf ~/Downloads/zotra-cli/module/translation-server/modules/translators
ln -s ~/Downloads/translators_CN/translators ~/Downloads/zotra-cli/module/translation-server/modules/
#+end_src
**** config
#+begin_src elisp
(setup zotra
  (:autoload zotra-add-entry-from-url)
  (if (eq system-type 'darwin)
      (setq zotra-cli-command '("node" "/Users/liuyi/Downloads/zotra-cli/bin/index.js")))
  (if (eq system-type 'gnu/linux)
      (setq zotra-cli-command '("node" "/home/lewisliu/Downloads/zotra-cli/bin/index.js"))))
#+end_src
** toc-org
#+begin_src elisp
(setup toc-org
  (:hook-into org-mode))
#+end_src
** denote
#+begin_src elisp
(setup denote
  (setq denote-directory (expand-file-name (concat nowis-doc-emacs-dir "01-orgmode/xnotes"))
        denote-dired-directories (ffap-all-subdirs denote-directory)
        denote-date-prompt-use-org-read-date t
        denote-modules '(project))
  (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
  ;; should add a hook for disable diredfl-mode
      ;;;###autoload
  (defun denote-open-or-create-with-subdirectory ()
    "Invoke `denote-open-or-create' but also prompt for subdirectory.
  This is the equivalent to calling `denote-open-or-create' when
  `denote-prompts' is set to \\='(subdirectory title keywords)."
    (declare (interactive-only t))
    (interactive)
    (let ((denote-prompts '(subdirectory title keywords)))
      (call-interactively #'denote-open-or-create)))
  )
#+end_src
** denote-lumn
Borrowed from https://github.com/protesilaos/denote/issues/115
#+begin_src elisp
(setq find-dired-refine-function nil)  ;; This needs to be set globally, find-dired works asynchronously.

(defun my/zettel-signature-buffer ()
  (interactive)
  (if (not (featurep 'find-dired))
      (require 'find-dired))
  (let ((find-ls-option '(" -exec ls -ld {} \\+| awk /==/ |sort -t '=' -k 3" . "-ld")))
    (find-dired denote-directory "")))

(defun my/zettel-main-topics ()
  (interactive)
  (let ((find-ls-option '("-regex '.*==[0-9]+-.*'  -exec ls -ld {} \\+| awk /==/ | sed  's/--/=@/3' | sort -t '=' -Vk 3,3 | sed 's/=@/--/'" . "-ld")))
    (find-dired denote-directory "")))
#+end_src
** find orgmode dir files
#+begin_src elisp
(defun project-find-papers-dir-files ()
  (interactive)
  (dired (concat nowis-doc-emacs-dir "02-binary-files/02-searchable/01-papers-markable"))
  (project-find-file t))
(defun project-find-searchable-dir-files ()
  (interactive)
  (dired (concat nowis-doc-emacs-dir "02-binary-files/02-searchable"))
  (project-find-file t))
(defun project-find-gtd-dir-files ()
  (interactive)
  (dired nowis-gtd-dir)
  (project-find-file t))
#+end_src
** org-imagine, excalidraw
#+begin_src elisp
(defvar org-excalidraw--default-base
  "{
    \"type\": \"excalidraw\",
    \"version\": 2,
    \"source\": \"https://excalidraw.com\",
    \"elements\": [],
    \"appState\": {
      \"gridSize\": null,
      \"viewBackgroundColor\": \"#ffffff\"
    },
    \"files\": {}
  }
"
  "Get default JSON template used for new excalidraw files."
  )

(defun lewis-create-excalidraw()
  (interactive)
  (let* ((filename (concat (car (split-string (buffer-name) "\\.")) ".excalidraw"))
         (path (concat nowis-doc-emacs-dir "05-excalidraw/" filename))
         (link (format "[[file:%s]]" path)))
    (insert link)
    (with-temp-file path (insert org-excalidraw--default-base))))

;; (setup org-imagine)
#+end_src
** shrface
#+begin_src elisp :tangle no
(setup shrface
  (:load-after nov)
  (:load-after eww)
  (:hook-into nov-mode
              eww-after-render
              )
  (:when-loaded
    (shrface-basic)
    (shrface-trial)
    (shrface-default-keybindings) ; setup default keybindings
    (setq shrface-href-versatile t)
    (setq nov-shr-rendering-functions '((img . nov-render-img) (title . nov-render-title)))
    (setq nov-shr-rendering-functions (append nov-shr-rendering-functions shr-external-rendering-functions))))
#+end_src
** org-remark
Highlight and annotate any text file with using Org mode.
#+begin_src elisp :tangle no
(setup org-remark
  (defun my/function ()
    (concat (concat nowis-doc-emacs-dir "01-orgmode/org-remark/")
            (file-name-base (org-remark-notes-file-name-function))
            ".org"))
  (setq org-remark-notes-file-name #'my/function)
  (:when-loaded
    (org-remark-global-tracking-mode +1)
    ))
#+end_src
** annotate
#+begin_src elisp
(setup annotate)
#+end_src
** clue
Connecting clues while reading code.
#+begin_src elisp
(setup clue)
#+end_src
** org-gtd
#+begin_src elisp
(setup org-agenda-property)
(setq org-gtd-update-ack "3.0.0")
(setq org-edna-use-inheritance t
      org-gtd-organize-hooks '(org-gtd-set-area-of-focus org-set-tags-command)
      org-gtd-directory nowis-gtd-dir)
(setup org-gtd
  (:load-after org)
  (:defer (org-gtd-mode))
    (:with-map org-gtd-clarify-map
   (:bind "C-c c"  org-gtd-organize)))
(setup org-edna)
#+end_src
** agenda/gtd (disabled)
https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html
https://dindi.garjola.net/org-agenda-weekly.html
#+begin_src elisp :tangle no
(defvar nowis-index-org (concat nowis-gtd-dir "/20230411T002918--index.org"))
(defvar nowis-gtd-org (concat nowis-gtd-dir "/20230411T002424--action.org"))
(defvar nowis-someday-org (concat nowis-gtd-dir "/20230310T005150--someday.org"))
  (setq org-agenda-files (list nowis-index-org
                                  nowis-gtd-org
                                  ;; (concat nowis-gtd-dir "/20230411T002918--index.org_archive")
                                  ;; (concat nowis-gtd-dir "/20230411T002424--action.org_archive")
                                  ))
(setup org-refile
  (setq org-refile-targets (list (cons nowis-gtd-org '(:maxlevel . 1))
                                    (cons nowis-someday-org '(:level . 1)))))
(setup org-capture
  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                    (file+headline nowis-index-org "Tasks")
                                    "* TODO %i%?"))))

(setup org-agenda
  (setq org-agenda-span 'day
           org-agenda-skip-scheduled-if-done t
           org-agenda-skip-deadline-if-done t
           org-agenda-block-separator nil
           org-agenda-compact-blocks t
           org-agenda-start-with-log-mode t
           )
  )
#+end_src
** org-ql
#+begin_src elisp :tangle no
(setup ts)
(setup peg)
(setup ov)
(setup org-ql)
#+end_src
** mpvi
Integrate Org with Video
#+begin_src elisp
(setup mpvi)
#+end_src
** orgtbl-aggregate
Aggregating a table is creating a new table by computing sums, averages, and so on, out of material from the first table.
#+begin_src elisp
(setup orgtbl-qggregate)
#+end_src
** org-fc
Spaced Repetition System for Emacs org-mode
#+begin_src elisp
(setup org-fc
  (autoload #'org-fc-review-all "org-fc" nil t)
  (setq org-fc-directories (list denote-directory)
        org-fc-review-history-file (concat nowis-doc-emacs-dir "org-fc-reviews.tsv")
        )
  (:when-loaded
    (require 'org-fc-keymap-hint)
     ))
#+end_src
* english 翻译
** go-translate
#+begin_src elisp
(setup go-translate
  (setq gts-translate-list '(("en" "zh")))
  (:global "M-L" gts-do-translate)

  (:when-loaded
    (setq gts-default-translator (gts-translator
                                  :picker (gts-prompt-picker)
                                  ;; :engines (list (gts-google-rpc-engine))
                                  :engines (list (gts-bing-engine))
                                  :render (gts-buffer-render)))))
#+end_src
** sdcv
If you encounter the following issue: =g_mkdir failed: No such file or directory=, please consider:
#+begin_src bash
mkdir ~/.stardict
#+end_src

#+begin_src elisp
(setup sdcv
  (setq sdcv-dictionary-data-dir (expand-file-name (concat nowis-doc-emacs-dir "02-binary-files/03-stardicts")))
  (:global "M-l" lewis-eaf-sdcv-search-pointer+)
  (if (eq system-type 'darwin)
      (setq sdcv-program "sdcv"))
  ;; search in eaf mode
  (defun lewis-sdcv-search-pointer-in-kill-ring()
    (sdcv-search-input+ (substring-no-properties (car kill-ring) 0)))
  (defun lewis-eaf-sdcv-search-pointer+()
    (interactive)
    (if (derived-mode-p 'eaf-mode)
        (progn
          (eaf-py-proxy-copy_select)
          (run-with-timer 0.2 nil 'lewis-sdcv-search-pointer-in-kill-ring))
      (sdcv-search-pointer+)))
  )
#+end_src
** immersive-translate
immersive-translate: Immersive Bilingual Translation
#+begin_src elisp
(setup immersive-translate)
(add-hook 'elfeed-show-mode-hook #'immersive-translate-setup)
(add-hook 'nov-pre-html-render-hook #'immersive-translate-setup)
;; use translate-shell
(setq immersive-translate-backend 'trans)
#+end_src
* 阅读
** pdf-tools
#+begin_src elisp
(setup tablist)
(setup pdf-tools
  (setq pdf-view-use-scaling t
           pdf-annot-list-format '((page . 3)
                                   (type . 10)
                                   (contents . 56)
                                   (date . 24)))
  (:with-map pdf-view-mode-map
    (:bind "h h" pdf-annot-add-highlight-markup-annotation
           "[" pdf-view-scroll-down-or-previous-page
           "]" pdf-view-scroll-up-or-next-page))
  (pdf-loader-install)
  )
;; (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1))))

(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
      TeX-source-correlate-start-server t)

(add-hook 'TeX-after-compilation-finished-functions
          #'TeX-revert-document-buffer)
#+end_src
** pdf-view-pagemark
#+begin_src elisp
(setup pdf-view-pagemark
  (:hook-into pdf-view-mode-hook))
#+end_src
** elfeed
#+begin_src elisp
(setup elfeed
  (setq elfeed-show-entry-switch 'display-buffer))
#+end_src
** efleed-org
#+begin_src elisp
(setup elfeed-org
  (with-eval-after-load 'no-littering
    (setq rmh-elfeed-org-files (list (concat nowis-config-useful-tools "elfeed.org"))))
  )
(defun my-elfeed()
  (interactive)
  (unless (featurep 'elfeed-org)
    (elfeed-org))
  (elfeed))
#+end_src
** nov
#+begin_src elisp
(setup esxml) ;; <- (setup kv)
(setup nov
  (:file-match "\\.epub\\'"))
#+end_src
** nov-xwidget
#+begin_src elisp
(setup nov-xwidget
  (:load-after nov)
  (:with-map nov-xwidget-webkit-mode-map
    (:bind "n" 'nov-xwidget-next-document
           "p" 'nov-xwidget-previous-document
           "]" 'nov-xwidget-next-document
           "[" 'nov-xwidget-previous-document
           "t" 'nov-xwidget-goto-toc
           "S" 'nov-xwidget-find-source-file))
  (:when-loaded
    (define-key nov-mode-map (kbd "o") 'nov-xwidget-view)
    (add-hook 'nov-mode-hook 'nov-xwidget-inject-all-files)))
#+end_src
** darkroom
Simple distraction-free editing. I use darkroom instead of writeroom because it's more simple
#+begin_src elisp
(setup darkroom)
#+end_src
** markdown-mode
#+begin_src elisp
(setup markdown-mode
  (:file-match "\\.md\\'"))
#+end_src
* tools
** xwidget and browser
#+begin_src elisp
(defun lewis/url-browser-new-buffer(url &optional new-session)
  (interactive (progn
                 (require 'browse-url)
                 (browse-url-interactive-arg "xwidget-webkit URL: ")))
  (xwidget-webkit-browse-url url t))

;; now use eww
;; (setq browse-url-browser-function 'lewis/url-browser-new-buffer)
;; (setq browse-url-browser-function 'eww-browse-url)
#+end_src
** eaf
#+begin_src elisp :tangle no
(setup eaf
  (add-to-list 'load-path "~/.emacs.d/lib/eaf")
  (setq eaf-browser-enable-autofill t
        eaf-webengine-font-family lewis-variable-font
        eaf-webengine-serif-font-family lewis-variable-font
        eaf-webengine-fixed-font-family lewis-fixed-font
        eaf-config-location (concat no-littering-var-directory "eaf/")
        ;; proxy
        eaf-proxy-type "http"
        eaf-proxy-host "127.0.0.1"
        eaf-proxy-port "7890"
        )
  (if (eq system-type 'darwin)
      (setq eaf-python-command "~/.pyenv/shims/python3"))
  ;; (if (eq system-type 'gnu/linux)
  ;; (require 'eaf)
  ;; )
  )

(setup eaf-browser
  (:autoload eaf-open-browser)
  )
(setup eaf-pdf-viewer
  (setq eaf-pdf-scroll-ratio 0.1)
  (:autoload eaf-open-pdf-from-history))
(setup eaf-rss-reader
  (:autoload eaf-open-rss-reader))
(setup eaf-map
  (:autoload eaf-open-map))
(setup eaf-markdown-previewer)
(setup eaf-markmap)

(setup eaf-interleave
  (setq eaf-interleave-org-notes-dir-list (list (concat nowis-doc-emacs-dir "01-orgmode/") ".")
        eaf-interleave-disable-narrowing t
        eaf-interleave-split-lines 20
        eaf-find-alternate-file-in-dired t
        )
  (:bind "M-."  'eaf-interleave-sync-current-note
         "M-p"  'eaf-interleave-sync-previous-note
         "M-n"  'eaf-interleave-sync-next-note)
  (:with-map eaf-interleave-app-mode-map
    (:bind
     "C-c M-i"  'eaf-interleave-add-note
     "C-c M-o"  'eaf-interleave-open-notes-file
     "C-c M-q"  'eaf-interleave-quit))
  (add-hook 'eaf-pdf-viewer-hook 'eaf-interleave-app-mode)
  (add-hook 'eaf-browser-hook 'eaf-interleave-app-mode)
  ;; (add-hook 'org-mode-hook 'eaf-interleave-mode)
  )
#+end_src
** holo-layer
#+begin_src elisp
(setup holo-layer
  (when (eq system-type 'darwin)
    (require 'holo-layer)
    (setq holo-layer-enable-cursor-animation t
          holo-layer-enable-window-border t
          holo-layer-enable-place-info t
          )
    (holo-layer-enable)
    )
  )
#+end_src
** app-launcher
#+begin_src elisp
(setup app-launcher)
#+end_src
** gif-screencast
#+begin_src elisp
(setup gif-screencast
  (:autoload gif-screencast-start-or-stop
             gif-screencast-toggle-pause)
  (:if-system 'darwin)
  (:when-loaded
    (setq gif-screencast-args '("-x") ;; To shut up the shutter sound of `screencapture' (see `gif-screencast-command').
             gif-screencast-cropping-program "mogrify" ;; Optional: Used to crop the capture to the Emacs frame.
             gif-screencast-capture-format "ppm" ;; Optional: Required to crop captured images.
             gif-screencast-scale-factor 2.0))
  (defun my/siri-ocr ()
    (interactive)
    (shell-command "shortcuts run \"OCR Selected Area\"")
    (do-applescript "tell application id \"org.gnu.Emacs\" to activate")
    )
  ;; (keymap-global-set "M-o" #'my/siri-ocr)
  )
#+end_src
** ai related
*** gptel
#+begin_src elisp
(setup gptel
  (setq gptel-default-mode 'org-mode
        gptel-host "api.chatanywhere.com.cn"
        gptel-crowdsourced-prompts-file (concat nowis-doc-emacs-dir "09-scripts/chatgpt.csv")
        )
  (:global "M-p" gptel-send
           "M-P" gptel-menu))
#+end_src
*** whisper.el
#+begin_src elisp :tangle no
(setup whisper
  (setq whisper-install-directory (concat no-littering-var-directory "whisper")
           whisper-language "zh"
           whisper-model "medium"
           whisper-use-threads 8))
#+end_src
** webjump
#+begin_src elisp
(setup webjump
  (setq webjump-sites '(
                        ;; Emacs.
                        ("Emacs Home Page" .
                         "www.gnu.org/software/emacs/emacs.html")
                        ;; Internet search engines.
                        ("Google" .
                         [simple-query "www.google.com"
                                       "www.google.com/search?q=" ""])
                        ("DouBan DuShu" .
                         [simple-query "book.douban.com"
                                       "search.douban.com/book/subject_search?search_text=" ""])
                        ("Github" .
                         [simple-query "github.com"
                                       "github.com/search?ref=simplesearch&q=" ""])
                        ("Aur" .
                         [simple-query "aur.archlinux.org"
                                       "aur.archlinux.org/packages?O=0&K=" ""])
                        )))
#+end_src

** scripts
*** backup scripts
#+begin_src elisp
(defun backup-push-emacs-doc()
  (interactive)
  (async-shell-command " rsync -avbih --exclude '.git' \
     ~/Documents/emacs/02-binary-files/ lewis-nas@192.168.31.108:/share/my_webdav/rsync/emacs/02-binary-files/"))

(defun backup-restore-emacs-doc()
  (interactive)
  (async-shell-command " rsync -avbih --exclude '.git' \
 lewis-nas@192.168.31.108:/share/my_webdav/rsync/emacs/02-binary-files/ ~/Documents/emacs/02-binary-files/"))

(defun backup-sync-emacs-doc()
  (interactive)
  (async-shell-command "
rsync -avihbu --exclude '.git' \
      lewis-nas@192.168.31.108:/share/my_webdav/rsync/emacs/02-binary-files/ ~/Documents/emacs/02-binary-files/ \
    && rsync -avbih --delete --exclude '.git'\
             ~/Documents/emacs/02-binary-files/ lewis-nas@192.168.31.108:/share/my_webdav/rsync/emacs/02-binary-files/ "))

(defun backup-sync-tmp-doc()
  (interactive)
  (async-shell-command "
rsync -avihu lewis-nas@192.168.31.108:/share/my_webdav/rsync/tmp/ ~/Downloads/tmp/ \
    && rsync -avih --delete ~/Downloads/tmp/ lewis-nas@192.168.31.108:/share/my_webdav/rsync/tmp/ "))

(defun backup-restic-emacs-doc()
  (interactive)
  (async-shell-command "restic -r sftp:lewis-nas@192.168.31.108:/share/my_webdav/restic/emacs backup ~/Documents/emacs/")
  )

(transient-define-prefix backup-leader-map()
  "Define leader-key map for backup functions"
  [["rsync"
    ("p" "push emacs doc" backup-push-emacs-doc)
    ("r" "restore emacs doc" backup-restore-emacs-doc)
    ("s" "update emacs doc first and sync" backup-sync-emacs-doc)
    ("t" "sync tmp dir" backup-sync-tmp-doc)]
   ["restic"
    ("b" "backup all emacs doc" backup-restic-emacs-doc)]])
#+end_src


** video and music
*** emms
#+begin_src elisp
(setup emms)
;; (require 'emms-setup)
;; (emms-standard)
;; (emms-default-players)
(setq emms-source-file-default-directory "~/Documents/video_music/")
#+end_src
** esup
#+begin_src elisp
(setup esup)
#+end_src
* use single file to load configs
this can avoid errors of native compilation of init.el
** provide
#+begin_src elisp
(provide 'init-config)
#+end_src
** load init-config.el
#+begin_src elisp :tangle ~/.emacs.d/init.el
;; -*- lexical-binding: t; -*-
(add-to-list 'load-path (expand-file-name "modules/" user-emacs-directory))
(require 'init-config)
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src
* quick-edit and minimal-file
These 2 files are tangled using noweb and will be used for special purpose.

1. =init-quick-edit.el= will be used to open a file, edit it and close it quickly.
2. =init-mininal.el= is a file to start from scratch in which case you don't want the full-blown configurations.
** init-quick-edit
use the following commands in shell:
#+begin_src bash
emacs -Q --daemon -l ~/.emacs.d/init-quick-edit.el
emacsclient -t -r
#+end_src

#+begin_src elisp :noweb yes :tangle init-quick-edit.el
<<ui-speed-up>>
<<basic-modes>>
<<load-path>>
<<setup>>
<<gcmh>>
<<meow>>
<<transient>>
<<meow-leader-keys>>
<<which-key>>
<<font>>
<<line-number>>
<<simple>>
<<general-builtin-modes>>
<<exec-path-from-shell>>
<<vundo>>
<<vertico>>
<<orderless>>
<<consult>>
<<winner-mode>>
<<ibuffer>>
;; <<tab-bar>>
;; <<tabspaces>>
<<vterm>>
<<eshell>>
#+end_src
** init-minimal
