#+TITLE: Emacs Configuration
#+PROPERTY: header-args:elisp :tangle ~/.emacs.d/init.el

"Simulate company with corfu" is at the end of this file.
* 启动优化
** UI speed up
#+begin_src elisp
  ;; -*- lexical-binding: t; -*-
  (tool-bar-mode -1)                      ;禁用工具栏
  (scroll-bar-mode -1)                    ;禁用滚动条
  (setq
   ;; 不要缩放frame.
   frame-inhibit-implied-resize t
   ;; 默认用最简单的模式
   initial-major-mode 'fundamental-mode
   ;; 不要自动启用package
   package-enable-at-startup nil
   package--init-file-ensured t
   inhibit-startup-message t             ; 关闭启动 Emacs 时的欢迎界面
   )
  ;; (setq make-backup-files nil)                 ; 关闭文件自动备份
  (electric-pair-mode t)                       ; 自动补全括号
  ;; (add-hook 'prog-mode-hook #'show-paren-mode) ; 编程模式下，光标在括号上时高亮另一个括号
  (column-number-mode t)                       ; 在 Mode line 上显示列号
  (global-auto-revert-mode t)                  ; 当另一程序修改了文件时，让 Emacs 及时刷新 Buffer
  (delete-selection-mode t)                    ; 选中文本后输入文本会替换文本（更符合我们习惯了的其它编辑器的逻辑）
  (add-hook 'prog-mode-hook #'hs-minor-mode)   ; 编程模式下，可以折叠代码块

  ;; (global-display-line-numbers-mode 1)         ; 在 Window 显示行号
  (setq display-line-numbers-width-start t)
  (pixel-scroll-precision-mode t)
#+end_src
** Startup Performance
Make startup faster by reducing the frequency of garbage collection
#+begin_src elisp
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.5)
#+end_src
** Native Compilation(disabled)
#+begin_src elisp :tangle no
  ;; Silence compiler warnings as they can be pretty disruptive
  (setq native-comp-async-report-warnings-errors nil)
  ;; Set the right directory to store the native comp cache
  (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))
#+end_src
** generic
#+begin_src elisp
  ;; 定义一些启动目录，方便下次迁移修改
  (defvar nowisemacs-root-dir (file-truename "~/nowisemacs/"))
  (defvar nowisemacs-config-dir (concat nowisemacs-root-dir "init.org"))
  (defvar nowisemacs-extension-dir (concat nowisemacs-root-dir "/extensions"))

  (recentf-mode t)
  (setq use-short-answers t)
  (blink-cursor-mode -1)                  ;指针不闪动
  (setq ring-bell-function 'ignore)       ;关闭烦人的出错时的提示声
  (set-default-coding-systems 'utf-8)
  (global-hl-line-mode)
#+end_src
The following content is not enabled yet, because I want to minimize unnecessary settings as much as possible
#+begin_src elisp :tangle no
  ;; Restore emacs session.
  (setq initial-buffer-choice t)
  (run-with-timer 1 nil #'(lambda () (bury-buffer)))

  ;; 增加长行处理性能
  (setq bidi-inhibit-bpa t)
  (setq-default bidi-paragraph-direction 'left-to-right)

  ;; 增加IO性能
  (setq process-adaptive-read-buffering nil)
  (setq read-process-output-max (* 1024 1024))

  (transient-mark-mode 1)                 ;标记高亮
  (global-subword-mode 1)                 ;Word移动支持 FooBar 的格式
  (setq use-dialog-box nil)               ;never pop dialog
  (setq inhibit-startup-screen t)         ;inhibit start screen
  (setq initial-scratch-message "") ;关闭启动空白buffer, 这个buffer会干扰session恢复
  (setq-default comment-style 'indent)    ;设定自动缩进的注释风格
  (setq ring-bell-function 'ignore)       ;关闭烦人的出错时的提示声
  (setq default-major-mode 'text-mode)    ;设置默认地主模式为TEXT模式
  (setq mouse-yank-at-point t)            ;粘贴于光标处,而不是鼠标指针处
  (setq x-select-enable-clipboard t)      ;支持emacs和外部程序的粘贴
  (setq split-width-threshold nil)        ;分屏的时候使用上下分屏
  (setq inhibit-compacting-font-caches t) ;使用字体缓存，避免卡顿
  (setq confirm-kill-processes nil)       ;退出自动杀掉进程
  (setq async-bytecomp-allowed-packages nil) ;避免magit报错
  (setq word-wrap-by-category t)             ;按照中文折行
  (setq profiler-report-cpu-line-format ;让 profiler-report 第一列宽一点
        '((100 left)
          (24 right ((19 right)
                     (5 right)))))
  (setq profiler-report-memory-line-format
        '((100 left)
          (19 right ((14 right profiler-format-number)
                     (5 right)))))

  ;; (add-hook 'find-file-hook 'highlight-parentheses-mode t) ;增强的括号高亮

  (setq ad-redefinition-action 'accept)   ;不要烦人的 redefine warning
  (setq frame-resize-pixelwise t) ;设置缩放的模式,避免Mac平台最大化窗口以后右边和下边有空隙

  ;; 平滑地进行半屏滚动，避免滚动后recenter操作
  (setq scroll-step 1
        scroll-conservatively 10000)
#+end_src

* Package Management
** straight
#+begin_src elisp
  (unless (featurep 'straight)
    ;; Bootstrap straight.el
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage)))
  (setq straight-vc-git-default-clone-depth 1)
#+end_src
** straight print
Use straight-pull-report to get detailed messages after update.
#+begin_src elisp
  (defun straight-pull-report (&rest _)
    "Show fetched commit summary."
    (interactive)
    (with-current-buffer (get-buffer-create "*straight-fetch-report*")
      (read-only-mode -1)
      (erase-buffer)
      (let ((updates nil))
        (straight--map-repos
         (lambda (recipe)
           (straight--with-plist recipe (package local-repo)
             (let* ((default-directory (straight--repos-dir local-repo))
                    (commits (straight--process-output "git" "log" "..@{u}" "--oneline")))
               (unless (string-empty-p commits)
                 (push (cons package (split-string commits "\n")) updates))))))
        (mapc (lambda (update)
                (let* ((commits (cdr update)))
                  (insert
                   (propertize
                    (format "%s [%s commit%s]\n"
                            (car update)
                            (number-to-string (length commits))
                            (if (cdr commits) "s" ""))
                    'face 'font-lock-constant-face)
                   (format "  %s\n" (string-join (cdr update) "\n  ")))))
              (cl-sort updates #'string< :key #'car))
        (special-mode)
        (pop-to-buffer (current-buffer)))))
  ;; (advice-add #'straight-fetch-all :after #'straight-fetch-report)
#+end_src
** Streamlined Configuration with setup.el
#+begin_src elisp
  (straight-use-package '(setup :type git :host nil :repo "https://git.sr.ht/~pkal/setup"))
  (require 'setup)
#+end_src

*** :straight
#+begin_src elisp
  (setup-define :straight
    (lambda (recipe)
      `(unless (straight-use-package ',recipe)
         ,(setup-quit)))
    :documentation
    "Install RECIPE with `straight-use-package'.
  This macro can be used as HEAD, and will replace itself with the
  first RECIPE's package."
    :repeatable t
    :shorthand (lambda (sexp)
                 (let ((recipe (cadr sexp)))
                   (if (consp recipe)
                       (car recipe)
                     recipe))))
#+end_src
*** :pkg
#+begin_src elisp
  ;; Recipe is always a list
  ;; Install via Guix if length == 1 or :guix t is present

  (defvar dw/guix-emacs-packages '()
    "Contains a list of all Emacs package names that must be
  installed via Guix.")

  (defun dw/filter-straight-recipe (recipe)
    (let* ((plist (cdr recipe))
           (name (plist-get plist
                            :straight)))
      (cons (if (and name
                     (not (equal name t))) name (car recipe))
            (plist-put plist
                       :straight nil))))

  (setup-define :pkg (lambda
                       (&rest
                        recipe)
                       `(add-to-list 'dw/guix-emacs-packages ,(or (plist-get recipe
                                                                             :guix)
                                                                  (concat "emacs-" (symbol-name (car
                                                                                                 recipe)))))
                       `(straight-use-package ',(dw/filter-straight-recipe recipe)))
                :documentation "Install RECIPE via Guix or straight.el"
                :shorthand #'cadr)
#+end_src
*** :delay
#+begin_src elisp
  (setup-define :delay
    (lambda (&rest time)
      `(run-with-idle-timer ,(or time 0.1)
                            nil ;; Don't repeat
                            (lambda () (require ',(setup-get 'feature)))))
    :documentation "Delay loading the feature until a certain amount of idle time has passed.")
#+end_src
*** :disabled

Used to disable a package configuration, similar to =:disabled= in =use-package=.

#+begin_src elisp
  (setup-define :disabled
    (lambda ()
      `,(setup-quit))
    :documentation "Always stop evaluating the body.")
#+end_src
*** :load-after
This keyword causes a body to be executed after other packages/features are loaded:
#+begin_src elisp
  (setup-define :load-after
    (lambda (&rest features)
      (let ((body `(require ',(setup-get 'feature))))
        (dolist (feature (nreverse features))
          (setq body `(with-eval-after-load ',feature ,body)))
        body))
    :documentation "Load the current feature after FEATURES.")
#+end_src
*** :if-system
#+begin_src elisp
  (setup-define :if-system
    (lambda (systemtype)
      `(unless (eq system-type ,systemtype)
         ,(setup-quit)))
    :documentation "If SYSTEMTYPE is not the current systemtype, stop evaluating form.")
#+end_src
*** :autoload
#+begin_src elisp
  (setup-define :autoload
    (lambda (&rest funcs)
      (let ((body '())
            (feature-string (symbol-name (setup-get 'feature))))
        (dolist (single-func (nreverse funcs))
          (add-to-list 'body `(autoload ',single-func ,feature-string nil t))
          (add-to-list 'body 'progn))
        body))
    :documentation "Load the current feature after FEATURES.")

  ;; (setup (:pkg company-english-helper :host github
  ;;            :repo "manateelazycat/company-english-helper")
  ;;        (:autoload "company-english-helper" toggle-english-helper))
#+end_src
* gcmh
#+begin_src elisp
  (setup (:pkg gcmh)
    (:option gcmh-idle-delay 5
             gcmh-high-cons-threshold #x1000000) ; 16MB
    (gcmh-mode 1))
#+end_src
* Keyboard Bindings
** meow
#+begin_src elisp
  (setup (:pkg meow)
    (require 'meow)
    (:option meow-char-thing-table '(
                                     (?\( . round)
                                     (?\[ . square)
                                     (?\{ . curly)
                                     (?\" . string)
                                     (?e . symbol)
                                     (?w . window)
                                     (?b . buffer)
                                     (?p . paragraph)
                                     (?l . line)
                                     (?d . defun)
                                     (?i . indent)
                                     (?x . extend)
                                     )
             meow-use-keypad-when-execute-kbd nil
             meow-expand-exclude-mode-list nil
             meow-use-clipboard t
             meow-cursor-type-normal '(bar . 5)
             meow-cursor-type-insert '(bar . 1)
             meow-replace-state-name-list '((normal . "N")
                                            (motion . "M")
                                            (keypad . "K")
                                            (insert . "I"))
             meow-use-enhanced-selection-effect t
             )
    (defun meow-setup()
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
      (meow-motion-overwrite-define-key '("j" . meow-next)
                                        '("k" . meow-prev)
                                        '("<escape>" . ignore)
                                        ;; '("<" . sort-tab-select-prev-tab)
                                        ;; '(">" . sort-tab-select-next-tab)
                                        )
      (meow-leader-define-key
       ;; SPC j/k will run the original command in MOTION state.
       '("j" . "H-j")
       '("k" . "H-k")
       ;; Use SPC (0-9) for digit arguments.
       '("1" . meow-digit-argument)
       '("2" . meow-digit-argument)
       '("3" . meow-digit-argument)
       '("4" . meow-digit-argument)
       '("5" . meow-digit-argument)
       '("6" . meow-digit-argument)
       '("7" . meow-digit-argument)
       '("8" . meow-digit-argument)
       '("9" . meow-digit-argument)
       '("0" . meow-digit-argument)
       '("/" . meow-keypad-describe-key)
       '("?" . meow-cheatsheet))
      (meow-normal-define-key '("0" . meow-expand-0)
                              '("9" . meow-expand-9)
                              '("8" . meow-expand-8)
                              '("7" . meow-expand-7)
                              '("6" . meow-expand-6)
                              '("5" . meow-expand-5)
                              '("4" . meow-expand-4)
                              '("3" . meow-expand-3)
                              '("2" . meow-expand-2)
                              '("1" . meow-expand-1)
                              '("a" . meow-append)
                              ;;'("A" . meow-open-below)
                              '("b" . meow-back-word)
                              '("B" . meow-back-symbol)
                              '("c" . meow-change)
                              '("C" . meow-change-save)
                              '("d" . meow-kill)
                              '("e" . meow-next-word)
                              '("E" . meow-next-symbol)
                              '("f" . meow-find)
                              '("F" . meow-find-expand)

                              '("g d" . xref-find-definitions)
                              '("g D" . xref-find-references)
                              '("g m" . consult-mark)

                              '("G" . meow-grab)
                              '("h" . meow-left)
                              '("H" . meow-left-expand)
                              '("i" . meow-insert)
                              '("I" . meow-open-above)
                              '("j" . meow-next)
                              '("J" . meow-next-expand)
                              '("k" . meow-prev)
                              '("K" . meow-prev-expand)
                              '("l" . meow-right)
                              '("L" . meow-right-expand)
                              '("m" . meow-mark-word)
                              '("M" . meow-mark-symbol)
                              '("n" . meow-search)
                              ;; '("N" . meow-pop-search)
                              '("N" . meow-pop-selection)

                              '("o" . meow-open-below)
                              '("O" . meow-open-above)
                              '("p" . meow-yank)
                              '("P" . meow-yank-pop)
                              '("q" . meow-quit)
                              '("Q" . meow-goto-line)
                              '("r" . meow-replace)
                              '("R" . meow-swap-grab)
                              '("s" . meow-line)
                              '("S" . meow-kmacro-lines)
                              '("t" . meow-till)
                              '("T" . meow-till-expand)
                              '("u" . meow-undo)
                              '("U" . undo-redo)
                              '("v" . meow-visit)
                              '("V" . meow-kmacro-matches)
                              '("w" . meow-block)
                              '("W" . meow-to-block)
                              '("x" . meow-delete)
                              '("X" . meow-backward-delete)
                              '("y" . meow-save)
                              '("Y" . meow-sync-grab)
                              '("z" . meow-pop-all-selection)
                              '("Z" . meow-pop-search)
                              '("&" . meow-query-replace)
                              '("%" . meow-query-replace-regexp)
                              '("-" . negative-argument)
                              '(";" . meow-reverse)
                              '("{" . meow-inner-of-thing)
                              '("}" . meow-bounds-of-thing)
                              '("[" . meow-beginning-of-thing)
                              '("]" . meow-end-of-thing)
                              '("<" . sort-tab-select-prev-tab)
                              '(">" . sort-tab-select-next-tab)
                              '("." . repeat)
                              '("," . meow-join)
                              '("\\" . quoted-insert)
                              ;; '("<escape>" . meow-cancel)
                              '("<escape>" . ignore)
                              '("!" . meow-start-kmacro-or-insert-counter)
                              '("@" . meow-end-or-call-kmacro)
                              '("'" . meow-comment)
                              '("/" . meow-last-buffer)))
    (meow-global-mode 1)

    ;; meow-setup 用于自定义按键绑定，可以直接使用下文中的示例
    (meow-setup)
    ;; 如果你需要在 NORMAL 下使用相对行号（基于 display-line-numbers-mode）
    ;; (meow-setup-line-number)
    ;; 如果你需要自动的 mode-line 设置（如果需要自定义见下文对 `meow-indicator' 说明）
    ;; (meow-setup-indicator)
    ;; (setq which-key-show-transient-maps t)

    )
#+end_src
** which-key
#+begin_src elisp
  (setup (:pkg which-key)
    (which-key-mode)
    (setq which-key-idle-delay 0.1))
#+end_src
** keybinding
*** lewis-define-key
#+begin_src elisp
  (defun lewis/define-leader-key (key-alist &optional key-prefix)
    (let (key def)
      (setq keymap meow-leader-keymap)
      (if key-prefix
          (setq key-prefix (concat key-prefix " "))
        (setq key-prefix ""))
      (dolist (element key-alist)
        (setq key (car element))
        (setq def (cdr element))
        (cond ((stringp key) (setq key (read-kbd-macro (concat key-prefix key))))
              ((vectorp key) nil)
              (t (signal 'wrong-type-argument (list 'array key))))
        (define-key keymap key def))))
#+end_src
*** keys
#+begin_src elisp
  ;;; lewisliu
  (lewis/define-leader-key
   '(;; youdao
     ("y p" . youdao-dictionary-search-at-point-posframe)
     ("y s" . youdao-dictionary-search)
     ("y i" . youdao-dictionary-search-from-input)
     ("y r" . youdao-dictionary-search-and-replace)
     ;; citre
     ("c a" . citre-ace-peek)
     ("c j" . citre-jump)
     ("c p" . citre-peek)
     ("c J" . citre-jump-back)
     ("c u" . citre-update-this-tags-file)
     ("c r" . citre-peek-restore)
     ("c s" . citre-peek-save-session)
     ("c l" . citre-peek-load-session)
     ;; aweshell
     ("a a" . aweshell-toggle)
     ("a d" . aweshell-dedicated-toggle)
     ("a b" . aweshell-switch-buffer)
     ("a s" . aweshell-search-history)
     ;; insert-translated
     ("i i" . insert-translated-name-insert)
     ("i r" . insert-translated-name-replace)

     ;; imenu-list
     ("l" . imenu-list-smart-toggle)
     ;; org-download
     ("d" . org-download-screenshot)
     ;; english help
     ("h c" . toggle-company-english-helper)
     ("h f" . english-teacher-follow-mode)
     ) "e")

  ;;; search
  (lewis/define-leader-key '(
                             ("s" . consult-line)
                             ("b" . consult-buffer)
                             ("d" . consult-ripgrep)
                             ("D" . lewis/ripgrep-search-other-dir)
                             ("f" . consult-find)
                             ) "s")

  ;;; find-file
  (defun find-config-file()
    (interactive)
    (find-file nowisemacs-config-dir))
  (lewis/define-leader-key '(
                             ("r" . consult-recent-file)
                             ("p" . find-config-file)
                             ) "f")
  ;;; notes
  ;;roam
  (lewis/define-leader-key '(
                             ("D" . org-roam-demote-entire-buffer)
                             ("f" . org-roam-node-find)
                             ("F" . org-roam-ref-find)
                             ("g" . org-roam-graph)
                             ("i" . org-roam-node-insert)
                             ("I" . org-id-get-create)
                             ("m" . org-roam-buffer-toggle)
                             ("M" . org-roam-buffer-display-dedicated)
                             ("n" . org-roam-capture)
                             ("r" . org-roam-refile)
                             ("R" . org-roam-link-replace-all)
                             ;; date
                             ("d b" . org-roam-dailies-goto-previous-note)
                             ("d d" . org-roam-dailies-goto-date)
                             ("d D" . org-roam-dailies-capture-date)
                             ("d f" . org-roam-dailies-goto-next-note)
                             ("d m" . org-roam-dailies-goto-tomorrow)
                             ("d M" . org-roam-dailies-capture-tomorrow)
                             ("d n" . org-roam-dailies-capture-today)
                             ("d t" . org-roam-dailies-goto-today)
                             ("d T" . org-roam-dailies-capture-today)
                             ("d y" . org-roam-dailies-goto-yesterday)
                             ("d Y" . org-roam-dailies-capture-yesterday)
                             ("d -" . org-roam-dailies-find-directory)
                             ;; "node properties"
                             ("o a" . org-roam-alias-add)
                             ("o A" . org-roam-alias-remove)
                             ("o t" . org-roam-tag-add)
                             ("o T" . org-roam-tag-remove)
                             ("o r" . org-roam-ref-add)
                             ("o R" . org-roam-ref-remove)
                             ) "n r")
  (lewis/define-leader-key '(
                             ("e" . org-noter)
                             ) "n")
  ;;; time
  (lewis/define-leader-key '(
                             ("t" . org-pomodoro)
                             ) "t")
  ;;a agenda
  (lewis/define-leader-key '(
                             ("a" . org-agenda)
                             ) "a")
  ;;p persp (project)
  (lewis/define-leader-key '(
                             ("". perspective-map)
                             ) "TAB")

#+end_src
* UI
** Font
#+begin_src elisp
    ;; (set-face-attribute 'default nil :family "yaheiInconsolata" :height 140)
    (set-face-attribute 'default nil :family "InconsolataGo QiHei NF" :height 140)
    ;; Proportionately spaced typeface
    ;; (set-face-attribute 'variable-pitch nil :family "Helvetica" :height 1.0)

    ;; Monospaced typeface
    ;; (set-face-attribute 'fixed-pitch nil :family "yaheiInconsolata" :height 1.0)
    (set-face-attribute 'fixed-pitch nil :family "InconsolataGo QiHei NF" :height 1.0)
#+end_src
** Theme
#+begin_src elisp
  (setup (:pkg modus-themes :type built-in)
    (:option modus-themes-org-blocks 'tinted-background
             modus-themes-headings '((t . (background overline rainbow)))
             modus-themes-mode-line '(3d)
             modus-themes-intense-markup t
             modus-themes-hl-line '(intense accented)
             modus-themes-paren-match '(intense bold underline)
             modus-themes-subtle-line-numbers t
             )
    (load-theme 'modus-vivendi))
#+end_src
** line number
#+begin_src elisp
  (setq line-number-display-limit large-file-warning-threshold)
  (setq line-number-display-limit-width 1000)

  (dolist (hook (list
                 'c-mode-common-hook
                 'c-mode-hook
                 'emacs-lisp-mode-hook
                 'lisp-interaction-mode-hook
                 'lisp-mode-hook
                 'java-mode-hook
                 'asm-mode-hook

                 'haskell-mode-hook
                 'rcirc-mode-hook
                 'erc-mode-hook
                 'sh-mode-hook
                 'makefile-gmake-mode-hook
                 'python-mode-hook
                 'js-mode-hook
                 'html-mode-hook
                 'css-mode-hook
                 'tuareg-mode-hook
                 'go-mode-hook
                 'coffee-mode-hook
                 'qml-mode-hook
                 'markdown-mode-hook
                 'slime-repl-mode-hook
                 'package-menu-mode-hook
                 'cmake-mode-hook
                 'php-mode-hook
                 'web-mode-hook
                 'coffee-mode-hook
                 'sws-mode-hook
                 'jade-mode-hook
                 'vala-mode-hook
                 'rust-mode-hook
                 'ruby-mode-hook
                 'qmake-mode-hook
                 'lua-mode-hook
                 'swift-mode-hook
                 'llvm-mode-hook
                 'conf-toml-mode-hook
                 'nxml-mode-hook
                 'nim-mode-hook
                 'org-mode-hook
                 ))
    (add-hook hook (lambda () (display-line-numbers-mode))))
#+end_src
** all-the-icons
*** all-the-icons
#+begin_src elisp
  (setup (:pkg all-the-icons)
    (:option all-the-icons-scale-factor 1.0)
    )
  (setup (:pkg all-the-icons-completion)
    (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))
#+end_src
** rainbow-delimiters
#+begin_src elisp
  (setup (:pkg rainbow-delimiters)
    (:hook-into prog-mode)
    )
#+end_src
** diff-hl
#+begin_src elisp
  (setup (:pkg diff-hl)
    (global-diff-hl-mode)
    (diff-hl-margin-mode)
    )
#+end_src
** emacs-dashboard
#+begin_src elisp
  (setup (:pkg dashboard)
    (:option dashboard-items '((recents . 5)
                               ;; (agenda . 5)
                               (bookmarks . 5)
                               ;; (projects . 5)
                               )
             ;; dashboard-set-heading-icons t
             dashboard-center-content t
             dashboard-set-init-info t
             )
    (dashboard-setup-startup-hook)
    ;; (add-to-list 'dashboard-items '(agenda) t)
    )
#+end_src
** doom-modeline
#+begin_src elisp
  (setup (:pkg doom-modeline)
    (:option doom-modeline-window-width-limit fill-column
             doom-modeline-height 20
             doom-modeline-hud t
             ;; doom-modeline-icon nil
             doom-modeline-unicode-fallback t
             )
    (:hook-into after-init)
    )
#+end_src
* General Configuration
** backup, super-save
#+begin_src elisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)

  (setup (:pkg super-save)
    (:delay)
    (super-save-mode 1)
    (setq super-save-auto-save-when-idle t)
    )
#+end_src
** 自动换行
#+begin_src elisp
  (setq fill-column 120)          ;默认显示 100列就换行
  (setq word-wrap t)
  (add-hook 'text-mode-hook 'visual-line-mode)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src
** TRAMP
#+begin_src elisp
  (setq tramp-default-method "ssh")
#+end_src
** Automatically clean whitespace
#+begin_src elisp
  (setup (:pkg ws-butler)
    (:hook-into text-mode prog-mode))
#+end_src
* 补全
** Completions with Vertico
#+begin_src elisp
  (setup (:pkg vertico :host github :repo "minad/vertico" :files ("*.el" "extensions/*.el"))
    (:option vertico-cycle t)
    (:with-mode vertico
      (:bind [backspace] vertico-directory-delete-char))
    (vertico-mode)
    )
#+end_src
** Orderless
#+begin_src elisp
  (setup (:pkg orderless)
    (require 'orderless)
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src
** savehist
#+begin_src elisp
  (setup savehist
    (savehist-mode))
#+end_src
** Consult Commands
*** consult
#+begin_src elisp
  (setup (:pkg consult)
    (:with-map minibuffer-local-map
      (:bind "C-r" consult-history))
    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)
    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (project-roots)
    (setq consult-project-root-function
          (lambda ()
            (when-let (project (project-current))
              (car (project-roots project)))))
    )
#+end_src
*** search other cwd
#+begin_src elisp
  (defun lewis/ripgrep-search-other-dir()
    (interactive)
    (let ((current-prefix-arg '(-1)))
      (call-interactively 'consult-ripgrep)))
#+end_src
** Marginalia
#+begin_src elisp
  (setup (:pkg marginalia)
    (:option marginalia-annotators '(marginalia-annotators-heavy
                                     marginalia-annotators-light
                                     nil))
    (marginalia-mode))
#+end_src
** embark
#+begin_src elisp
  (setup (:pkg embark-consult)
    (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode)
    )

  (setup (:pkg embark)
    (:also-load embark-consult)
    (:global "C-S-a" embark-act)

    ;; Show Embark actions via which-key
    (setq embark-action-indicator
          (lambda (map)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator))

  (setup (:pkg wgrep))
#+end_src
** corfu(instead of company)
#+begin_src elisp
  (setup (:pkg corfu)
    (:option
     ;; Optional customizations
     corfu-cycle t                ;; Enable cycling for `corfu-next/previous'
     corfu-auto t                 ;; Enable auto completion
     ;; (corfu-quit-at-boundary t)     ;; Automatically quit at word boundary
     corfu-quit-no-match t        ;; Automatically quit if there is no match
     corfu-preview-current nil    ;; Disable current candidate preview
     corfu-echo-documentation nil ;; Disable documentation in the echo area
     corfu-auto-prefix 2
     )
    (:with-map corfu-map
      (:bind [tab] corfu-next
             [backtab] corfu-previous
             "<escape>" corfu-quit))
        (corfu-global-mode)
    )
  ;; corfu backend
  (setup (:pkg cape)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-tex)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-keyword))

  ;; Enable Corfu completion UI
  (setup (:pkg corfu-doc :host github :repo "galeo/corfu-doc")
    (:hook-into corfu-mode))

  ;; (setup (:pkg svg-lib :type built-in)) ;; built-in has little icons
  (setup (:pkg kind-icon)
    (:load-after corfu)
    (:option kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    (:when-loaded
      (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)
      ))
#+end_src
** yasnippet
#+begin_src elisp
  (setup (:pkg yasnippet)
    (:delay)
    (require 'yasnippet)
    (:option yas-snippet-dirs '("~/nowisemacs/snippets"))
    (yas-global-mode 1))
  (setup (:pkg yasnippet-snippets)
    (:delay))
#+end_src
* Window Management
** winner-mode
回到之前的windows 布局
#+begin_src elisp
  (winner-mode t)
#+end_src
** popper
popper 用来控制临时buffer 的弹出, 保证它们不会破坏已有的 windows 结构
#+begin_src elisp
    (setup (:pkg popper)
      (:option popper-reference-buffers         '("\\*Messages\\*"
                                                  "Output\\*$"
                                                  "\\*Async Shell Command\\*"
                                                  help-mode
                                                  helpful-mode
                                                  compilation-mode
                                                  youdao-dictionary-mode)
               )
      (:global "C-`" popper-toggle-latest
               "M-`" popper-cycle
               "C-M-`" popper-toggle-type
               )
      (popper-mode +1)
      (popper-echo-mode +1)
      )
#+end_src
** 移动
*** avy
全局任意位置跳跃
#+begin_src elisp
  (setup (:pkg avy)
    (:global "M-j" avy-goto-word-1))
#+end_src
*** jump-back
#+begin_src elisp
  (defun my--push-point-to-xref-marker-stack (&rest r)
    (xref-push-marker-stack (point-marker))) ;; must autoload this command in xref
  (dolist (func '(find-function
                  consult-imenu
                  consult-ripgrep
                  consult-line
                  consult-find
                  find-file
                  citre-jump))
    (advice-add func :before 'my--push-point-to-xref-marker-stack))
#+end_src
* 输入
** pyim
#+begin_src elisp
  (setup (:pkg posframe))
  (setup (:pkg pyim)
    (:option pyim-dicts '((:name "lewis_pyim_dict" :file "~/Documents/emacs/pyim-dict/lewis_pyim_dict.pyim")
                          (:name "lewis_big_dict" :file "~/Documents/emacs/pyim-dict/pyim-bigdict.pyim.gz"))
             pyim-default-scheme 'quanpin
             pyim-punctuation-translate-p '(no yes auto)
             pyim-page-tooltip 'posframe
             pyim-page-length 5
             ;;              (setq-default pyim-punctuation-translate-p '(yes no auto))   ;使用全角标点。
             ;; (setq-default pyim-punctuation-translate-p '(no yes auto))   ;使用半角标点。
             ;; (setq-default pyim-punctuation-translate-p '(auto yes no))   ;中文使用全角标点，英文使用半角标点。
             )
    (:when-loaded
      (set-default 'pyim-punctuation-half-width-functions
                   '(pyim-probe-punctuation-line-beginning pyim-probe-punctuation-after-punctuation))
      (pyim-isearch-mode 1)
      (defalias 'pyim-probe-meow-normal-mode
        #'(lambda nil
            (meow-normal-mode-p)))
      (set-default 'pyim-english-input-switch-functions
                   '(pyim-probe-auto-english pyim-probe-isearch-mode pyim-probe-program-mode pyim-probe-org-structure-template pyim-probe-org-latex-mode pyim-probe-meow-normal-mode))

      (defalias 'my-orderless-regexp
        #'(lambda
            (orig_func component)
            (let
                ((result
                  (funcall orig_func component)))
              (pyim-cregexp-build result))))
      (advice-add 'orderless-regexp :around #'my-orderless-regexp)
      )
    (setq default-input-method "pyim")
    )
#+end_src
* File and Browsing
** file browsing
*** dirvish
#+begin_src elisp
  (setup (:pkg dirvish)
    (:when-loaded
      (dirvish-override-dired-mode)))
#+end_src
*** diredfl
#+begin_src elisp
  (setup (:pkg diredfl)
    (:hook-into dired-mode))
#+end_src
*** dired-subtree
#+begin_src elisp
  (setup (:pkg dired-subtree)
    (:load-after dired)
    (:option dired-subtree-line-prefix "     ")
    (:with-map dired-mode-map
      (:bind "TAB" dired-subtree-cycle)
      )
    )
#+end_src
*** fd-dired
#+begin_src elisp
  (setup (:pkg fd-dired))
#+end_src
*** treemacs
#+begin_src elisp
  (setup (:pkg treemacs))
#+end_src
** structure browsing
*** imenu-list
#+begin_src elisp
  (setup (:pkg imenu-list)
    (:autoload imenu-list-smart-toggle)
    (:option imenu-list-focus-after-activate t
             imenu-list-auto-resize t
             imenu-list-position 'left
             )
    )
#+end_src
*** outshine
#+begin_src elisp
  (setup (:pkg outshine :host github :repo "alphapapa/outshine")
    (:option outline-minor-mode-prefix "\M-#"))
#+end_src
** perspective
#+begin_src elisp
  (setup (:pkg perspective)
    (:option persp-initial-frame-name "Main"
             persp-mode-prefix-key ""
             ;; persp-mode-prefix-key
             )
    ;; Running `persp-mode' multiple times resets the perspective list...
    (unless (equal persp-mode t)
      (persp-mode)))
#+end_src
** auto-revert changed files
#+begin_src elisp
;; Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)
;; Revert buffers when the underlying file has changed
(global-auto-revert-mode 1)
#+end_src
** bufler
#+begin_src elisp
  (setup (:pkg bufler :host github :repo "alphapapa/bufler.el")
    (:global "C-x C-b" #'bufler)
    )
#+end_src
* shell
** aweshell
#+begin_src elisp
  (setup (:pkg aweshell :host github :repo "manateelazycat/aweshell")
    (:option epe-path-stype 'single
             )
    (:autoload aweshell-toggle)
    (:autoload aweshell-dedicated-toggle)
    )
#+end_src
** vterm
#+begin_src elisp
  (setup (:pkg vterm))
#+end_src
** dtache
* git
** magit
#+begin_src elisp
  (setup (:pkg magit))
#+end_src
** blamer
#+begin_src elisp
  (setup (:pkg blamer :host github :repo "artawower/blamer.el")
    (:option blamer-idle-time 0.3
             blamer-min-offset 70)
    ;; (:delay)
    ;; (:when-loaded
    ;; (global-blamer-mode 1))
    )
#+end_src
* 程序语言
** elisp
*** helpful
#+begin_src elisp
  (setup (:pkg helpful)
    (:global "C-h f" #'helpful-callable
             "C-h v" #'helpful-variable
             "C-h k" #'helpful-key
             "C-c C-d" #'helpful-at-point
             "C-h F" #'helpful-function
             "C-h C" #'helpful-command))
#+end_src
*** elisp-demos
#+begin_src elisp
  (setup (:pkg elisp-demos)
    (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update)
    )
#+end_src
*** elispfl
#+begin_src elisp
  (setup (:pkg elispfl :host github :repo "cireu/elispfl")
    (:hook-into emacs-lisp-mode ielm)
    )
#+end_src
** quickrun
#+begin_src elisp
  (setup (:pkg quickrun))
#+end_src
** tree-sitter
#+begin_src elisp :tangle no
  (setup tree-sitter-langs
    (:if-system 'gnu/linux)
    (:pkg tree-sitter-langs)
    )
  (setup tree-sitter
    (:if-system 'gnu/linux)
    (:pkg tree-sitter)
    ;; (:hook-into prog-mode)
    (:when-loaded
      (require 'tree-sitter-langs)
      (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
      )
    )
#+end_src
** lsp mode
*** eglot
#+begin_src elisp
  ;; use built-in package dep
  (setup (:pkg project :type built-in))
  (setup (:pkg xref :type built-in)
    (:autoload xref-push-marker-stack)) ;; autoload this command for jump-back
  (setup (:pkg flymake :type built-in))
  (setup (:pkg jsonrpc :type built-in))
  (setup (:pkg eldoc :type built-in))

  (setup (:pkg markdown-mode))
  (setup (:pkg eldoc-box)
    (add-hook 'eglot--managed-mode-hook #'eldoc-box-hover-at-point-mode t)
    )
  (setup (:pkg eglot))
  ;; (setup (:pkg lsp-mode))
  ;; (setup (:pkg lsp-treemacs))
  ;; (setup (:pkg lsp-ui)
  ;;   (:hook-into lsp-mode))
  ;; (setup (:pkg dap-mode)
  ;;   (:when-loaded
  ;;     (require 'dap-gdb-lldb)
  ;;     (require 'dap-cpptools)
  ;;     (require 'dap-python)
  ;;     ))

#+end_src
*** lsp-org-special
#+begin_src elisp :tangle no
  (cl-defmacro lsp-org-babel-enable (lang)
    "Support LANG in org source code block."
    (cl-check-type lang stringp)
    (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
           (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
      `(progn
         (defun ,intern-pre (info)
           (let ((file-name (->> info caddr (alist-get :file))))
             (unless file-name
               (setq file-name (make-temp-file "babel-lsp-")))
             (setq buffer-file-name file-name)
             (eglot-ensure)))
         ;; (lsp-deferred)))
         (put ',intern-pre 'function-documentation
              (format "Enable lsp-mode in the buffer of org source block (%s)."
                      (upcase ,lang)))
         (if (fboundp ',edit-pre)
             (advice-add ',edit-pre :after ',intern-pre)
           (progn
             (defun ,edit-pre (info)
               (,intern-pre info))
             (put ',edit-pre 'function-documentation
                  (format "Prepare local buffer environment for org source block (%s)."
                          (upcase ,lang))))))))
  (defvar org-babel-lang-list
    '("go" "python" "ipython" "bash" "sh" "C++" "C" "verilog"))
  (dolist (lang org-babel-lang-list)
    (eval `(lsp-org-babel-enable ,lang)))
#+end_src
** conda
#+begin_src elisp
  (setup (:pkg conda)
    ;; (:delay)
    (:when-loaded
      (when (eq system-type 'darwin)
        (custom-set-variables '(conda-anaconda-home "/Users/liuyi/miniforge3"))
        (setq conda-env-home-directory (expand-file-name "~/miniforge3/"))
        )
      (when (eq system-type 'gnu/linux)
        ;; 要用绝对路径
        (custom-set-variables '(conda-anaconda-home "/home/lewisliu/miniconda3"))
        (setq conda-env-home-directory (expand-file-name "/home/lewisliu/miniconda3/"))
        )
      ;; interactivate shell support
      (conda-env-initialize-interactive-shells)
      ;; eshell support
      (conda-env-initialize-eshell)
      ;; (conda-env-autoactivate-mode t)
      )
    )
#+end_src
** citre
#+begin_src elisp
  (setup (:pkg citre)
    ;; This is needed in `:init' block for lazy load to work.
    (require 'citre-config)
    (:option
     ;; citre-project-root-function #'projectile-project-root
     ;; See the "Create tags file" section above to know these options
     citre-use-project-root-when-creating-tags t
     citre-prompt-language-for-ctags-command t
     ;; By default, when you open any file, and a tags file can be found for it,
     ;; `citre-mode' is automatically enabled.  If you only want this to work for
     ;; certain modes (like `prog-mode'), set it like this.
     citre-auto-enable-citre-mode-modes '(prog-mode)))
#+end_src
** symbol-overlay
#+begin_src elisp
  (setup (:pkg symbol-overlay)
    (:autoload symbol-overlay-put)
    )
#+end_src
** graphviz-dot-mode
#+begin_src elisp
  (setup (:pkg graphviz-dot-mode)
    (:file-match "\\.dot\\'")
    (:option graphviz-dot-indent-width 4)
    (:when-loaded
      (require 'company-graphviz-dot)
      )
    )
#+end_src
** beancount
#+begin_src elisp
  (setup (:pkg beancount :host github :repo "beancount/beancount-mode")
    (:file-match "\\.beancount\\'")
    )
#+end_src
** latex
* Org Mode
** org-mode
#+begin_src elisp
  (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "ℱ")
                                         ("#+END_SRC" . "Ⅎ")
                                         ("#+begin_src" . "ℱ")
                                         ("#+end_src" . "Ⅎ")))
  (setup (:pkg org :type built-in)
    (setq org-directory "~/Documents/emacs/orgmode/")
    (:option org-adapt-indentation t
             org-startup-indented t
             org-hide-emphasis-markers t
             org-imenu-depth 5
             ;; org-startup-folded t
             org-return-follows-link t
             fill-column 120
             org-log-done 'time ;; 记录完成时间
             org-blank-before-new-entry '((heading . nil)
                                          (plain-list-item . nil))

             org-image-actual-width 600
             org-confirm-babel-evaluate nil
             org-src-window-setup 'split-window-below
             org-refile-targets '(("~/Documents/emacs/orgmode/roam/20211204000712-refile_index.org" . (:maxlevel . 9))
                                  ))
    (:file-match "\\.org\\'")
    (:hook 'prettify-symbols-mode org-num-mode)
    (:when-loaded
      (require 'org-tempo) ;; so that <s is useful
      (setq-default org-todo-keywords
                    (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                            (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))
      (setq-default org-todo-keyword-faces
                    (quote (("TODO" :foreground "red" :weight bold)
                            ("NEXT" :foreground "blue" :weight bold)
                            ("DONE" :foreground "forest green" :weight bold)
                            ("WAITING" :foreground "orange" :weight bold)
                            ("HOLD" :foreground "magenta" :weight bold)
                            ("CANCELLED" :foreground "forest green" :weight bold)
                            ("MEETING" :foreground "forest green" :weight bold)
                            ("PHONE" :foreground "forest green" :weight bold))))
      ;; 导出相关的设置

      (setq org-latex-pdf-process
            '("xelatex -interaction nonstopmode %f"
              "bibtex %b"
              "xelatex -interaction nonstopmode %f"
              "xelatex -interaction nonstopmode %f"))

      (defface my-org-emphasis-bold
        '((default :inherit bold)
          (((class color) (min-colors 88) (background light))
           :foreground "pale violet red")
          (((class color) (min-colors 88) (background dark))
           :foreground "pale violet red"))
        "My bold emphasis for Org.")

      (defface my-org-emphasis-italic
        '((default :inherit italic)
          (((class color) (min-colors 88) (background light))
           :foreground "green3")
          (((class color) (min-colors 88) (background dark))
           :foreground "green3"))
        "My italic emphasis for Org.")

      (defface my-org-emphasis-underline
        '((default :inherit underline)
          (((class color) (min-colors 88) (background light))
           :foreground "#813e00")
          (((class color) (min-colors 88) (background dark))
           :foreground "#d0bc00"))
        "My underline emphasis for Org.")

      (setq org-emphasis-alist
            '(("*" my-org-emphasis-bold)
              ("/" my-org-emphasis-italic)
              ("_" underline)
              ("=" org-verbatim verbatim)
              ("~" org-code verbatim)
              ("+" (:strike-through t))
            ))

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (julia . t)
       (python . t)
       (dot . t)
       (latex . t)
       ;; (jupyter . t)
       ))
    ))
#+end_src
** org-bars
#+begin_src elisp
  (setup (:pkg org-bars :host github :repo "tonyaldon/org-bars")
    (:option org-bars-color-options '(:only-one-color t
                                                      :bar-color "#4C4A4D")
             org-bars-stars '(:empty "◉"
                                     :invisible "▶"
                                     :visible "∇"))
    (:load-after org)
    (:hook-into org-mode)
    )
#+end_src
** org-appear
#+begin_src elisp
  (setup (:pkg org-appear :host github :repo "awth13/org-appear")
    (:hook-into org-mode)
    )
#+end_src
** org-download
#+begin_src elisp
  (setup (:pkg org-download)
    (:option org-download-method 'directory
             org-download-screenshot-basename "screenshot.jpg"
             org-download-image-dir "~/Documents/emacs/orgmode/PicturesForAll/org_download_images")
    (:when-loaded
      (when (eq system-type 'gnu/linux)
        (setq-default org-download-screenshot-method "spectacle"))
      (when (eq system-type 'darwin)
        (setq org-download-screenshot-method "screencapture -i %s")))
    (:autoload org-download-screenshot)
    )
#+end_src
** org-roam
*** org-roam
#+begin_src elisp
  (setup (:pkg emacsql))
  (setq org-roam-v2-ack t)
  (setq org-roam-directory "~/Documents/emacs/orgmode/roam/")
  (setq org-roam-dailies-directory "~/Documents/emacs/orgmode/roam")
  (setup (:pkg org-roam)
    (:option org-roam-mode-section-functions
             (list #'org-roam-backlinks-section
                   #'org-roam-reflinks-section
                   ;; #'org-roam-unlinked-references-section
                   )
             org-roam-completion-everywhere t
             org-roam-db-gc-threshold most-positive-fixnum
             org-roam-node-display-template "${doom-hierarchy:*} ${tags:37}"
             )
    (:when-loaded
      (org-roam-db-autosync-mode)

      (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node))
        "Return the value of \"#+title:\" (if any) from file that NODE resides in.
  If there's no file-level title in the file, return empty string."
        (or (if (= (org-roam-node-level node) 0)
                (org-roam-node-title node)
              (org-roam-get-keyword "TITLE" (org-roam-node-file node)))
            ""))

      (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node))
        "Return hierarchy for NODE, constructed of its file title, OLP and direct title.
    If some elements are missing, they will be stripped out."
        (let ((title     (org-roam-node-title node))
              (olp       (org-roam-node-olp   node))
              (level     (org-roam-node-level node))
              (filetitle (org-roam-node-doom-filetitle node))
              (separator (propertize " > " 'face 'shadow)))
          (cl-case level
            ;; node is a top-level file
            (0 filetitle)
            ;; node is a level 1 heading
            (1 (concat (propertize filetitle 'face '(shadow italic))
                       separator title))
            ;; node is a heading with an arbitrary outline path
            (t (concat (propertize filetitle 'face '(shadow italic))
                       separator (propertize (string-join olp " > ") 'face '(shadow italic))
                       separator title)))))


      (add-to-list 'display-buffer-alist
                   '("\\*org-roam\\*"
                     (display-buffer-in-side-window)
                     (side . right)
                     (slot . 0)
                     (window-width . 0.25)
                     (window-parameters . ((no-other-window . t)
                                           (no-delete-other-windows . t)))))
      (org-roam-buffer-toggle)
      ))
#+end_src
*** org-roam-ui
#+begin_src elisp
  (setup (:pkg websocket))
  (setup (:pkg simple-httpd))
  (setup (:pkg org-roam-ui :host github :repo "org-roam/org-roam-ui" :files ("*.el" "out")))
#+end_src
*** org-roam-timestamps
#+begin_src elisp
  (setup (:pkg org-roam-timestamps)
    (:hook-into org-roam-mode)
    )
#+end_src
*** org-roam-agenda
#+begin_src elisp
  (defun vulpea-project-p ()
    "Return non-nil if current buffer has any todo entry.
  TODO entries marked as done are ignored, meaning the this
  function returns nil if current buffer contains only completed
  tasks."
    (seq-find                                 ; (3)
     (lambda (type)
       (eq type 'todo))
     (org-element-map                         ; (2)
         (org-element-parse-buffer 'headline) ; (1)
         'headline
       (lambda (h)
         (org-element-property :todo-type h)))))

  (defun vulpea-project-update-tag ()
    "Update PROJECT tag in the current buffer."
    (when (and (not (active-minibuffer-window))
               (vulpea-buffer-p))
      (save-excursion
        (goto-char (point-min))
        (let* ((tags (vulpea-buffer-tags-get))
               (original-tags tags))
          (if (vulpea-project-p)
              (setq tags (cons "project" tags))
            (setq tags (remove "project" tags)))

          ;; cleanup duplicates
          (setq tags (seq-uniq tags))

          ;; update tags if changed
          (when (or (seq-difference tags original-tags)
                    (seq-difference original-tags tags))
            (apply #'vulpea-buffer-tags-set tags))))))

  (defun vulpea-buffer-p ()
    "Return non-nil if the currently visited buffer is a note."
    (and buffer-file-name
         (string-prefix-p
          (expand-file-name (file-name-as-directory org-roam-directory))
          (file-name-directory buffer-file-name))))

  (defun vulpea-project-files ()
    "Return a list of note files containing 'project' tag." ;
    (seq-uniq
     (seq-map
      #'car
      (org-roam-db-query
       [:select [nodes:file]
                :from tags
                :left-join nodes
                :on (= tags:node-id nodes:id)
                :where (like tag (quote "%\"project\"%"))]))))

  (defun vulpea-agenda-files-update (&rest _)
    "Update the value of `org-agenda-files'."
    (setq org-agenda-files (vulpea-project-files)))

  (add-hook 'find-file-hook #'vulpea-project-update-tag)
  (add-hook 'before-save-hook #'vulpea-project-update-tag)

  (advice-add 'org-agenda :before #'vulpea-agenda-files-update)

  ;; functions borrowed from `vulpea' library
  ;; https://github.com/d12frosted/vulpea/blob/6a735c34f1f64e1f70da77989e9ce8da7864e5ff/vulpea-buffer.el

  (defun vulpea-buffer-tags-get ()
    "Return filetags value in current buffer."
    (vulpea-buffer-prop-get-list "filetags" " "))

  (defun vulpea-buffer-tags-set (&rest tags)
    "Set TAGS in current buffer.
  If filetags value is already set, replace it."
    (vulpea-buffer-prop-set "filetags" (string-join tags " ")))

  (defun vulpea-buffer-tags-add (tag)
    "Add a TAG to filetags in current buffer."
    (let* ((tags (vulpea-buffer-tags-get))
           (tags (append tags (list tag))))
      (apply #'vulpea-buffer-tags-set tags)))

  (defun vulpea-buffer-tags-remove (tag)
    "Remove a TAG from filetags in current buffer."
    (let* ((tags (vulpea-buffer-tags-get))
           (tags (delete tag tags)))
      (apply #'vulpea-buffer-tags-set tags)))

  (defun vulpea-buffer-prop-set (name value)
    "Set a file property called NAME to VALUE in buffer file.
  If the property is already set, replace its value."
    (setq name (downcase name))
    (org-with-point-at 1
      (let ((case-fold-search t))
        (if (re-search-forward (concat "^#\\+" name ":\\(.*\\)")
                               (point-max) t)
            (replace-match (concat "#+" name ": " value) 'fixedcase)
          (while (and (not (eobp))
                      (looking-at "^[#:]"))
            (if (save-excursion (end-of-line) (eobp))
                (progn
                  (end-of-line)
                  (insert "\n"))
              (forward-line)
              (beginning-of-line)))
          (insert "#+" name ": " value "\n")))))

  (defun vulpea-buffer-prop-set-list (name values &optional separators)
    "Set a file property called NAME to VALUES in current buffer.
  VALUES are quoted and combined into single string using
  `combine-and-quote-strings'.
  If SEPARATORS is non-nil, it should be a regular expression
  matching text that separates, but is not part of, the substrings.
  If nil it defaults to `split-string-default-separators', normally
  \"[ \f\t\n\r\v]+\", and OMIT-NULLS is forced to t.
  If the property is already set, replace its value."
    (vulpea-buffer-prop-set
     name (combine-and-quote-strings values separators)))

  (defun vulpea-buffer-prop-get (name)
    "Get a buffer property called NAME as a string."
    (org-with-point-at 1
      (when (re-search-forward (concat "^#\\+" name ": \\(.*\\)")
                               (point-max) t)
        (buffer-substring-no-properties
         (match-beginning 1)
         (match-end 1)))))

  (defun vulpea-buffer-prop-get-list (name &optional separators)
    "Get a buffer property NAME as a list using SEPARATORS.
  If SEPARATORS is non-nil, it should be a regular expression
  matching text that separates, but is not part of, the substrings.
  If nil it defaults to `split-string-default-separators', normally
  \"[ \f\t\n\r\v]+\", and OMIT-NULLS is forced to t."
    (let ((value (vulpea-buffer-prop-get name)))
      (when (and value (not (string-empty-p value)))
        (split-string-and-unquote value separators))))
#+end_src

** org-pomodoro
#+begin_src elisp
  (setup (:pkg org-pomodoro)
    (:option org-pomodoro-finished-sound "~/Documents/emacs/pyim-dict/applaud.wav")
    )
#+end_src
** ox-hugo
#+begin_src elisp
  (setup (:pkg ox-hugo)
    (:load-after ox)
    )
#+end_src
** org-transclusion
#+begin_src elisp

#+end_src
** org-elp for latex live preview
#+begin_src elisp
  (setup (:pkg org-elp)
    (:option org-elp-idle-time 0.5
             org-elp-split-fraction 0.25)
    )
#+end_src
* 翻译
** 有道词典
#+begin_src elisp
  (setup (:pkg youdao-dictionary))
#+end_src
** fanyi
#+begin_src elisp
(setup (:pkg fanyi))
#+end_src
** google translate
** english-teacher
#+begin_src elisp
  (setup (:pkg english-teacher :host github
               :repo "loyalpartner/english-teacher.el")
    )
#+end_src
** insert-translated-name
#+begin_src elisp
  (setup (:pkg insert-translated-name :host github :repo "manateelazycat/insert-translated-name")
    (:autoload insert-translated-name-insert)
    (:autoload insert-translated-name-replace))
#+end_src
** company-english-helper
#+begin_src elisp
  (setup (:pkg company-english-helper :host github
               :repo "manateelazycat/company-english-helper")
    (:autoload toggle-company-english-helper))
#+end_src
* 阅读
** pdf-tools
#+begin_src elisp
  (setup (:pkg pdf-tools :host github :repo "vedang/pdf-tools")
    (:option pdf-view-use-scaling t)
    (:with-map pdf-view-mode-map
      (:bind "h" pdf-annot-add-highlight-markup-annotation))
    (pdf-loader-install)
    (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))
    )

  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
        TeX-source-correlate-start-server t)

  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)

  (setup (:pkg pdf-continuous-scroll-mode :host github :repo "dalanicolai/pdf-continuous-scroll-mode.el")
    (add-hook 'pdf-view-mode-hook 'pdf-continuous-scroll-mode)
    )
#+end_src
** org-noter
#+begin_src elisp
  (setup (:pkg org-noter)
    (:option
     org-noter-notes-search-path (list org-directory)
     org-noter-auto-save-last-location t
     org-noter-separate-notes-from-heading nil
     org-noter-doc-split-percentage '(0.6 . 0.4)
     )
    )
#+end_src
* tools
** restart-emacs
#+begin_src elisp
  (setup (:pkg restart-emacs))
#+end_src
** keycast
#+begin_src elisp
  (setup (:pkg keycast)
    ;; This works with doom-modeline, inspired by this comment:
    (define-minor-mode keycast-mode
      "Show current command and its key binding in the mode line."
      :global t
      (require 'keycast)
      (if keycast-mode
          (add-hook 'pre-command-hook 'keycast--update t)
        (remove-hook 'pre-command-hook 'keycast--update)))
    (:when-loaded
      (add-to-list 'global-mode-string '("" mode-line-keycast))))

  ;; (add-to-list 'global-mode-string '("" mode-line-keycast " ")))

#+end_src

** Simulate company with corfu
#+begin_src elisp
    (defvaralias 'company-candidates 'corfu--candidates)
    (defalias 'company-mode 'corfu-mode) ;; should be deleted
    (defvaralias 'company-mode 'corfu-mode) ;; should be deleted
    (setq company-backends '())
    (setq completion-at-point-functions-backup completion-at-point-functions)
    (provide 'company)

    (defun set-completion-functions ()
      (setq completion-at-point-functions (cl-concatenate 'list (mapcar #'cape-company-to-capf company-backends) completion-at-point-functions-backup)))

    (defun company-grab-symbol ()
      "If point is at the end of a symbol, return it.
      Otherwise, if point is not inside a symbol, return an empty string."
      (if (looking-at "\\_>")
          (buffer-substring (point) (save-excursion (skip-syntax-backward "w_")
                                                    (point)))
        (unless (and (char-after) (memq (char-syntax (char-after)) '(?w ?_)))
          "")))
    (advice-add 'toggle-company-english-helper :after #'set-completion-functions)
#+end_src
