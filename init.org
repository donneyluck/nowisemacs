 #+TITLE: Emacs Configuration
#+PROPERTY: header-args:elisp :tangle ~/.emacs.d/init.el
"Simulate company with corfu" is at the end of this file.

* Startup config
** UI speed up
#+begin_src elisp :tangle ~/.emacs.d/early-init.el
    ;; -*- lexical-binding: t; -*-
    (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.5) ;;defer gc futher back

  ;; Package initialize occurs automatically, before `user-init-file' is
  ;; loaded, but after `early-init-file'. We handle package
  ;; initialization, so we must prevent Emacs from doing it early!
  (setq package-enable-at-startup nil)

  ;; Inhibit resizing frame
  (setq frame-inhibit-implied-resize t)

   ;; (add-to-list 'default-frame-alist '(undecorated . t))
  ;; Faster to disable these here (before they've been initialized)
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)

    ;; (tool-bar-mode -1)                      ;禁用工具栏
    ;; (scroll-bar-mode -1)                    ;禁用滚动条
    (setq
     ;; 默认用最简单的模式
     initial-major-mode 'fundamental-mode
     package--init-file-ensured t
     inhibit-startup-message t             ; 关闭启动 Emacs 时的欢迎界面
     )

    ;; (pixel-scroll-precision-mode t) ;; 最近发现和 pdf-continuous-view-mode 工作不协调
#+end_src
** Native Compilation(disabled)
#+begin_src elisp
    ;; Silence compiler warnings as they can be pretty disruptive
  (when (native-comp-available-p)
    (setq borg-compile-function #'native-compile))
    ;; (setq native-comp-async-report-warnings-errors nil)
    ;; ;; Set the right directory to store the native comp cache
    ;; (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))
#+end_src
** generic
#+begin_src elisp
  ;; -*- lexical-binding: t; -*-
  (add-to-list 'load-path (expand-file-name "lib/borg" user-emacs-directory))
  (require 'borg)
  (setq borg-rewrite-urls-alist
        '(("git@github.com:" . "https://github.com/")
          ("git@gitlab.com:" . "https://gitlab.com/")))
  (borg-initialize)

  ;; 定义一些启动目录，方便下次迁移修改
  (defvar nowisemacs-root-dir (file-truename "~/.emacs.d/"))
  (defvar nowisemacs-config-file (concat nowisemacs-root-dir "init.org"))
  (defvar nowisemacs-extension-dir (concat nowisemacs-root-dir "/extensions"))

  (setq use-short-answers t)

  (setq frame-resize-pixelwise t) ;设置缩放的模式,避免Mac平台最大化窗口以后右边和下边有空隙
  (set-frame-parameter nil 'fullscreen 'maximized)

  (setq ring-bell-function 'ignore)       ;关闭烦人的出错时的提示声
  (set-default-coding-systems 'utf-8)
  (setq-default indent-tabs-mode nil)

  (setq-default tab-width 4)
  ;; 平滑地进行半屏滚动，避免滚动后recenter操作
  (setq scroll-step 1
        scroll-conservatively 10000)
  (setq completions-detailed t) ;;useful in emacs 28
  ;; (server-start)

#+end_src

The following content is not enabled yet, because I want to minimize unnecessary settings as much as possible
#+begin_src elisp :tangle no
  ;; Restore emacs session.
  (setq initial-buffer-choice t)
  (run-with-timer 1 nil #'(lambda () (bury-buffer)))

  ;; 增加IO性能
  (setq process-adaptive-read-buffering nil)
  (setq read-process-output-max (* 1024 1024))

  (transient-mark-mode 1)                 ;标记高亮
  (global-subword-mode 1)                 ;Word移动支持 FooBar 的格式
  (setq use-dialog-box nil)               ;never pop dialog
  (setq initial-scratch-message "") ;关闭启动空白buffer, 这个buffer会干扰session恢复
  (setq-default comment-style 'indent)    ;设定自动缩进的注释风格
  (setq ring-bell-function 'ignore)       ;关闭烦人的出错时的提示声
  (setq default-major-mode 'text-mode)    ;设置默认地主模式为TEXT模式
  (setq mouse-yank-at-point t)            ;粘贴于光标处,而不是鼠标指针处
  (setq x-select-enable-clipboard t)      ;支持emacs和外部程序的粘贴
  (setq split-width-threshold nil)        ;分屏的时候使用上下分屏
  (setq inhibit-compacting-font-caches t) ;使用字体缓存，避免卡顿
  (setq confirm-kill-processes nil)       ;退出自动杀掉进程
  (setq async-bytecomp-allowed-packages nil) ;避免magit报错
  (setq word-wrap-by-category t)             ;按照中文折行
  (setq profiler-report-cpu-line-format ;让 profiler-report 第一列宽一点
        '((100 left)
          (24 right ((19 right)
                     (5 right)))))
  (setq profiler-report-memory-line-format
        '((100 left)
          (19 right ((14 right profiler-format-number)
                     (5 right)))))

  ;; (add-hook 'find-file-hook 'highlight-parentheses-mode t) ;增强的括号高亮

  (setq ad-redefinition-action 'accept)   ;不要烦人的 redefine warning

#+end_src

* Package Management
I use borg to manage packages, so setup.el is only used to config packages quickly
** Configuration with setup.el
*** :delay
#+begin_src elisp
  (require 'setup)
  (setup-define :delay
    (lambda (&optional time)
      `(run-with-idle-timer ,(or time 1) nil
                            (lambda () (require ',(setup-get 'feature)))))
    :documentation "Delay loading the feature until a certain amount of idle time has passed.")
#+end_src
*** :load-after
This keyword causes a body to be executed after other packages/features are loaded:
#+begin_src elisp
  (setup-define :load-after
    (lambda (&rest features)
      (let ((body `(require ',(setup-get 'feature))))
        (dolist (feature (nreverse features))
          (setq body `(with-eval-after-load ',feature ,body)))
        body))
    :documentation "Load the current feature after FEATURES.")
#+end_src
*** :if-system
#+begin_src elisp
  (setup-define :if-system
    (lambda (systemtype)
      `(unless (eq system-type ,systemtype)
         ,(setup-quit)))
    :documentation "If SYSTEMTYPE is not the current systemtype, stop evaluating form.")
#+end_src
*** :autoload
#+begin_src elisp
  (setup-define :autoload
    (lambda (&rest funcs)
      (let ((body '())
            (feature-string (symbol-name (setup-get 'feature))))
        (dolist (single-func (nreverse funcs))
          (add-to-list 'body `(autoload ',single-func ,feature-string nil t))
          (add-to-list 'body 'progn))
        body))
    :documentation "Load the current feature after FEATURES.")
#+end_src
* gcmh
Enforce a sneaky Garbage Collection strategy to minimize GC interference with user activity.
#+begin_src elisp
  (setup gcmh
    (:option gcmh-idle-delay 5
             gcmh-high-cons-threshold #x1000000) ; 16MB
    (gcmh-mode 1))
#+end_src
* Keyboard Bindings
I used to be a vim(evil) user, but now I use meow to manage all my keys
** meow
#+begin_src elisp
  ;;setup (:pkg evil))
  (setup meow
    (require 'meow)
    (:option meow-use-keypad-when-execute-kbd nil
             meow-expand-exclude-mode-list nil
             meow-use-clipboard t
             meow-cursor-type-normal '(bar . 5)
             meow-cursor-type-insert '(bar . 1)
             meow-replace-state-name-list '((normal . "N")
                                            (motion . "M")
                                            (keypad . "K")
                                            (insert . "I")
                                            (beacon . "B")
                                            )
             meow-use-enhanced-selection-effect t
             )
    (defun meow-setup()
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
      (meow-motion-overwrite-define-key '("j" . meow-next)
                                        '("k" . meow-prev)
                                        '("<escape>" . ignore)
                                        )
      (meow-leader-define-key
       ;; SPC j/k will run the original command in MOTION state.
       '("j" . "H-j")
       '("k" . "H-k")
       ;; Use SPC (0-9) for digit arguments.
       '("1" . meow-digit-argument)
       '("2" . meow-digit-argument)
       '("3" . meow-digit-argument)
       '("4" . meow-digit-argument)
       '("5" . meow-digit-argument)
       '("6" . meow-digit-argument)
       '("7" . meow-digit-argument)
       '("8" . meow-digit-argument)
       '("9" . meow-digit-argument)
       '("0" . meow-digit-argument)
       '("/" . meow-keypad-describe-key)
       '("?" . meow-cheatsheet))
      (meow-normal-define-key '("0" . meow-expand-0)
                              '("9" . meow-expand-9)
                              '("8" . meow-expand-8)
                              '("7" . meow-expand-7)
                              '("6" . meow-expand-6)
                              '("5" . meow-expand-5)
                              '("4" . meow-expand-4)
                              '("3" . meow-expand-3)
                              '("2" . meow-expand-2)
                              '("1" . meow-expand-1)
                              '("a" . meow-append)
                              ;;'("A" . meow-open-below)
                              '("b" . meow-back-word)
                              '("B" . meow-back-symbol)
                              '("c" . meow-change)
                              ;; '("C" . meow-change-save)
                              '("d" . meow-kill)
                              '("e" . meow-next-word)
                              '("E" . meow-next-symbol)
                              '("f" . meow-find)
                              ;; '("F" . meow-find-expand)

                              '("g d" . xref-find-definitions)
                              '("g D" . xref-find-references)
                              '("g m" . consult-mark)
                              '("g a" . eglot-code-actions)
                              '("g r" . eglot-rename)
                              '("g f" . eglot-format)

                              '("G" . meow-grab)
                              '("h" . meow-left)
                              '("H" . meow-left-expand)
                              '("i" . meow-insert)
                              ;; '("I" . (progon (meow-line) (meow-insert)))
                              '("j" . meow-next)
                              '("J" . meow-next-expand)
                              '("k" . meow-prev)
                              '("K" . meow-prev-expand)
                              '("l" . meow-right)
                              '("L" . meow-right-expand)
                              ;; '("m" . meow-mark-word)
                              ;; '("M" . meow-mark-symbol)
                              '("m" . consult-register-store)
                              '("M" . meow-block)
                              '("n" . meow-search)
                              '("N" . meow-pop-selection)

                              '("o" . meow-open-below)
                              '("O" . meow-open-above)
                              '("p" . meow-yank)
                              '("P" . meow-yank-pop)
                              '("q" . meow-quit)
                              '("Q" . goto-line)
                              '("r" . meow-replace)
                              '("R" . meow-swap-grab)
                              '("s" . meow-line)
                              '("S" . meow-kmacro-lines)
                              '("t" . meow-till)
                              '("u" . meow-undo)
                              '("U" . vundo)
                              '("v v" . meow-visit)
                              '("V" . meow-kmacro-matches)
                              '("w" . meow-mark-word)
                              '("W" . meow-mark-symbol)
                              '("x" . meow-delete)
                              '("X" . meow-backward-delete)
                              '("y" . meow-save)
                              '("z a" . hs-toggle-hiding)
                              '("z c" . hs-hide-block)
                              '("z o" . hs-show-block)
                              '("z m" . hs-hide-all)
                              '("z r" . hs-show-all)
                              '("v i" . meow-inner-of-thing)
                              '("v a" . meow-bounds-of-thing)


                              '("v \'" . insert-quotations)
                              '("v \"" . insert-quotes)
                              '("v \`" . insert-backquote)
                              '("v *" . insert-star)
                              '("v (" . insert-parentheses)
                              '("v [" . insert-bracket)
                              '("v {" . insert-curly)
                              '("v =" . insert-equation)

                              '("<escape>" . ignore)

                              '("!" . meow-start-kmacro-or-insert-counter)
                              '("@" . meow-end-or-call-kmacro)
                              '("#" . symbol-overlay-put)
                              '("^" . meow-join)
                              '("*" . symbol-overlay-put)
                              '("-" . negative-argument)
                              '("=" . indent-region)

                              '("[" . meow-beginning-of-thing)
                              '("]" . meow-end-of-thing)
                              '("\\" . quoted-insert)

                              '(";" . meow-expand-1)
                              '(":" . async-shell-command)
                              '("'" . consult-register-load)
                              '("," . meow-reverse)
                              '("." . repeat)


                              ;; '("&" . meow-query-replace)
                              ;; '("%" . meow-query-replace-regexp)
                              '("/" . consult-line)))
    (meow-global-mode 1)
                                          ; meow-setup 用于自定义按键绑定，可以直接使用下文中的示例
    (meow-setup)
    )
#+end_src

** which-key
#+begin_src elisp
  (setup which-key
    (which-key-mode)
    (setq which-key-idle-delay 0.1))
#+end_src
** keybinding
#+begin_src elisp
  ;; buffer
  (meow-leader-define-key
   '("b b" . persp-switch-to-buffer)
   '("b B" . switch-to-buffer)
   '("b k" . kill-current-buffer)
   '("b l" . meow-last-buffer)
   '("b m" . bookmark-set)
   '("b n" . next-buffer)
   '("b M" . bookmark-delete)
   '("b j" . bookmark-jump)
   '("b p" . previous-buffer)
   '("b r" . revert-buffer))

  ;; lewisliu
  (meow-leader-define-key
   '("e y p" . my-gts-translate-posframe)
   '("e y i" . gts-do-translate)
   ;; citre
   '("e c a" . citre-ace-peek)
   '("e c j" . citre-jump)
   '("e c p" . citre-peek)
   '("e c J" . citre-jump-back)
   '("e c u" . citre-update-this-tags-file)
   '("e c r" . citre-peek-restore)
   '("e c s" . citre-peek-save-session)
   '("e c l" . citre-peek-load-session)
   ;; aweshell
   '("e a a" . aweshell-toggle)
   '("e a d" . aweshell-dedicated-toggle)
   '("e a b" . aweshell-switch-buffer)
   '("e a s" . aweshell-search-history)
   ;; insert-translated
   '("e i i" . insert-translated-name-insert)
   '("e i r" . insert-translated-name-replace)

   ;; imenu-list
   '("e l" . imenu-list-smart-toggle)
   ;; org-download
   '("e d" . org-download-screenshot)
   ;; english help
   '("e h c" . toggle-company-english-helper)
   '("e h f" . english-teacher-follow-mode))

  ;; search
  (meow-leader-define-key
   '("s s" . consult-line)
   '("s b" . consult-buffer)
   '("s d" . consult-ripgrep)
   '("s g" . deadgrep)
   '("s D" . lewis/ripgrep-search-other-dir)
   '("s f" . consult-find)
   '("s F" . lewis/find-file-other-dir))

  (defun find-config-file()
    (interactive)
    (find-file nowisemacs-config-file))

  ;; file
  (meow-leader-define-key
   '("f r" . consult-recent-file)
   '("f p" . find-config-file))

  ;; notes
  (meow-leader-define-key
   '("n r D" . org-roam-demote-entire-buffer)
   '("n r f" . org-roam-node-find)
   '("n r F" . org-roam-ref-find)
   '("n r g" . org-roam-graph)
   '("n r i" . org-roam-node-insert)
   '("n r I" . org-id-get-create)
   ;; '("n r m" . org-roam-buffer-toggle)
   '("n r M" . org-roam-buffer-display-dedicated)
   '("n r n" . org-roam-capture)
   '("n r r" . org-roam-buffer-toggle)
   '("n r R" . org-roam-link-replace-all)
   ;; date
   '("n r d b" . org-roam-dailies-goto-previous-note)
   '("n r d d" . org-roam-dailies-goto-date)
   '("n r d D" . org-roam-dailies-capture-date)
   '("n r d f" . org-roam-dailies-goto-next-note)
   '("n r d m" . org-roam-dailies-goto-tomorrow)
   '("n r d M" . org-roam-dailies-capture-tomorrow)
   '("n r d n" . org-roam-dailies-capture-today)
   '("n r d t" . org-roam-dailies-goto-today)
   '("n r d T" . org-roam-dailies-capture-today)
   '("n r d y" . org-roam-dailies-goto-yesterday)
   '("n r d Y" . org-roam-dailies-capture-yesterday)
   '("n r d -" . org-roam-dailies-find-directory)
   ;; "node properties"
   '("n r o a" . org-roam-alias-add)
   '("n r o A" . org-roam-alias-remove)
   '("n r o t" . org-roam-tag-add)
   '("n r o T" . org-roam-tag-remove)
   '("n r o r" . org-roam-ref-add)
   '("n r o R" . org-roam-ref-remove)

   '("n e" . org-noter)
   )
  (meow-leader-define-key
   ;; time
   ;; '("t t" . org-pomodoro)
   ;;a agenda
   '("a a" . org-agenda)
   ;;w workspace
   '("TAB". perspective-map))

  ;;oj
  (meow-leader-define-key
   '("o p" . oj-prepare)
   '("o t" . oj-test)
   '("o h" . oj-open-home-dir))
#+end_src

** minibuffer-modifier-keys
#+begin_src elisp
  (require 'minibuffer-modifier-keys)
  (minibuffer-modifier-keys-setup t)
#+end_src
** insert-pair
#+begin_src elisp
  (defun insert-quotations (&optional arg)
    "Enclose following ARG sexps in quotation marks.
    Leave point after open-paren."
    (interactive "*P")
    (insert-pair arg ?\' ?\'))

  (defun insert-quotes (&optional arg)
    "Enclose following ARG sexps in quotes.
    Leave point after open-quote."
    (interactive "*P")
    (insert-pair arg ?\" ?\"))

  (defun insert-backquote (&optional arg)
    "Enclose following ARG sexps in quotations with backquote.
    Leave point after open-quotation."
    (interactive "*P")
    (insert-pair arg ?\` ?\'))

  (defun insert-star (&optional arg)
    "Enclose following ARG sexps in stars.
  Leave point after open-quotation."
    (interactive "*P")
    (insert-pair arg ?\* ?\*))

  (defun insert-bracket (&optional arg)
    "Enclose following ARG sexps in brackets.
  Leave point after open-quotation."
    (interactive "*P")
    (insert-pair arg ?\[ ?\]))

  (defun insert-curly (&optional arg)
    "Enclose following ARG sexps in curly braces.
  Leave point after open-quotation."
    (interactive "*P")
    (insert-pair arg ?\{ ?\}))

  (defun insert-equate (&optional arg)
    "Enclose following ARG sexps in equations.
  Leave point after open-quotation."
    (interactive "*P")
    (insert-pair arg ?\= ?\=))
#+end_src
* UI
** Font
#+begin_src elisp
  (defun font-installed-p (font-name)
    "Check if font with FONT-NAME is available."
    (find-font (font-spec :name font-name)))

  (when (display-graphic-p)
    ;; Set default font
    (cl-loop for font in '(
                           ;; "JetBrains Mono"
                           ;; "InconsolataGo QiHei NF"
                           "Sarasa Mono SC Nerd"
                           "yaheiInconsolata"
                           "Monaco"
                           "Consolas")
             when (font-installed-p font)
             return (progn
                      (set-face-attribute 'default nil :family font :height 140)
                      (set-face-attribute 'fixed-pitch nil :family font :height 1.0)))

    ;; variable-pitch
    (cl-loop for font in '("Noto Sans CJK SC" "Arial" "Helvetica" "Times New Roman")
             when (font-installed-p font)
             return (set-face-attribute 'variable-pitch nil :family font :height 1.0)))

  ;; Specify font for all unicode characters
  ;; (cl-loop for font in '("Apple Color Emoji" "Segoe UI Symbol" "Symbola" "Symbol")
  ;;          when (font-installed-p font)
  ;;          return(set-fontset-font t 'unicode font nil 'prepend))

  ;; ;; Specify font for Chinese characters
  ;; (cl-loop for font in '("WenQuanYi Micro Hei" "Microsoft Yahei")
  ;;          when (font-installed-p font)
  ;;          return (set-fontset-font t '(#x4e00 . #x9fff) font)))

  ;; (set-face-attribute 'default nil :family "yaheiInconsolata" :height 140)

  (setup mixed-pitch
    (:hook-into text-mode))
  ;; 需要等宽的把face 添加到 mixed-pitch-fixed-pitch-faces
#+end_src

** Theme
Modus-themes is great especailly for org mode
#+begin_src elisp
  (setup modus-themes
    (:option modus-themes-org-blocks 'tinted-background
             modus-themes-mode-line '(3d)
             modus-themes-hl-line '(intense accented)
             modus-themes-paren-match '(intense bold underline)
             modus-themes-subtle-line-numbers t)
    ;; (load-theme 'modus-vivendi))
    (load-theme 'modus-operandi))
#+end_src

** line number
only enable line number in some modes, borrowed from lazycat-emacs
#+begin_src elisp
  (setup simple
    (:with-hook after-init-hook
      (:hook line-number-mode column-number-mode size-indication-mode)))

  (setq display-line-numbers-width-start t)
  (setq line-number-display-limit large-file-warning-threshold)
  (setq line-number-display-limit-width 1000)

  (dolist (hook (list
                 'c-mode-common-hook
                 'c-mode-hook
                 'emacs-lisp-mode-hook
                 'lisp-interaction-mode-hook
                 'lisp-mode-hook
                 'java-mode-hook
                 'asm-mode-hook

                 'haskell-mode-hook
                 'rcirc-mode-hook
                 'erc-mode-hook
                 'sh-mode-hook
                 'makefile-gmake-mode-hook
                 'python-mode-hook
                 'js-mode-hook
                 'html-mode-hook
                 'css-mode-hook
                 'tuareg-mode-hook
                 'go-mode-hook
                 'coffee-mode-hook
                 'qml-mode-hook
                 'markdown-mode-hook
                 'slime-repl-mode-hook
                 'package-menu-mode-hook
                 'cmake-mode-hook
                 'php-mode-hook
                 'web-mode-hook
                 'coffee-mode-hook
                 'sws-mode-hook
                 'jade-mode-hook
                 'vala-mode-hook
                 'rust-mode-hook
                 'ruby-mode-hook
                 'qmake-mode-hook
                 'lua-mode-hook
                 'swift-mode-hook
                 'llvm-mode-hook
                 'conf-toml-mode-hook
                 'nxml-mode-hook
                 'nim-mode-hook
                 'org-mode-hook
                 ))
    (add-hook hook (lambda () (display-line-numbers-mode))))
#+end_src
** all-the-icons
I'm thinking about removing this package, but it's pretty good so far
*** all-the-icons
#+begin_src elisp
  (setup all-the-icons
    (:option all-the-icons-scale-factor 1.0))
  (setup all-the-icons-completion
    (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))
#+end_src

** rainbow-delimiters
rainbow-delimiters is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth.
#+begin_src elisp
  (setup rainbow-delimiters
    (:hook-into prog-mode))
#+end_src
** diff-hl
diff-hl-mode highlights uncommitted changes on the left side of the window (area also known as the "gutter"), allows you to jump between and revert them selectively.
#+begin_src elisp
  (setup diff-hl
    (global-diff-hl-mode)
    (diff-hl-margin-mode))
    #+end_src
** emacs-dashboard
#+begin_src elisp
  (setup dashboard
    (:option dashboard-items '((recents . 5)
                               ;; (agenda . 5)
                               (bookmarks . 5)
                               ;; (projects . 5)
                               )
             ;; dashboard-set-heading-icons t
             dashboard-center-content t
             dashboard-set-init-info t)
    (dashboard-setup-startup-hook))
#+end_src
** doom-modeline
#+begin_src elisp
(setup doom-modeline
  (:option doom-modeline-window-width-limit fill-column
           doom-modeline-height 20
           doom-modeline-hud t
           doom-modeline-icon nil
           doom-modeline-unicode-fallback t)
  (:hook-into after-init))
#+end_src
** awesome-tray
#+begin_src elisp :tangle no
  (setup awesome-tray
    (:option
     ;; awesome-tray-file-path-show-filename t
             awesome-tray-update-interval 0.2
             awesome-tray-buffer-name-buffer-changed t
             awesome-tray-file-path-truncate-dirname-levels 3
             awesome-tray-buffer-name-max-length 30
             )
    (require 'awesome-tray)

    (defvar lewis-awesome-tray-deli "  ")

    (defun pyim-awesome-tray()
      (concat current-input-method-title))
    (defun persp-awesome-tray()
      (concat "[" (persp-current-name) "]"))

    (defun project-awesome-tray()
      (car (nthcdr 2 (project-current))))
    (defun meow-awesome-tray()
      (concat "<" (meow-indicator) ">"))

     (add-to-list 'awesome-tray-module-alist '("meow" . (meow-awesome-tray awesome-tray-module-last-command-face)))
     (add-to-list 'awesome-tray-module-alist '("pyim" . (pyim-awesome-tray awesome-tray-module-input-method-face)))
     (add-to-list 'awesome-tray-module-alist '("persp" . (persp-awesome-tray awesome-tray-module-location-face)))

    (setq awesome-tray-active-modules (list "location" lewis-awesome-tray-deli "buffer-read-only" "file-path" "buffer-name" lewis-awesome-tray-deli "pyim"  "" "meow" lewis-awesome-tray-deli "persp" lewis-awesome-tray-deli "mode-name" "git"))
    (awesome-tray-mode 1))
#+end_src
** hl-todo
#+begin_src elisp
    (global-hl-todo-mode)
#+end_src
* General Configuration
** general modes
#+begin_src elisp
  (setup save-place
    (:hook-into after-init-hook))
  (setup elec-pair
    (:option electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
    (electric-pair-mode t))

  (global-auto-revert-mode t)                  ; 当另一程序修改了文件时，让 Emacs 及时刷新 Buffer
  (delete-selection-mode t)                    ; 选中文本后输入文本会替换文本（更符合我们习惯了的其它编辑器的逻辑）
  (global-hl-line-mode)
  (recentf-mode t)
  (blink-cursor-mode -1)                  ;指针不闪动
#+end_src
** backup, super-save
#+begin_src elisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)

  (setup super-save
    (super-save-mode 1)
    (setq super-save-auto-save-when-idle t))
#+end_src
** 自动换行
#+begin_src elisp
  (setq fill-column 120)          ;默认显示 100列就换行
  (setq word-wrap t)
  (setq word-wrap-by-category t)
  (add-hook 'text-mode-hook 'visual-line-mode)
  ;; (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src
** so-long
解决长行卡死问题
#+begin_src elisp
    (global-so-long-mode 1)
#+end_src
** TRAMP
#+begin_src elisp
  (setq tramp-default-method "ssh")
#+end_src
** Automatically clean whitespace
#+begin_src elisp
  (setup ws-butler
    (:hook-into text-mode prog-mode))
#+end_src
** exec-path-from-shell
#+begin_src elisp
  ;; 可以优化速度, 建议看一下官网的一篇文章
  (setup exec-path-from-shell
      (exec-path-from-shell-initialize))
      ;; (when (memq window-system '(mac ns x))
    ;;   (exec-path-from-shell-initialize)))
#+end_src
** Undo
*** vundo for undo history
#+begin_src elisp
(setup vundo)
#+end_src
* 补全
** Completions with Vertico
#+begin_src elisp
  (setup vertico
    (:option vertico-cycle t)
    (:with-mode vertico
      (:bind [backspace] vertico-directory-delete-char))
    (vertico-mode))
  (vertico-posframe-mode 1)
#+end_src
** Orderless
#+begin_src elisp
  (setup orderless
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src
** savehist
#+begin_src elisp
    (savehist-mode)
#+end_src
** Consult Commands
*** consult
#+begin_src elisp
  (setup consult
    (:with-map minibuffer-local-map
      (:bind "C-r" consult-history))
    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)
    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (project-root)
    (setq consult-project-root-function
          (lambda ()
            (when-let (project (project-current))
              (car (project-roots project))))))
#+end_src
*** search other cwd
#+begin_src elisp
  (defun lewis/ripgrep-search-other-dir()
    (interactive)
    (let ((current-prefix-arg '(-1)))
      (call-interactively 'consult-ripgrep)))

  (defun lewis/find-file-other-dir()
    (interactive)
    (let ((current-prefix-arg '(-1)))
      (call-interactively 'consult-find)))

#+end_src
** Marginalia
#+begin_src elisp
  (setup marginalia
    (:option marginalia-annotators '(marginalia-annotators-heavy
                                     marginalia-annotators-light
                                     nil))
    (:when-loaded
      (cl-pushnew 'epkg-marginalia-annotate-package
                  (alist-get 'package marginalia-annotator-registry)))
    (marginalia-mode))

#+end_src
** embark
should be check after reading the embark.el manual
#+begin_src elisp
  (setup embark-consult
    (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode))

  (setup embark
    (:also-load embark-consult)
    (:option prefix-help-command 'embark-prefix-help-command)
    (:global "C-S-a" embark-act)

    ;; Show Embark actions via which-key
    (setq embark-action-indicator
          (lambda (map)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator))

  (setup wgrep)
#+end_src
** corfu(instead of company)
#+begin_src elisp
  (setup corfu
    (:option
     ;; Optional customizations
     corfu-cycle t                ;; Enable cycling for `corfu-next/previous'
     corfu-auto t                 ;; Enable auto completion
     ;; (corfu-quit-at-boundary t)     ;; Automatically quit at word boundary
     corfu-quit-no-match t        ;; Automatically quit if there is no match
     corfu-preview-current nil    ;; Disable current candidate preview
     ;; corfu-echo-documentation nil ;; Disable documentation in the echo area
     corfu-auto-prefix 2)
    (:with-map corfu-map
      (:bind
       ;; [tab] corfu-next
       ;;       [backtab] corfu-previous
       "<escape>" corfu-quit))
    (corfu-global-mode))

  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active."
    (unless (or (bound-and-true-p mct--active)
                (bound-and-true-p vertico--input))
      ;; (setq-local corfu-auto nil) Enable/disable auto completion
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)

  ;; corfu backend
  (setup cape
    (add-to-list 'completion-at-point-functions #'cape-file)
    ;; (add-to-list 'completion-at-point-functions #'cape-tex)
    ;; (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    ;; (add-to-list 'completion-at-point-functions #'cape-keyword)
    )
  ;; Enable Corfu completion UI
  (setup corfu-doc
    (:hook-into corfu-mode))

  (setup svg-lib) ;; built-in has little icons
  (setup kind-icon
    (:load-after corfu)
    (:option kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
** yasnippet
#+begin_src elisp
  (setup yasnippet
    (:option yas-snippet-dirs '("~/.emacs.d/etc/snippets"))
    (yas-global-mode 1))
  ;;(setup yasnippet-snippets)
#+end_src
** deadgrep
#+begin_src elisp
  (setup deadgrep)
#+end_src
* Window Management
** winner-mode
#+begin_src elisp
  (winner-mode t)
#+end_src
** popper
Popper is a minor-mode to tame the flood of ephemeral windows Emacs produces, while still keeping them within arm’s reach.
#+begin_src elisp
  (setup popper
    (:option popper-reference-buffers         '("\\*Messages\\*"
                                                "Output\\*$"
                                                "\\*Async Shell Command\\*"
                                                "Go-Translate"
                                                help-mode
                                                helpful-mode
                                                compilation-mode
                                                youdao-dictionary-mode)
             )
    (:global "C-`" popper-toggle-latest
             "M-`" popper-cycle
             "C-M-`" popper-toggle-type)
    (popper-mode +1)
    (popper-echo-mode +1))
#+end_src
** Move
*** avy
Jump anywhere in the world
#+begin_src elisp
  (setup avy
    (:global "M-j" avy-goto-word-1))
#+end_src
*** jump-back
borrowed from citre, now you can always jump-back use "M-,"
#+begin_src elisp :tangle no
  (defun my--push-point-to-xref-marker-stack (&rest r)
    (xref-push-marker-stack (point-marker))) ;; must autoload this command in xref
  (dolist (func '(find-function
                  consult-imenu
                  consult-ripgrep
                  consult-line
                  consult-find
                  find-file
                  goto-line
                  citre-jump
))
    (advice-add func :before 'my--push-point-to-xref-marker-stack))
#+end_src
*** bookmark
#+begin_src elisp
  (setq bookmark-default-file "~/Documents/emacs/other-files/bookmarks")
#+end_src
* ibuffer
#+begin_src elisp
  (setup ibuffer
    (:global [remap list-buffers] #'ibuffer))
#+end_src
* Input
** pyim
#+begin_src elisp
  (setup posframe)
  (setup pyim
    (:option pyim-dicts '((:name "lewis_pyim_dict" :file "~/Documents/emacs/other-files/lewis_pyim_dict.pyim")
                          (:name "lewis_big_dict" :file "~/Documents/emacs/other-files/pyim-bigdict.pyim.gz"))
             ;; pyim-default-scheme 'xiaohe-shuangpin
             pyim-default-scheme 'quanpin
             pyim-punctuation-translate-p '(no yes auto)
             pyim-page-tooltip 'posframe
             pyim-page-length 5
             ;; (setq-default pyim-punctuation-translate-p '(yes no auto))   ;使用全角标点。
             ;; (setq-default pyim-punctuation-translate-p '(no yes auto))   ;使用半角标点。
             ;; (setq-default pyim-punctuation-translate-p '(auto yes no))   ;中文使用全角标点，英文使用半角标点。
             )
    (:when-loaded
      (set-default 'pyim-punctuation-half-width-functions
                   '(pyim-probe-punctuation-line-beginning pyim-probe-punctuation-after-punctuation))
      (pyim-isearch-mode 1)
      (defalias 'pyim-probe-meow-normal-mode
        #'(lambda nil
            (meow-normal-mode-p)))
      (set-default 'pyim-english-input-switch-functions
                   '(pyim-probe-auto-english pyim-probe-isearch-mode pyim-probe-program-mode pyim-probe-org-structure-template pyim-probe-org-latex-mode pyim-probe-meow-normal-mode))

      (defalias 'my-orderless-regexp
        #'(lambda
            (orig_func component)
            (let
                ((result
                  (funcall orig_func component)))
              (pyim-cregexp-build result))))
      (advice-add 'orderless-regexp :around #'my-orderless-regexp)
      )
    (setq default-input-method "pyim"))
#+end_src
* File and Browsing
** file browsing
*** dirvish
Dirvish is a minimalistic file manager based on Dired. It's fast
#+begin_src elisp
(setup dirvish)
#+end_src
*** diredfl
This is adapted from the extra font lock rules provided by Drew Adams' dired+ package, but published via a modern means, and with support for older Emacsen removed.
#+begin_src elisp
  (setup diredfl
    (:hook-into dired-mode))
#+end_src
*** dired-subtree
#+begin_src elisp
  ;; this is in dired-hacks
  (setup dired-subtree
    (:load-after dired)
    (:option dired-subtree-line-prefix "     ")
    (:with-map dired-mode-map
      (:bind "TAB" dired-subtree-cycle)))
#+end_src
** structure browsing
*** imenu-list
#+begin_src elisp
  (setup imenu-list
    (:autoload imenu-list-smart-toggle)
    (:option imenu-list-focus-after-activate t
             imenu-list-auto-resize t
             imenu-list-position 'left))
#+end_src
** perspective
#+begin_src elisp
  (setup perspective
    (:option persp-initial-frame-name "Main"
             persp-mode-prefix-key "")
    ;; Running `persp-mode' multiple times resets the perspective list...
    (unless (equal persp-mode t)
      (persp-mode)))
#+end_src
** auto-revert changed files
#+begin_src elisp
;; Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)
;; Revert buffers when the underlying file has changed
(global-auto-revert-mode 1)
#+end_src
* shell
** aweshell
#+begin_src elisp
  (setup aweshell
    (:option aweshell-auto-suggestion-p nil)
    (:autoload aweshell-toggle)
    (:autoload aweshell-dedicated-toggle))
#+end_src
** vterm
#+begin_src elisp
  (setup vterm)
#+end_src
** dtache
Run and interact with detached shell commands
#+begin_src elisp :tangle no
(setup (:pkg dtache))
#+end_src
* git
** magit
#+begin_src elisp
  (setup magit
    ;; (:when-loaded
      ;; (magit-add-section-hook 'magit-status-sections-hook
      ;;                         'magit-insert-modules
      ;;                         'magit-insert-stashes
      ;;                         'append))
    )
#+end_src
** blamer
Show git blame info about current line
#+begin_src elisp
  (setup blamer
    (:option blamer-idle-time 0.3
             blamer-min-offset 70))
#+end_src
* Program
** Language
*** elisp
**** helpful
#+begin_src elisp
  (setup helpful
    (:global "C-h f" #'helpful-callable
             "C-h v" #'helpful-variable
             "C-h k" #'helpful-key
             "C-c C-d" #'helpful-at-point
             "C-h F" #'helpful-function
             "C-h C" #'helpful-command))
#+end_src
**** elisp-demos
#+begin_src elisp
  (setup elisp-demos
    (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src
**** elispfl
#+begin_src elisp
  (setup elispfl
    (:hook-into emacs-lisp-mode ielm))
#+end_src
*** graphviz-dot-mode
#+begin_src elisp :tangle no
  (setup (:pkg graphviz-dot-mode)
    (:file-match "\\.dot\\'")
    (:option graphviz-dot-indent-width 4))
    ;; (:when-loaded
    ;;   (require 'company-graphviz-dot)))
#+end_src
*** beancount
Emacs major-mode to work with Beancount ledger files
#+begin_src elisp
  (setup beancount
    (:file-match "\\.beancount\\'"))
#+end_src
*** latex
#+begin_src elisp
  (setup auctex)
  (setup cdlatex)
#+end_src
*** python
**** python
#+begin_src elisp
  (setup python
    (:with-hook inferior-python-mode-hook
      (:hook (lambda ()
               (process-query-on-exit-flag
                (get-process "Python")))))
    (:when-loaded
      (when (and (executable-find "python3")
                 (string= python-shell-interpreter "python"))
        (setq python-shell-interpreter "python3"))
      (with-eval-after-load 'exec-path-from-shell
        (exec-path-from-shell-copy-env "PYTHONPATH"))
      ;; (setup (:pkg live-py-mode))
      )
    )

#+end_src
*** cpp
#+begin_src elisp
(setup cmake-mode)
#+end_src
** Useful programing tools
*** quickrun
#+begin_src elisp
  (setup quickrun)
#+end_src
*** tree-sitter
#+begin_src elisp :tangle no
  (setup (:pkg tree-sitter)
    ;; (:hook-into prog-mode)
    (:when-loaded
      ;; (require 'tree-sitter-langs)
      (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)))
    (setup (:pkg tree-sitter-langs))
#+end_src
*** lsp mode
**** eglot
#+begin_src elisp
  ;; use built-in package dep
  (setup project)
  (setup xref
    (:autoload xref-push-marker-stack)) ;; autoload this command for jump-back
  ;; (setup (:pkg flymake :type built-in))
  ;; (setup (:pkg jsonrpc :type built-in))
  ;; (setup (:pkg eldoc :type built-in))

  ;; (setup (:pkg markdown-mode))
  (setup eldoc-box
    (add-hook 'eglot--managed-mode-hook #'eldoc-box-hover-at-point-mode t))

  ;; (setq xref-search-program 'ripgrep)
  (setq read-process-output-max (* 1024 1024))
  (setup eglot)
  (setup eldoc
    (:option eldoc-echo-area-use-multiline-p 3
          eldoc-echo-area-display-truncation-message nil))
  (setq c-basic-offset 4)
#+end_src
**** lsp-org-special
enable eglot in org-src mode
#+begin_src elisp
  (cl-defmacro lsp-org-babel-enable (lang)
    "Support LANG in org source code block."
    (cl-check-type lang stringp)
    (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
           (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
      `(progn
         (defun ,intern-pre (info)
           (let ((file-name (->> info caddr (alist-get :file))))
             (unless file-name
               (setq file-name (make-temp-file "babel-lsp-")))
             (setq buffer-file-name file-name)
             (eglot-ensure)))
         ;; (lsp-deferred)))
         (put ',intern-pre 'function-documentation
              (format "Enable lsp-mode in the buffer of org source block (%s)."
                      (upcase ,lang)))
         (if (fboundp ',edit-pre)
             (advice-add ',edit-pre :after ',intern-pre)
           (progn
             (defun ,edit-pre (info)
               (,intern-pre info))
             (put ',edit-pre 'function-documentation
                  (format "Prepare local buffer environment for org source block (%s)."
                          (upcase ,lang))))))))
  (defvar org-babel-lang-list
    '("python" "C++" "C"))
  (dolist (lang org-babel-lang-list)
    (eval `(lsp-org-babel-enable ,lang)))
#+end_src
*** citre
Citre is an advanced Ctags (or actually, readtags) frontend for Emacs.
#+begin_src elisp
  (setup citre
    (require 'citre-config)
    (:option
     citre-use-project-root-when-creating-tags t
     citre-prompt-language-for-ctags-command t
     citre-auto-enable-citre-mode-modes '(prog-mode)))
#+end_src
*** symbol-overlay
Highlight symbols with keymap-enabled overlays
#+begin_src elisp
  (setup symbol-overlay
    (:autoload symbol-overlay-put))
#+end_src
*** eglot-ltex
eglot client leveraging LTEX Language Server.
#+begin_src elisp :tangle no
  (setup eglot-ltex
      (:option eglot-languagetool-server-path "~/Downloads/ltex-ls/")
      (:with-hook text-mode-hook
        (:hook (lambda ()
                       (require 'eglot-ltex)))))
#+end_src
*** Code toggle with hideshow
#+begin_src elisp
  (setup hideshow
    (:with-hook prog-mode-hook
      (:hook hs-minor-mode)))
#+end_src
* Org Mode
** org-mode
#+begin_src elisp
  ;; (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "ℱ")
  ;;                                        ("#+END_SRC" . "Ⅎ")
  ;;                                        ("#+begin_src" . "ℱ")
  ;;                                        ("#+end_src" . "Ⅎ")))
  (setup org
    (setq org-directory "~/Documents/emacs/orgmode/")
    (:option org-adapt-indentation t
             org-startup-indented t
             org-hide-emphasis-markers t
             org-imenu-depth 5
             org-return-follows-link t
             org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                                    (vm-imap . vm-visit-imap-folder-other-frame)
                                    (gnus . org-gnus-no-new-news)
                                    (file . find-file)
                                    (wl . wl-other-frame))
             fill-column 120
             org-log-done 'time ;; 记录完成时间
             org-blank-before-new-entry '((heading . nil)
                                          (plain-list-item . nil))

             org-image-actual-width 600
             org-preview-latex-image-directory "~/.cache/ltximg/"

             org-confirm-babel-evaluate nil
             org-src-window-setup 'split-window-below
             org-refile-targets '(("~/Documents/emacs/orgmode/roam/20211204000712-refile_index.org" . (:maxlevel . 9)))
             )
    ;; (:file-match "\\.org\\'")
    ;; (:hook 'prettify-symbols-mode org-num-mode)
    (:hook org-num-mode)
    (:when-loaded
      (require 'org-tempo) ;; so that <s is useful
      (setq-default org-todo-keywords
                    (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                            (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))
      (setq-default org-todo-keyword-faces
                    (quote (("TODO" :foreground "red" :weight bold)
                            ("NEXT" :foreground "blue" :weight bold)
                            ("DONE" :foreground "forest green" :weight bold)
                            ("WAITING" :foreground "orange" :weight bold)
                            ("HOLD" :foreground "magenta" :weight bold)
                            ("CANCELLED" :foreground "forest green" :weight bold)
                            ("MEETING" :foreground "forest green" :weight bold)
                            ("PHONE" :foreground "forest green" :weight bold))))
      ;; 导出相关的设置

      (setq org-latex-pdf-process
            '("xelatex -interaction nonstopmode %f"
              "bibtex %b"
              "xelatex -interaction nonstopmode %f"
              "xelatex -interaction nonstopmode %f"))
      (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0)) ;; use a large preview for latex

      (defface my-org-emphasis-bold
        '((default :inherit bold)
          (((class color) (min-colors 88) (background light))
           :foreground "pale violet red")
          (((class color) (min-colors 88) (background dark))
           :foreground "pale violet red"))
        "My bold emphasis for Org.")

      (defface my-org-emphasis-italic
        '((default :inherit italic)
          (((class color) (min-colors 88) (background light))
           :foreground "green3")
          (((class color) (min-colors 88) (background dark))
           :foreground "green3"))
        "My italic emphasis for Org.")

      (defface my-org-emphasis-underline
        '((default :inherit underline)
          (((class color) (min-colors 88) (background light))
           :foreground "#813e00")
          (((class color) (min-colors 88) (background dark))
           :foreground "#d0bc00"))
        "My underline emphasis for Org.")

      (setq org-emphasis-alist
            '(("*" my-org-emphasis-bold)
              ("/" my-org-emphasis-italic)
              ("_" underline)
              ("=" org-verbatim verbatim)
              ("~" org-code verbatim)
              ("+" (:strike-through t))
              ))

      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (python . t)
         (dot . t)
         (latex . t)
         (C . t)
         ;; (C++ . t)
         ;; (bash . t)
         ))
  ))
#+end_src
** org-modern
#+begin_src elisp
  ;; Enable org-modern-mode
  (setup org-modern
    (:option org-modern-list '((?+ . "➤")
                               (?- . "–")
                               (?* . "•")))
    (:hook-into org-mode)
    (add-hook 'org-agenda-finalize-hook #'org-modern-agenda)
    )
#+end_src
** org-appear
#+begin_src elisp
  (setup org-appear
    (:hook-into org-mode))
#+end_src
** org-download
#+begin_src elisp
  (setup org-download
    (:option org-download-method 'directory
             org-download-screenshot-basename "screenshot.jpg"
             org-download-image-dir "~/Documents/emacs/orgmode/PicturesForAll/org_download_images")
    (:when-loaded
      (when (eq system-type 'gnu/linux)
        (setq-default org-download-screenshot-method "spectacle"))
      (when (eq system-type 'darwin)
        (setq org-download-screenshot-method "screencapture -i %s")))
    (:autoload org-download-screenshot))
#+end_src
** org-roam
*** org-roam
#+begin_src elisp
  ;; (setup (:pkg emacsql))
  (setq org-roam-v2-ack t)
  (setq org-roam-directory "~/Documents/emacs/orgmode/roam/")
  (setq org-roam-dailies-directory "~/Documents/emacs/orgmode/roam")
  (setup org-roam
    (:option org-roam-mode-section-functions (list #'org-roam-backlinks-section
                                                   #'org-roam-reflinks-section
                                                   ;; #'org-roam-unlinked-references-section
                                                   )
             org-roam-db-gc-threshold most-positive-fixnum
             ;; org-roam-node-display-template "${doom-hierarchy:*} ${tags:37}"
             org-roam-node-display-template (concat "${type:15} ${doom-hierarchy:80} " (propertize "${tags:*}" 'face 'org-tag))
             org-roam-capture-templates '(("m" "main" plain "%?"
                                           :target
                                           (file+head "main/%<%Y-%m-%d>-${slug}.org"
                                                      "#+title: ${title}\n* Action notes\n* Idea notes\n* Sealed notes")
                                           :unnarrowed t)
                                          ("r" "reference" plain "%?"
                                           :target
                                           (file+head "reference/%<%Y-%m-%d>-${slug}.org"
                                                      "#+title: ${title}\n* Action notes\n* Idea notes\n* Sealed notes")
                                           :unnarrowed t)
                                          ("a" "article" plain "%?"
                                           ;; :target
                                           :if-new
                                           (file+head "articles/%<%Y-%m-%d>-${slug}.org"
                                                      "#+title: ${title}\n* Action notes\n* Idea notes\n* Sealed notes")
                                           :unnarrowed t)))
    (:when-loaded
      (org-roam-db-autosync-mode)

      ;; Codes blow are used to general a hierachy for title nodes that under a file
      (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node))
        "Return the value of \"#+title:\" (if any) from file that NODE resides in.
    If there's no file-level title in the file, return empty string."
        (or (if (= (org-roam-node-level node) 0)
                (org-roam-node-title node)
              (org-roam-get-keyword "TITLE" (org-roam-node-file node)))
            ""))
      (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node))
        "Return hierarchy for NODE, constructed of its file title, OLP and direct title.
      If some elements are missing, they will be stripped out."
        (let ((title     (org-roam-node-title node))
              (olp       (org-roam-node-olp   node))
              (level     (org-roam-node-level node))
              (filetitle (org-roam-node-doom-filetitle node))
              (separator (propertize " > " 'face 'shadow)))
          (cl-case level
            ;; node is a top-level file
            (0 filetitle)
            ;; node is a level 1 heading
            (1 (concat (propertize filetitle 'face '(shadow italic))
                       separator title))
            ;; node is a heading with an arbitrary outline path
            (t (concat (propertize filetitle 'face '(shadow italic))
                       separator (propertize (string-join olp " > ") 'face '(shadow italic))
                       separator title)))))

      (cl-defmethod org-roam-node-type ((node org-roam-node))
        "Return the TYPE of NODE."
        (condition-case nil
            (file-name-nondirectory
             (directory-file-name
              (file-name-directory
               (file-relative-name (org-roam-node-file node) org-roam-directory))))
          (error "")))

      (add-to-list 'display-buffer-alist
                   '("\\*org-roam\\*"
                     (display-buffer-in-side-window)
                     (side . right)
                     (slot . 0)
                     (window-width . 0.25)
                     (window-parameters . ((no-other-window . t)
                                           (no-delete-other-windows . t)))))
      (org-roam-buffer-toggle)
      ))
#+end_src
*** Every Zettel is a Draft until Declared Otherwise
#+begin_src elisp
(defun lewis/tag-new-node-as-draft ()
  (org-roam-tag-add '("draft")))
(add-hook 'org-roam-capture-new-node-hook #'lewis/tag-new-node-as-draft)
#+end_src
*** org-roam-ui
#+begin_src elisp
  ;; (setup (:pkg websocket))
  ;; (setup (:pkg simple-httpd))
  ;; (setup (:pkg org-roam-ui :host github :repo "org-roam/org-roam-ui" :files ("*.el" "out")))
#+end_src
*** org-roam-agenda
The main purpose for this section is to add every node that has a "TODO" into org-agenda, so I can see all the "TODO"s
among all the files in org-roam in a single agenda-view. The code was borrowed from vulpea.
#+begin_src elisp

  (defun vulpea-project-p ()
    "Return non-nil if current buffer has any todo entry.
  TODO entries marked as done are ignored, meaning the this
  function returns nil if current buffer contains only completed
  tasks."
    (seq-find                                 ; (3)
     (lambda (type)
       (eq type 'todo))
     (org-element-map                         ; (2)
         (org-element-parse-buffer 'headline) ; (1)
         'headline
       (lambda (h)
         (org-element-property :todo-type h)))))

  (defun vulpea-project-update-tag ()
    "Update PROJECT tag in the current buffer."
    (when (and (not (active-minibuffer-window))
               (vulpea-buffer-p))
      (save-excursion
        (goto-char (point-min))
        (let* ((tags (vulpea-buffer-tags-get))
               (original-tags tags))
          (if (vulpea-project-p)
              (setq tags (cons "project" tags))
            (setq tags (remove "project" tags)))

          ;; cleanup duplicates
          (setq tags (seq-uniq tags))

          ;; update tags if changed
          (when (or (seq-difference tags original-tags)
                    (seq-difference original-tags tags))
            (apply #'vulpea-buffer-tags-set tags))))))

  (defun vulpea-buffer-p ()
    "Return non-nil if the currently visited buffer is a note."
    (and buffer-file-name
         (string-prefix-p
          (expand-file-name (file-name-as-directory org-roam-directory))
          (file-name-directory buffer-file-name))))

  (defun vulpea-project-files ()
    "Return a list of note files containing 'project' tag." ;
    (seq-uniq
     (seq-map
      #'car
      (org-roam-db-query
       [:select [nodes:file]
                :from tags
                :left-join nodes
                :on (= tags:node-id nodes:id)
                :where (like tag (quote "%\"project\"%"))]))))

  (defun vulpea-agenda-files-update (&rest _)
    "Update the value of `org-agenda-files'."
    (setq org-agenda-files (vulpea-project-files)))

  (add-hook 'find-file-hook #'vulpea-project-update-tag)
  (add-hook 'before-save-hook #'vulpea-project-update-tag)

  (advice-add 'org-agenda :before #'vulpea-agenda-files-update)

  ;; functions borrowed from `vulpea' library
  ;; https://github.com/d12frosted/vulpea/blob/6a735c34f1f64e1f70da77989e9ce8da7864e5ff/vulpea-buffer.el

  (defun vulpea-buffer-tags-get ()
    "Return filetags value in current buffer."
    (vulpea-buffer-prop-get-list "filetags" " "))

  (defun vulpea-buffer-tags-set (&rest tags)
    "Set TAGS in current buffer.
  If filetags value is already set, replace it."
    (vulpea-buffer-prop-set "filetags" (string-join tags " ")))

  (defun vulpea-buffer-tags-add (tag)
    "Add a TAG to filetags in current buffer."
    (let* ((tags (vulpea-buffer-tags-get))
           (tags (append tags (list tag))))
      (apply #'vulpea-buffer-tags-set tags)))

  (defun vulpea-buffer-tags-remove (tag)
    "Remove a TAG from filetags in current buffer."
    (let* ((tags (vulpea-buffer-tags-get))
           (tags (delete tag tags)))
      (apply #'vulpea-buffer-tags-set tags)))

  (defun vulpea-buffer-prop-set (name value)
    "Set a file property called NAME to VALUE in buffer file.
  If the property is already set, replace its value."
    (setq name (downcase name))
    (org-with-point-at 1
      (let ((case-fold-search t))
        (if (re-search-forward (concat "^#\\+" name ":\\(.*\\)")
                               (point-max) t)
            (replace-match (concat "#+" name ": " value) 'fixedcase)
          (while (and (not (eobp))
                      (looking-at "^[#:]"))
            (if (save-excursion (end-of-line) (eobp))
                (progn
                  (end-of-line)
                  (insert "\n"))
              (forward-line)
              (beginning-of-line)))
          (insert "#+" name ": " value "\n")))))

  (defun vulpea-buffer-prop-set-list (name values &optional separators)
    "Set a file property called NAME to VALUES in current buffer.
  VALUES are quoted and combined into single string using
  `combine-and-quote-strings'.
  If SEPARATORS is non-nil, it should be a regular expression
  matching text that separates, but is not part of, the substrings.
  If nil it defaults to `split-string-default-separators', normally
  \"[ \f\t\n\r\v]+\", and OMIT-NULLS is forced to t.
  If the property is already set, replace its value."
    (vulpea-buffer-prop-set
     name (combine-and-quote-strings values separators)))

  (defun vulpea-buffer-prop-get (name)
    "Get a buffer property called NAME as a string."
    (org-with-point-at 1
      (when (re-search-forward (concat "^#\\+" name ": \\(.*\\)")
                               (point-max) t)
        (buffer-substring-no-properties
         (match-beginning 1)
         (match-end 1)))))

  (defun vulpea-buffer-prop-get-list (name &optional separators)
    "Get a buffer property NAME as a list using SEPARATORS.
  If SEPARATORS is non-nil, it should be a regular expression
  matching text that separates, but is not part of, the substrings.
  If nil it defaults to `split-string-default-separators', normally
  \"[ \f\t\n\r\v]+\", and OMIT-NULLS is forced to t."
    (let ((value (vulpea-buffer-prop-get name)))
      (when (and value (not (string-empty-p value)))
        (split-string-and-unquote value separators))))
#+end_src
*** delve
#+begin_src elisp
(setup delve)
#+end_src

** ox-hugo
#+begin_src elisp
  (setup ox-hugo
    (:load-after ox))
#+end_src
** org-elp for latex live preview
#+begin_src elisp
  (setup org-elp
    (:option org-elp-idle-time 0.5
             org-elp-split-fraction 0.25))
#+end_src
** org-clock
*** org-pomodoro
#+begin_src elisp :tangle no
  (setup org-pomodoro
    (:option org-pomodoro-finished-sound "~/Documents/emacs/other-files/applaud.wav"))
#+end_src
** org-noter
#+begin_src elisp
  (setup org-noter
    (:option
     org-noter-notes-search-path (list org-directory)
     org-noter-auto-save-last-location t
     org-noter-separate-notes-from-heading nil
     org-noter-doc-split-percentage '(0.6 . 0.4)))
#+end_src
** org-present
#+begin_src elisp
(setup org-present)
#+end_src
** org-citar
#+begin_src elisp
  (setup citar
    (:option org-cite-global-bibliography '("~/Documents/emacs/orgmode/bibliography/better_zotero_bib.bib")
             org-cite-insert-processor 'citar
             org-cite-follow-processor 'citar
             org-cite-activate-processor 'citar
             citar-bibliography org-cite-global-bibliography))

  ;; borrowed from https://jethrokuan.github.io/org-roam-guide/ as a method for insert notes for reference
  (defun lewis/org-roam-node-from-cite (keys-entries)
    (interactive (list (citar-select-ref :multiple nil :rebuild-cache t)))
    (let ((title (citar--format-entry-no-widths (cdr keys-entries)
                                                "${author editor}::${title}")))
      (org-roam-capture- :templates
                         '(("r" "reference" plain "%?" :if-new
                            (file+head "reference/${citekey}.org"
                                       ":PROPERTIES:
  :ROAM_REFS: [cite:@${citekey}]
  :END:
  ,#+title: ${title}\n")
                            :unnarrowed t))
                         :info (list :citekey (car keys-entries))
                         :node (org-roam-node-create :title title)
                         :props '(:finalize find-file))))
#+end_src
* 翻译
** go-translate
#+begin_src elisp
  (setup go-translate
    (:option gts-translate-list '(("en" "zh")))
    (defun my-gts-translate-posframe ()
      (interactive)
      (if (not (featurep 'go-translate))
          (require 'go-translate))
      (defvar my-translator-posframe
        (gts-translator
                        :picker (gts-noprompt-picker)
                        :engines (gts-google-rpc-engine)
                        :render (gts-posframe-pop-render)))
      (gts-translate my-translator-posframe))
    )
#+end_src
** company-english-helper
#+begin_src elisp
  (setup company-english-helper
    (:autoload toggle-company-english-helper))
#+end_src
* 阅读
** pdf-tools
#+begin_src elisp
  (setup pdf-tools
    (:option pdf-view-use-scaling t)
    (:with-map pdf-view-mode-map
      (:bind "h" pdf-annot-add-highlight-markup-annotation))
    (pdf-loader-install)
    (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1))))

  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
        TeX-source-correlate-start-server t)

  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)
#+end_src
** elfeed
#+begin_src elisp
  (setup elfeed
    (setq elfeed-feeds
          '("http://ruzkuku.com/all.atom"
            "https://karthinks.com/index.xml"
            "https://shom.dev/index.xml"
            "https://blog.benoitj.ca/posts/index.xml"
            "https://protesilaos.com/codelog.xml"
            "https://sachachua.com/blog/feed/"
            "https://nullprogram.com/feed/"
            "https://irreal.org/blog/?feed=rss2"
            "https://ambrevar.xyz/atom.xml"
            "https://guix.gnu.org/feeds/blog.atom"
            "https://valdyas.org/fading/feed/"
            "https://manateelazycat.github.io/feed.xml"
  )))
#+end_src
** darkroom
Simple distraction-free editing. I use darkroom instead of writeroom because it's more simple
#+begin_src elisp
  (setup darkroom)
#+end_src
* tools
** restart-emacs
#+begin_src elisp
  (setup restart-emacs)
#+end_src
** xwidget
#+begin_src elisp
  (defun lewis/url-browser-new-buffer(url &optional new-session)
      (interactive (progn
                 (require 'browse-url)
                 (browse-url-interactive-arg "xwidget-webkit URL: ")))
      (xwidget-webkit-browse-url url t))

  (setq browse-url-browser-function 'lewis/url-browser-new-buffer)
#+end_src
** oj.el for online program contest
#+begin_src elisp
      (setup oj
        (:option oj-default-online-judge 'codeforces))
#+end_src
** eaf
#+begin_src elisp :tangle no
  (setup (:pkg eaf :host github :repo "emacs-eaf/emacs-application-framework" :files ("*.el"))
    (:option eaf--mac-enable-rosetta t)
    (add-to-list 'load-path "~/.emacs.d/straight/repos/emacs-application-framework")
    (require 'eaf)
    )

  (setup eaf-browser
    (:autoload eaf-open-browser))
  (setup eaf-pdf-viewer
    (:autoload eaf-open-pdf-from-history))
  (setup eaf-rss-reader
    (:autoload eaf-open-rss-reader))
#+end_src
** Simulate company with corfu
Company is wide-used, but I use corfu for its simplity. So I add a simulation for some packages which use
company. Currently, These codes are test only with English-helper, which is a great package helping writing English.

Everytime you want to use a command that relys on =company-mode= such as =toggle-company-english-helper=, you should first call =simulate-company-with-corfu= using =M-x= manually.
#+begin_src elisp
  (defun simulate-company-with-corfu()
    (interactive)
    (defvaralias 'company-candidates 'corfu--candidates)
    (defalias 'company-mode 'corfu-mode) ;; should be deleted
    (defvaralias 'company-mode 'corfu-mode) ;; should be deleted
    (setq company-backends '())
    (setq completion-at-point-functions-backup completion-at-point-functions)
    (provide 'company)

    (defun set-completion-functions ()
      (setq completion-at-point-functions (cl-concatenate 'list (mapcar #'cape-company-to-capf company-backends) completion-at-point-functions-backup)))

    (defun company-grab-symbol ()
      "If point is at the end of a symbol, return it.
    Otherwise, if point is not inside a symbol, return an empty string."
      (if (looking-at "\\_>")
          (buffer-substring (point) (save-excursion (skip-syntax-backward "w_")
                                                    (point)))
        (unless (and (char-after) (memq (char-syntax (char-after)) '(?w ?_)))
          "")))
    (advice-add 'toggle-company-english-helper :after #'set-completion-functions)
    )
#+end_src
