 #+TITLE: Emacs Configuration
#+PROPERTY: header-args:elisp :tangle ~/.emacs.d/init.el
I feel in love denote, preview org-roam configs are refiled in [[file:useful-tools/old-elisps/org-roam-config.org][org-roam configs]]
* Content                                                               :toc:
- [[#startup-config][Startup config]]
  - [[#ui-speed-up][UI speed up]]
  - [[#generic][generic]]
- [[#package-management][Package Management]]
- [[#gcmh][gcmh]]
- [[#keyboard-bindings][Keyboard Bindings]]
  - [[#meow][meow]]
  - [[#meow-commands-like-vim][meow commands like vim]]
  - [[#transient-for-leader-keybindings][transient for leader-keybindings]]
  - [[#meow-leader-keys][meow leader keys]]
  - [[#which-key][which-key]]
- [[#ui][UI]]
  - [[#font][Font]]
  - [[#variable-pitch--and-cn-en-fixed-pitch-faces][variable-pitch  and cn-en-fixed-pitch faces]]
  - [[#variable-pitch-faces][variable-pitch faces]]
  - [[#theme][Theme]]
  - [[#all-the-icons][all-the-icons]]
  - [[#rainbow-delimiters][rainbow-delimiters]]
  - [[#diff-hl][diff-hl]]
  - [[#emacs-dashboard][emacs-dashboard]]
  - [[#doom-modeline][doom-modeline]]
  - [[#awesome-tray][awesome-tray]]
  - [[#hl-todo][hl-todo]]
  - [[#pulsar][pulsar]]
  - [[#tab-line][tab-line]]
- [[#general-configuration][General Configuration]]
  - [[#simple][simple]]
  - [[#general-modes][general modes]]
  - [[#backup][backup,]]
  - [[#no-littering][no-littering]]
  - [[#recentf][recentf]]
  - [[#自动换行][自动换行]]
  - [[#so-long][so-long]]
  - [[#tramp][TRAMP]]
  - [[#automatically-clean-whitespace][Automatically clean whitespace]]
  - [[#exec-path-from-shell][exec-path-from-shell]]
  - [[#undo][Undo]]
- [[#补全][补全]]
  - [[#completions-with-vertico][Completions with Vertico]]
  - [[#orderless][Orderless]]
  - [[#consult-commands][Consult Commands]]
  - [[#marginalia][Marginalia]]
  - [[#embark][embark]]
  - [[#corfuinstead-of-company][corfu(instead of company)]]
  - [[#corfu-all-the-icons][corfu-all-the-icons]]
  - [[#yasnippet][yasnippet]]
  - [[#rgel][rg.el]]
- [[#window-management][Window Management]]
  - [[#winner-mode][winner-mode]]
  - [[#popper][popper]]
  - [[#move][Move]]
- [[#ibuffer][ibuffer]]
  - [[#ibuffer-1][ibuffer]]
- [[#input][Input]]
  - [[#pyim][pyim]]
- [[#file-and-browsing][File and Browsing]]
  - [[#file-browsing][file browsing]]
  - [[#structure-browsing][structure browsing]]
  - [[#perspective][perspective]]
  - [[#project][project]]
- [[#shell][shell]]
  - [[#vterm][vterm]]
  - [[#vterm-toggle][vterm-toggle]]
- [[#git][git]]
  - [[#magit][magit]]
  - [[#ediff][ediff]]
- [[#program][Program]]
  - [[#language][Language]]
  - [[#useful-programing-tools][Useful programing tools]]
- [[#org-mode][Org Mode]]
  - [[#org-mode-1][org-mode]]
  - [[#org-modern][org-modern]]
  - [[#org-appear][org-appear]]
  - [[#org-download][org-download]]
  - [[#ox-hugo][ox-hugo]]
  - [[#org-clock][org-clock]]
  - [[#org-noter][org-noter]]
  - [[#org-present][org-present]]
  - [[#citar][citar]]
  - [[#toc-org][toc-org]]
  - [[#ebib][ebib]]
  - [[#denote][denote]]
- [[#翻译][翻译]]
  - [[#go-translate][go-translate]]
  - [[#insert-translated-name][insert-translated-name]]
  - [[#corfu-english-helper][corfu-english-helper]]
- [[#阅读][阅读]]
  - [[#pdf-tools][pdf-tools]]
  - [[#elfeed][elfeed]]
  - [[#nov][nov]]
  - [[#darkroom][darkroom]]
- [[#tools][tools]]
  - [[#xwidget][xwidget]]
  - [[#ojel-for-online-program-contest][oj.el for online program contest]]
  - [[#eaf][eaf]]
  - [[#proxy][proxy]]
  - [[#app-launcher][app-launcher]]
  - [[#gif-screencast][gif-screencast]]

* Startup config
** UI speed up
#+begin_src elisp :tangle ~/.emacs.d/early-init.el
  ;; -*- lexical-binding: t; -*-
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.5) ;;defer gc futher back

  ;; Package initialize occurs automatically, before `user-init-file' is
  ;; loaded, but after `early-init-file'. We handle package
  ;; initialization, so we must prevent Emacs from doing it early!
  (setq package-enable-at-startup nil)

  ;; Inhibit resizing frame
  (setq frame-inhibit-implied-resize t)

  ;; (add-to-list 'default-frame-alist '(undecorated . t))
  ;; Faster to disable these here (before they've been initialized)
  (push '(alpha-background . 85) default-frame-alist)
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  ;; (push '(undecorated . t) default-frame-alist)
  (setq initial-major-mode 'fundamental-mode ;; 默认用最简单的模式
        package--init-file-ensured t
        inhibit-startup-message t             ; 关闭启动 Emacs 时的欢迎界面
        )
#+end_src
** generic
#+begin_src elisp
  ;; -*- lexical-binding: t; -*-
  (add-to-list 'load-path (expand-file-name "lib/borg" user-emacs-directory))
  (require 'borg)
  (setq borg-rewrite-urls-alist
        '(("git@github.com:" . "https://github.com/")
          ("git@gitlab.com:" . "https://gitlab.com/")))
  (borg-initialize)
#+end_src

The following content is not enabled yet, because I want to minimize unnecessary settings as much as possible
#+begin_src elisp :tangle no
  ;; Restore emacs session.
  (setq initial-buffer-choice t)
  (run-with-timer 1 nil #'(lambda () (bury-buffer)))
  ;; 增加IO性能
  (setq process-adaptive-read-buffering nil)
  (setq read-process-output-max (* 1024 1024))

  (transient-mark-mode 1)                 ;标记高亮
  (global-subword-mode 1)                 ;Word移动支持 FooBar 的格式
  (setq initial-scratch-message "") ;关闭启动空白buffer, 这个buffer会干扰session恢复
  (setq-default comment-style 'indent)    ;设定自动缩进的注释风格
  (setq default-major-mode 'text-mode)    ;设置默认地主模式为TEXT模式
  (setq x-select-enable-clipboard t)      ;支持emacs和外部程序的粘贴
  (setq split-width-threshold nil)        ;分屏的时候使用上下分屏
  (setq inhibit-compacting-font-caches t) ;使用字体缓存，避免卡顿
  (setq confirm-kill-processes nil)       ;退出自动杀掉进程
  (setq async-bytecomp-allowed-packages nil) ;避免magit报错
  (setq profiler-report-cpu-line-format ;让 profiler-report 第一列宽一点
        '((100 left)
          (24 right ((19 right)
                     (5 right)))))
  (setq profiler-report-memory-line-format
        '((100 left)
          (19 right ((14 right profiler-format-number)
                     (5 right)))))

  ;; (add-hook 'find-file-hook 'highlight-parentheses-mode t) ;增强的括号高亮
  (setq ad-redefinition-action 'accept)   ;不要烦人的 redefine warning
#+end_src

* Package Management
I use borg to manage packages, so setup.el is only used to config packages quickly, I write several macros in [[https://github.com/nowislewis/nowisemacs-base.git][nowisemacs-base]]. It should be noticed that if you use only a =init.el= file, all the funcs or macros defined in =init.el= can't pass native comp, so move these things that you defined yourself to a seperate repo(nowisemacs-base) will resolve this problem.
#+begin_src elisp
  (setup compat)
  (setup closql)
  (setup emacsql)
  (setup epkg)
  ;;setup
  (require 'nowisemacs-base)
#+end_src
* gcmh
Enforce a sneaky Garbage Collection strategy to minimize GC interference with user activity.
#+begin_src elisp
  (setup gcmh
    (:defer
     (gcmh-mode 1)))
#+end_src
* Keyboard Bindings
I used to be a vim(evil) user, but now I use meow to manage all my keys.
** meow
#+begin_src elisp
  (setup meow
    (require 'meow)
    (:option meow-use-keypad-when-execute-kbd nil
             meow-expand-exclude-mode-list nil
             meow-use-clipboard t
             meow-cursor-type-normal '(bar . 5)
             meow-cursor-type-insert '(bar . 1)
             meow-replace-state-name-list '((normal . "N")
                                            (motion . "M")
                                            (keypad . "K")
                                            (insert . "I")
                                            (beacon . "B"))
             meow-use-enhanced-selection-effect t
             meow-cheatsheet-layout meow-cheatsheet-layout-qwerty
             meow-keypad-start-keys '((?c . ?c)
                                      (?x . ?x))
             )
             ;; motion keys
             (meow-motion-overwrite-define-key '("j" . meow-next)
                                               '("k" . meow-prev)
                                               '("<escape>" . ignore)
                                               '("." . repeat))
             ;; normal keys
             (meow-normal-define-key '("0" . meow-expand-0)
                                     '("9" . meow-expand-9)
                                     '("8" . meow-expand-8)
                                     '("7" . meow-expand-7)
                                     '("6" . meow-expand-6)
                                     '("5" . meow-expand-5)
                                     '("4" . meow-expand-4)
                                     '("3" . meow-expand-3)
                                     '("2" . meow-expand-2)
                                     '("1" . meow-expand-1)
                                     '("a" . meow-append)
                                     '("A" . meow-append-vim)
                                     '("b" . meow-back-word)
                                     '("B" . meow-back-symbol)
                                     '("c" . meow-change)
                                     ;; '("C" . meow-change-save)
                                     '("d" . meow-kill)
                                     '("e" . meow-next-word)
                                     '("E" . meow-next-symbol)
                                     '("f" . meow-find)
                                     ;; '("F" . meow-find-expand)
                                     '("g" . g-extra-commands)
                                     '("G" . meow-grab)
                                     '("h" . meow-left)
                                     '("H" . meow-left-expand)
                                     '("i" . meow-insert)
                                     '("I" . meow-insert-vim)
                                     '("j" . meow-next)
                                     '("J" . meow-next-expand)
                                     '("k" . meow-prev)
                                     '("K" . meow-prev-expand)
                                     '("l" . meow-right)
                                     '("L" . meow-right-expand)
                                     '("m" . consult-register-store)
                                     ;; '("M" . meow-mark-symbol)
                                     '("M" . meow-block)
                                     '("n" . meow-search)
                                     '("N" . meow-pop-selection)

                                     '("o" . meow-open-below)
                                     '("O" . meow-open-above)
                                     '("p" . meow-yank)
                                     '("P" . meow-yank-pop)
                                     '("q" . meow-quit)
                                     '("Q" . goto-line)
                                     '("r" . meow-replace)
                                     '("R" . meow-swap-grab)
                                     '("s" . meow-line)
                                     '("S" . meow-kmacro-lines)
                                     '("t" . meow-till)
                                     '("u" . meow-undo)
                                     '("U" . vundo)
                                     '("v v" . meow-visit)
                                     '("V" . meow-kmacro-matches)
                                     '("w" . meow-mark-word)
                                     '("W" . meow-mark-symbol)

                                     '("x" . meow-delete)
                                     '("X" . meow-backward-delete)
                                     '("y" . meow-save)
                                     '("z a" . hs-toggle-hiding)
                                     '("z c" . hs-hide-block)
                                     '("z o" . hs-show-block)
                                     '("z m" . hs-hide-all)
                                     '("z r" . hs-show-all)
                                     '("v i" . meow-inner-of-thing)
                                     '("v a" . meow-bounds-of-thing)
                                     '("v \'" . insert-quotations)
                                     '("v \"" . insert-quotes)
                                     '("v \`" . insert-backquote)
                                     '("v *" . insert-star)
                                     '("v (" . insert-parentheses)
                                     '("v [" . insert-bracket)
                                     '("v {" . insert-curly)
                                     '("v =" . insert-equation)

                                     '("<escape>" . ignore)
                                     '("!" . meow-start-kmacro-or-insert-counter)
                                     '("@" . meow-end-or-call-kmacro)
                                     '("#" . symbol-overlay-put)
                                     '("^" . meow-join)
                                     '("*" . symbol-overlay-put)
                                     '("-" . negative-argument)
                                     ;; '("=" . format-all-region)
                                     '("=" . indent-region)
                                     '("[" . meow-beginning-of-thing)
                                     '("]" . meow-end-of-thing)
                                     '("\\" . quoted-insert)
                                     '(";" . meow-expand-1)
                                     '(":" . async-shell-command)
                                     '("'" . consult-register-load)
                                     '("," . meow-reverse)
                                     '("." . repeat)
                                     ;; '("&" . meow-query-replace)
                                     ;; '("%" . meow-query-replace-regexp)
                                     '("/" . consult-line))
             (meow-global-mode 1))
#+end_src
** meow commands like vim
#+begin_src elisp
  (defun meow-append-vim()
    (interactive)
    (progn (meow-line 1)
           (meow-append)))
  (defun meow-insert-vim()
    (interactive)
    (progn (meow-join 1)
           (meow-append)))
#+end_src
** transient for leader-keybindings
*** Transient
#+begin_src elisp
  (setup transient
    (require 'transient)
    (:with-map transient-base-map
      (:bind "<escape>" transient-quit-one)))
#+end_src
*** G extra commands
#+begin_src elisp
  (transient-define-prefix g-extra-commands()
    "Define notes leader-key maps"
    [["Code find"
      ("d" "find-definitions" xref-find-definitions)
      ("D" "find-references" xref-find-references)
      ("j" "find-apropos" xref-find-apropos)]
     ["Code action"
      ("a" "eglot-code-actions" eglot-code-actions)
      ("r" "eglot-rename" eglot-rename)
      ("f" "format-all-region" format-all-region)
      ("F" "format-all-buffer" format-all-buffer)]
     ["Navigate"
      ("m" "consult-mark" consult-mark)
      ("t" "next-tab" tab-line-switch-to-next-tab :transient t)
      ("T" "preview-tab" tab-line-switch-to-prev-tab :transient t)
      ]
     ])
#+end_src
*** lewis-keybindings
#+begin_src elisp
  (transient-define-prefix leader-map-for-lewis()
    "Define leader-key map for special functions"
    [["Citre"
      ("ca" "ace-peek" citre-ace-peek)
      ("cj" "jump" citre-jump)
      ("cp" "peek" citre-peek)
      ("cJ" "jump-back" citre-jump-back)
      ("cu" "update-this-tags-file" citre-update-this-tags-file)
      ("cr" "peek-restore" citre-peek-restore)
      ("cs" "peek-save-session" citre-peek-save-session)
      ("cl" "peek-load-session" citre-peek-load-session)]
     ["Imenu"
      ("l" "Imenu list smart toggle" imenu-list-smart-toggle)
      ("L" "Boxy imenu" boxy-imenu)]
     ["Insert trsnlated"
      ("ii" "name insert" insert-translated-name-insert)
      ("ir" "name replace" insert-translated-name-replace)]
     ;; english help
     ["English helper"
      ("ht" "Toggle corfu english helper" toggle-corfu-english-helper)]
     ;; org-download
     ["Org download"
      ("d" "Screenshot" org-download-screenshot)]
     ["Youdao"
      ("yp" "Translate posframe" my-gts-translate-posframe)
      ("yi" "Translate input" gts-do-translate)]])
#+end_src
*** search-keybindings
#+begin_src elisp
  (transient-define-prefix leader-map-for-search()
    "Define leader-key map for special functions"
    [["Search"
      ("b" "consult-buffer" consult-buffer)
      ("d" "consult-ripgrep" consult-ripgrep)
      ("D" "ripgrep-search-other-dir" lewis/ripgrep-search-other-dir)
      ("f" "consult-find" consult-find)
      ("F" "find-file-other-dir" lewis/find-file-other-dir)
      ("g" "rg" rg)
      ("h" "consult-history" consult-history)
      ("i" "consult-imenu" consult-imenu)
      ("j" "consult-dir" consult-dir)
      ("s" "consult-line" consult-line)
      ]])
#+end_src

*** notes-keybindings
#+begin_src elisp
  (transient-define-prefix leader-map-for-notes()
    "Define notes leader-key maps"
    [["New notes"
      ("f" "find notes" find-denote-file-dir)
      ("n" "denote" denote)
      ("d" "date" denote-date)
      ("t" "type" denote-type)
      ("s" "subdirectory" denote-subdirectory)]
     ["Link"
      ("l" "link(add)" denote-link)
      ("L" "add links(add)" denote-link-add-links)
      ("b" "backlinks" denote-link-backlinks)]
     ])
#+end_src
*** Apps-keybindings
#+begin_src elisp
  (transient-define-prefix leader-map-for-apps()
    "Define leader-key map for special functions"
    [["Agenda"
      ("a" "org-agenda" org-agenda)]
     ["Gif-screencast"
      ("gs" "gif-screen-start-or-stop" gif-screencast-start-or-stop)
      ("gp" "gif-screen-pause" gif-screencast-toggle-pause)
      ]
     ["App-launcher"
      ("l" "launcher" app-launcher-run-app)]
     ["Vterm-toggle"
      ("vt" "vterm-toggle" vterm-toggle)
      ("vf" "vterm-toggle-forward" vterm-toggle-forward)
      ("vb" "vterm-toggle-backward" vterm-toggle-backward)]
     ["OJ"
      ("op" "oj-prepare" oj-prepare)
      ("ot" "oj-test" oj-test)
      ("oh" "oj-open-home-dir" oj-open-home-dir)]
     ])
#+end_src
*** buffer-keybindings
#+begin_src elisp
  (transient-define-prefix leader-map-for-buffer()
    "Define leader-key map for buffer functions"
    [["Buffer"
     ("b" "consult-buffer" consult-buffer) ;; work with C-x b
     ("k" "kill-current-buffer" kill-current-buffer)
     ("l" "meow-last-buffer" meow-last-buffer)
     ("n" "next-buffer" next-buffer)
     ("p" "previous-buffer" previous-buffer)
     ("r" "revert-buffer" revert-buffer)]
     ["Bookmark"
     ("j" "bookmark-jump" bookmark-jump)
     ("m" "bookmark-set" bookmark-set)
     ("M" "bookmark-delete" bookmark-delete)]])


#+end_src
** meow leader keys
#+begin_src elisp
  ;; default
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   '("." . "H-.")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))

  ;; buffer
  (meow-leader-define-key
   ;; '("b b" . persp-switch-to-buffer)
   '("b" . leader-map-for-buffer))

  ;; lewisliu
  (meow-leader-define-key
   '("e" . leader-map-for-lewis))

  ;; search
  (meow-leader-define-key
   '("s" . leader-map-for-search)
   )
  ;; appss
  (meow-leader-define-key
   '("a" . leader-map-for-apps))

  (defun find-config-file()
    (interactive)
    (find-file nowisemacs-config-file))

  ;; file
  (meow-leader-define-key
   '("f r" . consult-recent-file)
   '("f p" . find-config-file))

  ;; notes
  (meow-leader-define-key
   '("n r" . leader-map-for-notes)
   '("n d" . find-denote-file-dir)
   '("n e" . org-noter))

  (meow-leader-define-key
   ;;w workspace
   '("TAB". perspective-map))
#+end_src
** which-key
#+begin_src elisp
  (setup which-key
    (:option whick-key-idle-delay 0.1)
    (:defer
     (which-key-mode)))
#+end_src
* UI
** Font
#+begin_src elisp
  (defvar lewis-font-size 140)
  (defvar lewis-fixed-ch-en-font "Sarasa Mono SC Nerd")
  (defun font-installed-p (font-name)
    "Check if font with FONT-NAME is available."
    (find-font (font-spec :name font-name)))

  (when (display-graphic-p)
    ;; Set default font
    (cl-loop for font in '(
                           ;; "InconsolataGo QiHei NF"
                           ;; "yaheiInconsolata"
                           "JetBrainsMono Nerd Font"
                           "JetBrains Mono"
                           "Sarasa Mono SC Nerd"
                           "Monaco"
                           "Consolas")
             when (font-installed-p font)
             return (progn
                      (set-face-attribute 'default nil :family font :height lewis-font-size)
                      (set-face-attribute 'fixed-pitch nil :family font :height 1.0)))

    ;; variable-pitch
    (cl-loop for font in '("Noto Sans CJK SC" "Arial" "Helvetica" "Times New Roman")
             when (font-installed-p font)
             return (set-face-attribute 'variable-pitch nil :family font :height 1.0))

    ;; Specify font for all unicode characters
    ;; (cl-loop for font in '("Symbola" "Symbol")
    ;;          when (font-installed-p font)
    ;;          return(set-fontset-font t 'unicode font nil 'prepend))

    ;; ;; Specify font for Chinese characters
    ;; (cl-loop for font in '("Noto Sans CJK SC" "Microsoft Yahei")
    ;;          when (font-installed-p font)
    ;;          return (set-fontset-font t '(#x4e00 . #x9fff) font))
    )
#+end_src
** variable-pitch  and cn-en-fixed-pitch faces
#+begin_src elisp
  (setup mixed-pitch
    (:hook-into text-mode)
    (:when-loaded
      (delete 'org-table mixed-pitch-fixed-pitch-faces)))

  ;; 中英文严格等宽字体设置
  (with-eval-after-load 'org
    (dolist (fixed-chinese-english-face '(org-table))
      (set-face-attribute fixed-chinese-english-face nil :family "Sarasa Mono SC Nerd" :height 1.0)))

#+end_src
** variable-pitch faces
Not enabled, now use mixed-pitch
#+begin_src elisp :tangle no
  ;; 非等宽字体设置
  (dolist (variable-face '(org-default))
    (set-face-attribute variable-face nil :inherit 'variable-pitch))
  ;; 英文等宽字体(无需中英文对齐)
  (dolist (variable-face '(org-level-1))
    (set-face-attribute variable-face nil :inherit 'fixed-pitch))
  ;; 中英文等宽字体设置
  (dolist (fixed-chinese-english-face '(org-table))
    (set-face-attribute fixed-chinese-english-face nil :family lewis-fixed-ch-en-font :height 1.0))
#+end_src
** Theme
*** modus
Modus-themes is great especailly for org mode
#+begin_src elisp
  ;; (setup modus-themes
  ;;   (:option modus-themes-org-blocks 'tinted-background
  ;;            ;; modus-themes-mode-line '(3d)
  ;;            modus-themes-mode-line '(3d accented)
  ;;            modus-themes-hl-line '(intense accented)
  ;;            modus-themes-paren-match '(intense bold underline)
  ;;            modus-themes-subtle-line-numbers t)
  ;;   ;; (load-theme 'modus-vivendi))
  ;;   (load-theme 'modus-operandi))
#+end_src
*** doom-themes
#+begin_src elisp
  (setup doom-themes
    (load-theme 'doom-monokai-classic t)
    (:when-loaded
      ;; ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)
      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config)))
#+end_src

** all-the-icons
I'm thinking about removing this package, but it's pretty good so far
*** all-the-icons
#+begin_src elisp
  (setup all-the-icons
    (:option all-the-icons-scale-factor 1.0))
  (setup all-the-icons-completion
    (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))
#+end_src

** rainbow-delimiters
rainbow-delimiters is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth.
#+begin_src elisp
  (setup rainbow-delimiters
    (:hook-into prog-mode))
#+end_src
** diff-hl
diff-hl-mode highlights uncommitted changes on the left side of the window (area also known as the "gutter"), allows you to jump between and revert them selectively.
#+begin_src elisp
  (setup diff-hl
    ;; (:hook-into text-mode prog-mode)
    (:when-loaded
      (diff-hl-margin-mode)))
#+end_src
** emacs-dashboard
#+begin_src elisp
  (setup dashboard
    (:option dashboard-items '((recents . 5)
                               ;; (agenda . 5)
                               (bookmarks . 5)
                               ;; (projects . 5)
                               )
             dashboard-set-heading-icons t
             dashboard-set-file-icons t
             dashboard-center-content t
             dashboard-startup-banner (concat nowisemacs-config-useful-tools "banner.txt")
             dashboard-set-init-info t)
    (dashboard-setup-startup-hook))
#+end_src
** doom-modeline
#+begin_src elisp
  (setup dash)
  (setup s)
  (setup f)
  (setup shrink-path) ;; <-(setup s)(setup f)

  (setup doom-modeline
    (:option doom-modeline-window-width-limit fill-column
             doom-modeline-height 20
             doom-modeline-hud t
             ;; doom-modeline-icon nil
             doom-modeline-unicode-fallback t)
    (:hook-into after-init))
#+end_src
** awesome-tray
#+begin_src elisp :tangle no
  (setup awesome-tray
    (:option awesome-tray-ellipsis "⬇️"
             awesome-tray-separator "  " ;;"∲"
             awesome-tray-file-path-show-filename t
             awesome-tray-update-interval 0.2

             awesome-tray-buffer-name-buffer-changed t
             awesome-tray-git-format "🌿%b"
             )
    (:defer (awesome-tray-mode))
    (:when-loaded
      (defun pyim-awesome-tray()
        (concat current-input-method-title))
      (defun persp-awesome-tray()
        (concat "[" (persp-current-name) "]"))

      (defun meow-awesome-tray()
        (concat "<" (meow-indicator) ">"))
      (add-to-list 'awesome-tray-module-alist '("meow" . (meow-awesome-tray awesome-tray-module-last-command-face)))
      (add-to-list 'awesome-tray-module-alist '("pyim" . (pyim-awesome-tray awesome-tray-module-input-method-face)))
      (add-to-list 'awesome-tray-module-alist '("persp" . (persp-awesome-tray awesome-tray-module-location-face)))

      (setq awesome-tray-active-modules (list "meow" "flymake" "location" "belong" "buffer-read-only" "file-path"  "pyim" "persp"  "mode-name" "git"))
      ))
#+end_src
** hl-todo
#+begin_src elisp
  ;; 0.48
  (setup hl-todo
    (:defer
     (global-hl-todo-mode))
    )
#+end_src
** pulsar
#+begin_src elisp
  (setup pulsar
    (:defer
     (pulsar-global-mode 1)
     ))
#+end_src
** tab-line
#+begin_src elisp
    (setup tab-line
      (:option tab-line-new-button-show nil
               tab-line-close-button-show nil)
      (:defer (global-tab-line-mode))
      )
#+end_src
* General Configuration
** simple
#+begin_src elisp
  ;; Show line/column number and more
  (setup simple
    ;; show line/column/filesize in modeline
    (:option line-number-mode t
             column-number-mode t
             size-indication-mode t
             ;; visual-line-fringe-indicators '(nil right-curly-arrow)
             ;; eliminate duplicates
             kill-do-not-save-duplicates t
             ;; show cwd when `shell-command' and `async-shell-command'
             shell-command-prompt-show-cwd t
             ;; show the name of character in `what-cursor-position'
             what-cursor-show-names t))
#+end_src
** general modes
#+begin_src elisp
  (setup save-place
    (:defer save-place-mode))

  (setup autorevert
    (:defer (global-auto-revert-mode t)))                  ; 当另一程序修改了文件时，让 Emacs 及时刷新 Buffer
  (setup hl-line
    (:defer
     (global-hl-line-mode)))
  (setup frame
    (:defer (blink-cursor-mode -1)                  ;指针不闪动
            ))

  (setup pixel-scroll
    (:defer
     (pixel-scroll-precision-mode t)))
  ;; 最近发现和 pdf-view-mode 工作不协调
  (setup repeat
    (:defer (repeat-mode)))
#+end_src
** backup,
*** super-save
#+begin_src elisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)

  (setup super-save
    (:option super-save-auto-save-when-idle t)
    (:defer
     (super-save-mode 1))
    )
#+end_src
*** savehist
#+begin_src elisp
    (setup savehist
      (:option history-length 10000
               history-delete-duplicates t)
      (:defer
       (savehist-mode)))
#+end_src
** no-littering
#+begin_src lisp
  (setup no-littering)
#+end_src
** recentf
#+begin_src elisp
  (setup recentf
    (:also-load no-littering)
    (:option recentf-max-saved-items 1000
             recentf-exclude `("/tmp/" "/ssh:" ,(concat user-emacs-directory "lib/.*-autoloads\\.el\\'")))
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory)
    (:defer
     (recentf-mode)))
#+end_src
** 自动换行
#+begin_src elisp
  (setq fill-column 120)          ;默认显示 100列就换行
  (setq word-wrap t)
  (setq word-wrap-by-category t)
  (global-visual-line-mode)
  ;; (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src
** so-long
解决长行卡死问题
#+begin_src elisp
  (setup so-long
    (:defer
     (global-so-long-mode 1)))
#+end_src
** TRAMP
#+begin_src elisp
  (setq tramp-default-method "ssh")
#+end_src
** Automatically clean whitespace
#+begin_src elisp
  (setup ws-butler
    (:hook-into text-mode prog-mode))
#+end_src
** exec-path-from-shell
#+begin_src elisp
  ;; 可以优化速度, 建议看一下官网的一篇文章
  (setup exec-path-from-shell
    (:defer
     (exec-path-from-shell-initialize)))
#+end_src
** Undo
*** vundo for undo history
#+begin_src elisp
  (setup vundo
    (:bind "l" vundo-forward
           "h" vundo-backward
           "j" vundo-next
           "k" vundo-previous))
#+end_src
* 补全
** Completions with Vertico
#+begin_src elisp
  (setup vertico
    (:option vertico-cycle t)
    (:with-map vertico-map
      (:bind [backspace] vertico-directory-delete-char))
     (vertico-mode)
    )
#+end_src
** Orderless
#+begin_src elisp
  (setup orderless
    (:option completion-styles '(orderless)
             completion-category-defaults nil
             completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src
** Consult Commands
*** consult
#+begin_src elisp
  (setup consult
    (:option register-preview-delay 0.1
             register-preview-function #'consult-register-format
             xref-show-xrefs-function #'consult-xref
             xref-show-definitions-function #'consult-xref
             consult-project-root-function (lambda ()
                                             (when-let (project (project-current))
                                               (car (project-roots project)))))
  (:with-map minibuffer-local-map
    (:bind "C-r" consult-history)))
  ;; (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple))
#+end_src
*** search other cwd
#+begin_src elisp
  (defun lewis/ripgrep-search-other-dir()
    (interactive)
    (let ((current-prefix-arg '(-1)))
      (call-interactively 'consult-ripgrep)))

  (defun lewis/find-file-other-dir()
    (interactive)
    (let ((current-prefix-arg '(-1)))
      (call-interactively 'consult-find)))
#+end_src
*** consult-dash
#+begin_src elisp
  (setup dash-docs
    (:option dash-docs-docsets-path (concat no-littering-var-directory "dash-docsets")
             dash-docs-common-docsets '("C++" "CMake"))
    )
  (setup consult-dash)
    #+end_src
*** consult-dir
#+begin_src elisp
  (setup consult-dir)
#+end_src
*** consult-notes
#+begin_src elisp
  (setup consult-notes
    (:option consult-notes-sources '(("Name" ?n "~/Documents/emacs/orgmode/roam/"))))
#+end_src

** Marginalia
#+begin_src elisp
  (setup epkg-marginalia)
  (setup marginalia
    (:option marginalia-annotators '(marginalia-annotators-heavy
                                     marginalia-annotators-light
                                     nil))
    (:when-loaded
      (cl-pushnew 'epkg-marginalia-annotate-package
                  (alist-get 'package marginalia-annotator-registry)))
    (:hook-into after-init))
#+end_src
** embark
should be check after reading the embark.el manual
#+begin_src elisp
  (setup embark-consult
    (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode))

  (setup embark
    (:also-load embark-consult)
    (setq prefix-help-command 'embark-prefix-help-command)
    (:global "C-S-a" embark-act))

  (setup wgrep)
#+end_src
** corfu(instead of company)
#+begin_src elisp
  ;;0.585
  (setup corfu
    (:option corfu-cycle t                ;; Enable cycling for `corfu-next/previous'
             corfu-auto t                 ;; Enable auto completion
             corfu-quit-no-match t        ;; Automatically quit if there is no match
             corfu-preview-current nil    ;; Disable current candidate preview
             ;; corfu-echo-documentation nil ;; Disable documentation in the echo area
             corfu-auto-prefix 1
             corfu-auto-delay 0.01
             )
    (:with-map corfu-map
      (:bind
       ;; [tab] corfu-next
       ;;       [backtab] corfu-previous
       "<escape>" corfu-quit))
    (:defer
     (global-corfu-mode)
     (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)
     )
    )

  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active."
    (unless (or (bound-and-true-p mct--active)
                (bound-and-true-p vertico--input))
      ;; (setq-local corfu-auto nil) Enable/disable auto completion
      (corfu-mode 1)))

  (setup cape
    (add-to-list 'completion-at-point-functions #'cape-file)
    ;; (add-to-list 'completion-at-point-functions #'cape-tex)
    ;; (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    ;; (add-to-list 'completion-at-point-functions #'cape-keyword)
    )

  ;; Enable Corfu completion UI
  (setup corfu-doc
    (:hook-into corfu-mode))
#+end_src
** corfu-all-the-icons
#+begin_src elisp
  (setup corfu-all-the-icons
    (:with-feature corfu
      (:when-loaded
        (require 'all-the-icons)

        (defvar kind-all-the-icons--cache nil
          "The cache of styled and padded label (text or icon).
  An alist.")

        (defun kind-all-the-icons-reset-cache ()
          "Remove all cached icons from `kind-all-the-icons-mapping'."
          (interactive)
          (setq kind-all-the-icons--cache nil))

        (defun kind-all-the-icons--set-default-clear-cache (&rest args)
          (kind-all-the-icons-reset-cache)
          (apply #'set-default args))

        (defvar kind-all-the-icons--icons
          `((unknown . ,(all-the-icons-material "find_in_page" :height 0.8 :v-adjust -0.15))
            (text . ,(all-the-icons-faicon "text-width" :height 0.8 :v-adjust -0.02))
            (method . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
            (function . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
            (fun . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
            (constructor . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
            (ctor . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
            (field . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
            (variable . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
            (var . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
            (class . ,(all-the-icons-material "settings_input_component" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
            (interface . ,(all-the-icons-material "share" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
            (i/f . ,(all-the-icons-material "share" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
            (module . ,(all-the-icons-material "view_module" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
            (mod . ,(all-the-icons-material "view_module" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
            (property . ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.02))
            (prop . ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.02))
            (unit . ,(all-the-icons-material "settings_system_daydream" :height 0.8 :v-adjust -0.15))
            (value . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
            (enum . ,(all-the-icons-material "storage" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
            (keyword . ,(all-the-icons-material "filter_center_focus" :height 0.8 :v-adjust -0.15))
            (k/w . ,(all-the-icons-material "filter_center_focus" :height 0.8 :v-adjust -0.15))
            (snippet . ,(all-the-icons-material "format_align_center" :height 0.8 :v-adjust -0.15))
            (sn . ,(all-the-icons-material "format_align_center" :height 0.8 :v-adjust -0.15))
            (color . ,(all-the-icons-material "palette" :height 0.8 :v-adjust -0.15))
            (file . ,(all-the-icons-faicon "file-o" :height 0.8 :v-adjust -0.02))
            (reference . ,(all-the-icons-material "collections_bookmark" :height 0.8 :v-adjust -0.15))
            (ref . ,(all-the-icons-material "collections_bookmark" :height 0.8 :v-adjust -0.15))
            (folder . ,(all-the-icons-faicon "folder-open" :height 0.8 :v-adjust -0.02))
            (dir . ,(all-the-icons-faicon "folder-open" :height 0.8 :v-adjust -0.02))
            (enum-member . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15))
            (enummember . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15))
            (member . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15))
            (constant . ,(all-the-icons-faicon "square-o" :height 0.8 :v-adjust -0.1))
            (const . ,(all-the-icons-faicon "square-o" :height 0.8 :v-adjust -0.1))
            (struct . ,(all-the-icons-material "settings_input_component" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
            (event . ,(all-the-icons-octicon "zap" :height 0.8 :v-adjust 0 :face 'all-the-icons-orange))
            (operator . ,(all-the-icons-material "control_point" :height 0.8 :v-adjust -0.15))
            (op . ,(all-the-icons-material "control_point" :height 0.8 :v-adjust -0.15))
            (type-parameter . ,(all-the-icons-faicon "arrows" :height 0.8 :v-adjust -0.02))
            (param . ,(all-the-icons-faicon "arrows" :height 0.8 :v-adjust -0.02))
            (template . ,(all-the-icons-material "format_align_left" :height 0.8 :v-adjust -0.15))
            (t . ,(all-the-icons-material "find_in_page" :height 0.8 :v-adjust -0.15))))


        (defsubst kind-all-the-icons--metadata-get (metadata type-name)
          (or
           (plist-get completion-extra-properties (intern (format ":%s" type-name)))
           (cdr (assq (intern type-name) metadata))))

        (defun kind-all-the-icons-formatted (kind)
          "Format icon kind with all-the-icons"
          (or (alist-get kind kind-all-the-icons--cache)
              (let ((map (assq kind kind-all-the-icons--icons)))
                (let*  ((icon (if map
                                  (cdr map)
                                (cdr (assq t kind-all-the-icons--icons))))
                        (half (/ (default-font-width) 2))
                        (pad (propertize " " 'display `(space :width (,half))))
                        (disp (concat pad icon pad)))
                  (setf (alist-get kind kind-all-the-icons--cache) disp)
                  disp))))

        (defun kind-all-the-icons-margin-formatter (metadata)
          "Return a margin-formatter function which produces kind icons.
  METADATA is the completion metadata supplied by the caller (see
  info node `(elisp)Programmed Completion').  To use, add this
  function to the relevant margin-formatters list."
          (if-let ((kind-func (kind-all-the-icons--metadata-get metadata "company-kind")))
              (lambda (cand)
                (if-let ((kind (funcall kind-func cand)))
                    (kind-all-the-icons-formatted kind)
                  (kind-all-the-icons-formatted t))))) ;; as a backup

        (add-to-list 'corfu-margin-formatters
                     #'kind-all-the-icons-margin-formatter)
        )))
#+end_src
** yasnippet
#+begin_src elisp
  ;; 0.63
  (setup yasnippet
    (:option yas-snippet-dirs (list (concat nowisemacs-config-useful-tools "snippets")))
    (:defer (yas-global-mode)))
#+end_src
** rg.el
#+begin_src elisp
  (setup rg)
#+end_src
* Window Management
** winner-mode
#+begin_src elisp
  (setup winner
    (:defer
     (winner-mode t)))
#+end_src
** popper
Popper is a minor-mode to tame the flood of ephemeral windows Emacs produces, while still keeping them within arm’s reach.
#+begin_src elisp
  ;;0.67
  (setup popper
    (:option popper-reference-buffers '("\\*Messages\\*"
                                        "Output\\*$"
                                        "\\*Async Shell Command\\*"
                                        "Go-Translate"
                                        help-mode
                                        helpful-mode
                                        compilation-mode
                                        youdao-dictionary-mode)
             popper-window-height  (lambda (win)
                                     (fit-window-to-buffer
                                      win
                                      (floor (frame-height) 2)))
             )
    (:global "C-~" popper-toggle-latest
             "M-~" popper-cycle
             "C-M-~" popper-toggle-type)
    (:defer
     (popper-mode +1)
     (popper-echo-mode +1))
    )
#+end_src
** Move
*** avy
Jump anywhere in the world
#+begin_src elisp
  (setup avy
    (:global "M-j" avy-goto-word-1))
#+end_src
*** jump-back
borrowed from citre, now you can always jump-back use "M-,"
#+begin_src elisp
  (defun my--push-point-to-xref-marker-stack (&rest r)
    (xref-push-marker-stack (point-marker))) ;; must autoload this command in xref
  (dolist (func '(find-function
                  consult-imenu
                  consult-ripgrep
                  consult-line
                  consult-find
                  find-file
                  goto-line
                  citre-jump
                  isearch-forward))
    (advice-add func :before 'my--push-point-to-xref-marker-stack))
#+end_src
*** bookmark
#+begin_src elisp
  (setq bookmark-default-file "~/Documents/emacs/other-files/bookmarks")
#+end_src
* ibuffer
** ibuffer
#+begin_src elisp
  (setup ibuffer
    (:global [remap list-buffers] #'ibuffer))
#+end_src
* Input
** pyim
#+begin_src elisp
    (setup posframe)
    (setup pyim-tsinghua-dict
      (:load-after pyim-dict)
      (:when-loaded
        (pyim-tsinghua-dict-enable)))
    (setup xr)
    (setup pyim
      (:option pyim-cloudim 'google
               pyim-punctuation-translate-p '(no yes auto)
               pyim-page-tooltip 'posframe
               pyim-page-length 5
               pyim-dcache-backend 'pyim-dregcache)
      (:when-loaded
        (require 'popup nil t)
        (require 'pyim-dregcache)
        (require 'pyim-cregexp-utils)
        (require 'pyim-cstring-utils)
        (set-default 'pyim-punctuation-half-width-functions
                     '(pyim-probe-punctuation-line-beginning pyim-probe-punctuation-after-punctuation))
        ;; pyim-default-scheme 'xiaohe-shuangpin
        (pyim-default-scheme 'quanpin)
        (pyim-isearch-mode 1)

        (defalias 'pyim-probe-meow-normal-mode #'(lambda nil
                                                   (meow-normal-mode-p)))
        (set-default 'pyim-english-input-switch-functions '(pyim-probe-auto-english
                                                            pyim-probe-isearch-mode
                                                            pyim-probe-program-mode
                                                            pyim-probe-org-structure-template
                                                            pyim-probe-org-latex-mode
                                                            pyim-probe-meow-normal-mode))
        (defalias 'my-orderless-regexp
          #'(lambda
              (orig_func component)
              (let
                  ((result
                    (funcall orig_func component)))
                (pyim-cregexp-build result))))
        (advice-add 'orderless-regexp :around #'my-orderless-regexp)
        )
      (:defer
       (require 'pyim))
      (setq default-input-method "pyim"))
#+end_src
* File and Browsing
** file browsing
*** diredfl
#+begin_src elisp
  (setup diredfl
    (:hook-into dired-mode))
#+end_src
*** dirvish
Dirvish is a minimalistic file manager based on Dired. It's fast
#+begin_src elisp
  (setup dirvish
    (:option dirvish-attributes '(subtree-state all-the-icons collapse file-size))
    (:bind "TAB" dirvish-toggle-subtree)
    (:when-loaded
      (dirvish-override-dired-mode)))
#+end_src
** structure browsing
*** imenu-list
#+begin_src elisp
  (setup imenu-list
    (:autoload imenu-list-smart-toggle)
    (:option imenu-list-focus-after-activate t
             imenu-list-auto-resize t
             imenu-list-position 'left
             imenu-list-auto-update nil
             ))
#+end_src

*** boxy
#+begin_src elisp
  (setup boxy
    (:hook (defun boxy-font-set ()
             (make-local-variable 'default)
             (set-face-attribute 'default nil :family lewis-fixed-ch-en-font :height lewis-font-size)
             (make-local-variable 'fixed-pitch )
             (set-face-attribute 'fixed-pitch nil :family lewis-fixed-ch-en-font :height 1.0))))
  (setup boxy-imenu)
  (setup boxy-info)
#+end_src
** perspective
#+begin_src elisp
  (setup perspective
    (:option persp-initial-frame-name "Main"
             persp-mode-prefix-key "")
    ;; Running `persp-mode' multiple times resets the perspective list...
    (unless (equal persp-mode t)
      (persp-mode)))
#+end_src
** project
#+begin_src elisp
  (setup project
    )
#+end_src
* shell
** vterm
#+begin_src elisp
  (setup vterm
    (:bind [(control return)] vterm-toggle-insert-cd))
#+end_src
** vterm-toggle
#+begin_src elisp
  (setup vterm-toggle
    (:option vterm-toggle-hide-method 'reset-window-configration)
    (:global "C-`" vterm-toggle)
    (:when-loaded
      (setq vterm-toggle-fullscreen-p nil)
      (add-to-list 'display-buffer-alist
                   '((lambda (buffer-or-name _)
                       (let ((buffer (get-buffer buffer-or-name)))
                         (with-current-buffer buffer
                           (or (equal major-mode 'vterm-mode)
                               (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                     (display-buffer-reuse-window display-buffer-at-bottom)
                     (reusable-frames . visible)
                     (window-height . 0.3)))
      )
    )
#+end_src
* git
** magit
#+begin_src elisp
  (setup with-editor)
  (setup magit)
#+end_src
** ediff
#+begin_src elisp
  (setup ediff
    (:option ediff-split-window-function 'split-window-horizontally
             ediff-window-setup-function 'ediff-setup-windows-plain)
    ;; restore windows Configuration after ediff
    (add-hook 'ediff-before-setup-hook #'ediff-save-window-conf)
    (add-hook 'ediff-quit-hook #'ediff-restore-window-conf)
    (:when-loaded
      (defvar local-ediff-saved-window-conf nil)

      (defun ediff-save-window-conf ()
        (setq local-ediff-saved-window-conf (current-window-configuration)))

      (defun ediff-restore-window-conf ()
        (when (window-configuration-p local-ediff-saved-window-conf)
          (set-window-configuration local-ediff-saved-window-conf)))
      ))

#+end_src
* Program
** Language
*** elisp
**** helpful
#+begin_src elisp
  (setup elisp-refs)
  (setup helpful
    (:global "C-h f" #'helpful-callable
             "C-h v" #'helpful-variable
             "C-h k" #'helpful-key
             "C-c C-d" #'helpful-at-point
             "C-h F" #'helpful-function
             "C-h C" #'helpful-command))
#+end_src
**** elisp-demos
#+begin_src elisp
  (setup elisp-demos
    (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src
*** graphviz-dot-mode
#+begin_src elisp
  (setup graphviz-dot-mode
    (:file-match "\\.dot\\'")
    (:option graphviz-dot-indent-width 4))
#+end_src
*** beancount
Emacs major-mode to work with Beancount ledger files
#+begin_src elisp
  (setup beancount
    (:file-match "\\.beancount\\'"))
    (add-to-list 'auto-mode-alist
               (cons "\\.[pP][dD][fF]\\'" 'eaf-mode))
#+end_src
*** latex
#+begin_src elisp :tangle no
  (setup auctex)
  (setup cdlatex)
#+end_src
*** python
**** python
#+begin_src elisp
  (setup python
    (:with-hook inferior-python-mode-hook
      (:hook (lambda ()
               (process-query-on-exit-flag
                (get-process "Python")))))
    (:when-loaded
      (when (and (executable-find "python3")
                 (string= python-shell-interpreter "python"))
        (setq python-shell-interpreter "python3"))
      (with-eval-after-load 'exec-path-from-shell
        (exec-path-from-shell-copy-env "PYTHONPATH"))
      ))
#+end_src
*** scheme
#+begin_src elisp :tangle no
  (setup geiser)
  (setup geiser-guile)
#+end_src
*** cc-mode
#+begin_src emacs-lisp
  (setup cc-mode
    (:option c-basic-offset 4))

  (setup hideif
    (:option hide-ifdef-shadow t
             hide-ifdef-initially t)
    (:with-feature hide-ifdef-mode
      (:hook-into c-mode c++-mode)))
#+end_src
*** lua-mode
#+begin_src elisp
(setup lua-mode)
#+end_src
*** cmake-mode
#+begin_src elisp
(setup cmake-mode)
#+end_src
** Useful programing tools
*** quickrun
#+begin_src elisp
  (setup quickrun)
#+end_src
*** tree-sitter
**** tree-sitter
#+begin_src elisp
  (setup tree-sitter
    (:hook-into c-mode-common python-mode)
    (:hook tree-sitter-hl-mode))
  (setup tree-sitter-langs)
#+end_src
*** lsp mode
**** eglot
#+begin_src elisp
  (setup project)
  (setup xref
    (:option xref-search-program #'ripgrep)
    (:autoload xref-push-marker-stack)) ;; autoload this command for jump-back

  (setup markdown-mode
    (:file-match "\\.md\\'"))

  (setup eldoc-box
    (add-hook 'eglot--managed-mode-hook #'eldoc-box-hover-at-point-mode t))

  (setq read-process-output-max (* 1024 1024))
  (setup eglot
    (:option eglot-events-buffer-size 0
             eglot-workspace-configuration '((:python.analysis :useLibraryCodeForTypes t)))
    (:when-loaded
      (set-face-attribute 'eglot-highlight-symbol-face nil :background "#b3d7ff")
    ))
  (setup eldoc
    (:option eldoc-echo-area-use-multiline-p t
             eldoc-echo-area-display-truncation-message nil))
  ;; (setq eldoc-echo-area-prefer-doc-buffer nil)
#+end_src
**** consult-eglot
#+begin_src elisp
  (setup consult-eglot
    (:load-after eglot)
    (:with-map eglot-mode-map
      (:bind [remap xref-find-apropos] #'consult-eglot-symbols)))
#+end_src
**** lsp-bridge
#+begin_src elisp :tangle no
  (setup lsp-bridge
    (:option lsp-bridge-enable-signature-help t
             lsp-bridge-org-babel-lang-list '("python" "C++" "elisp")
             ))
#+end_src
*** citre
Citre is an advanced Ctags (or actually, readtags) frontend for Emacs.
#+begin_src elisp
  (setup citre
    (:defer
     (require 'citre-config))
    (:option citre-use-project-root-when-creating-tags t
             citre-prompt-language-for-ctags-command t
             ;; citre-auto-enable-citre-mode-modes '(prog-mode)
             ))
#+end_src
*** symbol-overlay
Highlight symbols with keymap-enabled overlays
#+begin_src elisp
  (setup symbol-overlay
    (:autoload symbol-overlay-put))
#+end_src
*** grammatical-edit
#+begin_src elisp
  (setup grammatical-edit
    (:bind "(" grammatical-edit-open-round
           "[" grammatical-edit-open-bracket
           "{" grammatical-edit-open-curly
           ")" grammatical-edit-close-round
           "]" grammatical-edit-close-bracket
           "}" grammatical-edit-close-curly
           ;; "=" grammatical-edit-equal
           "%" grammatical-edit-match-paren
           "\"" grammatical-edit-double-quote
           "'" grammatical-edit-single-quote)
    (:hook-into text-mode
                prog-mode
                maxima-mode
                ielm-mode
                qml-mode
                minibuffer-inactive-mode
                ))
#+end_src

*** eglot-ltex
eglot client leveraging LTEX Language Server.
#+begin_src elisp
  (setup eglot-ltex
    (:option eglot-languagetool-server-path "~/Downloads/ltex-ls/")
    (:with-hook text-mode-hook
      (:hook (lambda ()
               (require 'eglot-ltex)))))
#+end_src
*** Code toggle with hideshow
#+begin_src elisp
  (setup hideshow
    (:with-hook prog-mode-hook
      (:hook hs-minor-mode))
    (add-to-list 'hs-special-modes-alist '(verilog-mode "\\(\\<begin\\>\\|\\<case\\>\\|\\<module\\>\\|\\<class\\>\\|\\<function\\>\\|\\<task\\>\\)"
                                                        "\\(\\<end\\>\\|\\<endcase\\>\\|\\<endmodule\\>\\|\\<endclass\\>\\|\\<endfunction\\>\\|\\<endtask\\>\\)" nil verilog-forward-sexp-function))
    )
#+end_src
*** realgud
#+begin_src elisp :tangle no
  (setup load-relative)
  (setup loc-changes)
  (setup realgud
    (:with-map realgud:shortkey-mode-map
      (:bind [mouse-3] realgud:tooltip-eval))
    )
  (setup realgud-lldb
    (:autoload realgud--lldb))
#+end_src
*** separedit
#+begin_src elisp
  (setup edit-indirect)
  (setup separedit
    (:option separedit-default-mode 'org-mode
             separedit-continue-fill-column t
             separedit-remove-trailing-spaces-in-comment t)
    (:autoload separedit))

  (define-key prog-mode-map        (kbd "C-c '") #'separedit)
  ;; (define-key minibuffer-local-map (kbd "C-c '") #'separedit)
  ;; (define-key help-mode-map        (kbd "C-c '") #'separedit)
  ;; (define-key helpful-mode-map     (kbd "C-c '") #'separedit)


  ;; feature options
  ;; (setq separedit-preserve-string-indentation t)
  ;; (setq separedit-write-file-when-execute-save t)
#+end_src
*** format-all
#+begin_src elisp
  (setup inheritenv)
  (setup language-id)
  (setup format-all)
#+end_src
*** hl-indent-scope
#+begin_src elisp
  (setup hl-indent-scope
    (:defer
     (global-hl-indent-scope-mode)))
#+end_src
* Org Mode
** org-mode
#+begin_src elisp
  (setup org
    (setq org-directory nowisemacs-doc-org-mode-dir)
    (:option org-adapt-indentation t
             org-startup-indented t
             org-hide-emphasis-markers t
             org-imenu-depth 5
             org-return-follows-link t
             org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                                    (vm-imap . vm-visit-imap-folder-other-frame)
                                    (gnus . org-gnus-no-new-news)
                                    (file . find-file)
                                    (wl . wl-other-frame))
             fill-column 120
             org-log-done 'time ;; 记录完成时间
             org-blank-before-new-entry '((heading . nil)
                                          (plain-list-item . nil))

             org-image-actual-width 600
             org-preview-latex-image-directory (concat no-littering-var-directory "ltximg/")
             org-confirm-babel-evaluate nil
             org-src-window-setup 'split-window-below
             org-refile-targets '(("~/Documents/emacs/orgmode/roam/2022-04-25-org_refile_notes.org" . (:maxlevel . 9)))
             org-ellipsis "⤵"
             )
    (:hook org-num-mode)
    (:when-loaded
      (require 'org-tempo) ;; so that <s is useful
      (setq-default org-todo-keywords
                    (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                            (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))
      (setq-default org-todo-keyword-faces
                    (quote (("TODO" :foreground "red" :weight bold)
                            ("NEXT" :foreground "blue" :weight bold)
                            ("DONE" :foreground "forest green" :weight bold)
                            ("WAITING" :foreground "orange" :weight bold)
                            ("HOLD" :foreground "magenta" :weight bold)
                            ("CANCELLED" :foreground "forest green" :weight bold)
                            ("MEETING" :foreground "forest green" :weight bold)
                            ("PHONE" :foreground "forest green" :weight bold))))
      ;; 导出相关的设置

      (setq org-latex-pdf-process
            '("xelatex -interaction nonstopmode %f"
              "bibtex %b"
              "xelatex -interaction nonstopmode %f"
              "xelatex -interaction nonstopmode %f"))
      (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0)) ;; use a large preview for latex

      (defface my-org-emphasis-bold
        '((default :inherit bold)
          (((class color) (min-colors 88) (background light))
           :foreground "pale violet red")
          (((class color) (min-colors 88) (background dark))
           :foreground "pale violet red"))
        "My bold emphasis for Org.")

      (defface my-org-emphasis-italic
        '((default :inherit italic)
          (((class color) (min-colors 88) (background light))
           :foreground "green3")
          (((class color) (min-colors 88) (background dark))
           :foreground "green3"))
        "My italic emphasis for Org.")

      (defface my-org-emphasis-underline
        '((default :inherit underline)
          (((class color) (min-colors 88) (background light))
           :foreground "#813e00")
          (((class color) (min-colors 88) (background dark))
           :foreground "#d0bc00"))
        "My underline emphasis for Org.")

      (setq org-emphasis-alist
            '(("*" my-org-emphasis-bold)
              ("/" my-org-emphasis-italic)
              ("_" underline)
              ("=" org-verbatim verbatim)
              ("~" org-code verbatim)
              ("+" (:strike-through t))
              ))

      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (python . t)
         (dot . t)
         (latex . t)
         (C . t)
         (scheme . t)
         ))
      (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
      ;; open word
      (add-to-list 'org-file-apps '("\\.docx\\'" . default))
      (defun lewis/org-export-docx ()
        (interactive)
        (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) ".docx"))
              (template-file (concat (file-name-as-directory nowisemacs-doc-other-file-dir)
                                     "template.docx")))
          (shell-command (format "pandoc %s -o %s --reference-doc=%s"
                                 (buffer-file-name)
                                 docx-file
                                 template-file
                                 ))
          (message "Convert finish: %s" docx-file)))
      ))
#+end_src
** org-modern
#+begin_src elisp
  (setup org-modern
    (:option org-modern-list '((?+ . "➤")
                               (?- . "–")
                               (?* . "•"))
             org-modern-table nil)
    (:hook-into org-mode)
    (add-hook 'org-agenda-finalize-hook #'org-modern-agenda)
    )
#+end_src
** org-appear
#+begin_src elisp
  (setup org-appear
    (:hook-into org-mode))
#+end_src
** org-download
#+begin_src elisp
  (setup async)
  (setup org-download
    (:option org-download-method 'directory
             org-download-screenshot-basename "screenshot.jpg"
             org-download-image-dir "~/Documents/emacs/orgmode/PicturesForAll/org_download_images")
    (:when-loaded
      (when (eq system-type 'gnu/linux)
        (setq-default org-download-screenshot-method "scrot -s %s"))

      (when (eq system-type 'darwin)
        (setq org-download-screenshot-method "screencapture -i %s")))
    (:autoload org-download-screenshot))
#+end_src
** ox-hugo
#+begin_src elisp
  (setup tomelr)
  (setup ox-hugo
    (:load-after ox))
#+end_src
** org-clock
*** org-pomodoro
#+begin_src elisp :tangle no
  (setup org-pomodoro
    (:option org-pomodoro-finished-sound "~/Documents/emacs/other-files/applaud.wav"))
#+end_src
** org-noter
#+begin_src elisp
  (setup org-noter
    (:option org-noter-notes-search-path (list org-directory)
             org-noter-auto-save-last-location t
             org-noter-separate-notes-from-heading nil
             org-noter-hide-other nil
             org-noter-doc-split-percentage '(0.6 . 0.4)))
#+end_src
** org-present
#+begin_src elisp
  (setup org-present)
#+end_src
** citar
#+begin_src elisp
  (setup parsebib)
  ;; (setup citeproc) ;;<- (setup queue) (setup string-inflection)
  (setup citar
    (:option org-cite-global-bibliography '("~/Documents/emacs/orgmode/bibliography/better_zotero_bib.bib")
             org-cite-insert-processor 'citar
             org-cite-follow-processor 'citar
             org-cite-activate-processor 'citar
             citar-bibliography org-cite-global-bibliography))
#+end_src
** toc-org
#+begin_src elisp
  (setup toc-org
    (:hook-into org-mode))
#+end_src
** ebib
#+begin_src elisp
  (setup ebib
    (:option ebib-preload-bib-files '("~/Documents/emacs/orgmode/bibliography/better_zotero_bib.bib")
             ebib-file-search-dirs '("~/Documents/pdf-files-dir")
             )
    (:when-loaded
      (defcustom ebib-zotero-translation-server "http://127.0.0.1:1969"
        "The address of Zotero translation server."
        :group 'ebib
        :type 'string)

      (defun ebib-zotero-translate (item server-path &optional export-format)
        "Convert item to EXPORT-FORMAT entry through `ebib-zotero-translation-server'."
        (let ((export-format (or export-format
                                 (downcase (symbol-name (intern-soft bibtex-dialect))))))
          (shell-command-to-string
           (format "curl -s -d '%s' -H 'Content-Type: text/plain' '%s/%s' | curl -s -d @- -H 'Content-Type: application/json' '%s/export?format=%s'" item ebib-zotero-translation-server server-path ebib-zotero-translation-server export-format))))

      (defun ebib-zotero-import-url (url)
        "Fetch a entry from zotero translation server via a URL.
  The entry is stored in the current database."
        (interactive "MURL: ")
        (with-temp-buffer
          (insert (ebib-zotero-translate url "web"))
          (ebib-import-entries ebib--cur-db)))

      (defun ebib-zotero-import-identifier (identifier)
        "Fetch a entry from zotero translation server via an IDENTIFIER.
  The entry is stored in the current database,
  and the identifier can be DOI, ISBN, PMID, or arXiv ID."
        (interactive "MIDENTIFIER: ")
        (with-temp-buffer
          (insert (ebib-zotero-translate identifier "search"))
          (ebib-import-entries ebib--cur-db)))
      )
    )
#+end_src
** denote
#+begin_src elisp
  (setup denote
    (:option denote-directory (expand-file-name "~/Documents/emacs/orgmode/denote/"))
    (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories))
  (defun find-denote-file-dir()
    (interactive)
    (dired "~/Documents/emacs/orgmode/denote/")
    (project-find-file))

#+end_src
* 翻译
** go-translate
#+begin_src elisp
  (setup go-translate
    (:option gts-translate-list '(("en" "zh")))
    (:when-loaded
      (setq gts-default-translator (gts-translator
                                    :picker (gts-prompt-picker)
                                    :engines (list (gts-google-engine))
                                    :render (gts-buffer-render))))
    (defun my-gts-translate-posframe ()
      (interactive)
      (if (not (featurep 'go-translate))
          (require 'go-translate))
      (defvar my-translator-posframe
        (gts-translator
         :picker (gts-noprompt-picker)
         :engines (gts-google-engine)
         :render (gts-posframe-pop-render)))
      (gts-translate my-translator-posframe)))
#+end_src
** insert-translated-name
#+begin_src elisp
  (setup insert-translated-name
    (:autoload insert-translated-name-insert
               insert-translated-name-replace))
#+end_src
** corfu-english-helper
I use corfu english helper instead of company-english-helper.
#+begin_src elisp
  (setup corfu-english-helper
    (:autoload toggle-corfu-english-helper))
#+end_src
* 阅读
** pdf-tools
#+begin_src elisp
  (setup tablist)
  (setup pdf-tools
    (:option pdf-view-use-scaling t)
    (:with-map pdf-view-mode-map
      (:bind "h" pdf-annot-add-highlight-markup-annotation
             "[" pdf-view-scroll-down-or-previous-page
             "]" pdf-view-scroll-up-or-next-page))
    (pdf-loader-install)
    (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1))))

  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
        TeX-source-correlate-start-server t)

  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)
#+end_src
** elfeed
#+begin_src elisp
  (setup elfeed
    (setq elfeed-feeds
          '("http://ruzkuku.com/all.atom"
            "https://karthinks.com/index.xml"
            "https://shom.dev/index.xml"
            "https://blog.benoitj.ca/posts/index.xml"
            "https://protesilaos.com/codelog.xml"
            "https://sachachua.com/blog/feed/"
            "https://nullprogram.com/feed/"
            "https://irreal.org/blog/?feed=rss2"
            "https://ambrevar.xyz/atom.xml"
            "https://guix.gnu.org/feeds/blog.atom"
            "https://valdyas.org/fading/feed/"
            "https://manateelazycat.github.io/feed.xml")))
#+end_src

** nov
#+begin_src elisp
  (setup esxml) ;; <- (setup kv)
  (setup nov
    (:file-match "\\.epub\\'"))
#+end_src
** darkroom
Simple distraction-free editing. I use darkroom instead of writeroom because it's more simple
#+begin_src elisp
  (setup darkroom)
#+end_src
* tools
** xwidget
#+begin_src elisp
  (defun lewis/url-browser-new-buffer(url &optional new-session)
    (interactive (progn
                   (require 'browse-url)
                   (browse-url-interactive-arg "xwidget-webkit URL: ")))
    (xwidget-webkit-browse-url url t))

  (setq browse-url-browser-function 'lewis/url-browser-new-buffer)
#+end_src
** oj.el for online program contest
#+begin_src elisp
  (setup oj
    (:option oj-default-online-judge 'codeforces))
#+end_src
** eaf
#+begin_src elisp
  (setup eaf
    (add-to-list 'load-path "~/.emacs.d/lib/eaf")
    (:option eaf-browser-enable-autofill t
             eaf-webengine-font-family "Noto Sans CJK SC"
             eaf-webengine-fixed-font-family "JetBrainsMono Nerd Font"
             eaf-config-location (concat no-littering-var-directory "eaf/")
             ;; eaf-find-alternate-file-in-dired t
             )
    ;; for consult preview
    (:with-feature consult
      (:when-loaded
        (add-to-list 'consult-buffer-sources 'consult--source-eaf-buffer)
        (defvar consult--source-eaf-buffer
          `(:name     "EAF Buffer"
                      :narrow   ?e
                      :category buffer
                      :face     consult-buffer
                      :history  buffer-name-history
                      :state    ,#'consult--buffer-state
                      :default  t
                      :items
                      ,(lambda ()
                         (mapcar #'buffer-name
                                 (seq-filter
                                  (lambda (x)
                                    (eq (buffer-local-value 'major-mode x) 'eaf-mode))
                                  (buffer-list)))))
          "EAF candidate source for `consult-buffer'."))))
  (setup eaf-browser
    (:autoload eaf-open-browser))
  (setup eaf-pdf-viewer
    (:autoload eaf-open-pdf-from-history))
  (setup eaf-rss-reader
    (:autoload eaf-open-rss-reader))

  (setup eaf-interleave-mode
    (:option eaf-interleave-org-notes-dir-list '("~/org/interleave/")
             eaf-interleave-split-direction 'vertical
             eaf-interleave-disable-narrowing t
             eaf-interleave-split-lines 20)
    (:bind "M-." eaf-interleave-sync-current-note
           "M-p" eaf-interleave-sync-previous-note
           "M-n" eaf-interleave-sync-next-note)
    (:with-feature eaf-interleave-app
      (:bind "C-c M-i" eaf-interleave-add-note
             "C-c M-o" eaf-interleave-open-notes-file
             "C-c M-q" eaf-interleave-quit)
      (:hook-into eaf-pdf-viewer
                  eaf-browser)))
#+end_src
** proxy
#+begin_src elisp
  ;; Configure network proxy
  (setq my-proxy "socks://127.0.0.1:20170")
  (defun show-proxy ()
    "Show http/https proxy."
    (interactive)
    (if url-proxy-services
        (message "Current proxy is \"%s\"" my-proxy)
      (message "No proxy")))

  (defun set-proxy ()
    "Set http/https proxy."
    (interactive)
    (setq url-proxy-services `(("http" . ,my-proxy)
                               ("https" . ,my-proxy)))
    (show-proxy))

  (defun unset-proxy ()
    "Unset http/https proxy."
    (interactive)
    (setq url-proxy-services nil)
    (show-proxy))

  (defun toggle-proxy ()
    "Toggle http/https proxy."
    (interactive)
    (if url-proxy-services
        (unset-proxy)
      (set-proxy)))
#+end_src
** app-launcher
#+begin_src elisp
(setup app-launcher)
#+end_src
** gif-screencast
#+begin_src elisp
  (setup gif-screencast
    (:if-system 'darwin)
    (:autoload gif-screencast-start-or-stop
               gif-screencast-toggle-pause)

    (:when-loaded
      (:option gif-screencast-args '("-x") ;; To shut up the shutter sound of `screencapture' (see `gif-screencast-command').
               gif-screencast-cropping-program "mogrify" ;; Optional: Used to crop the capture to the Emacs frame.
               gif-screencast-capture-format "ppm" ;; Optional: Required to crop captured images.
               gif-screencast-scale-factor 2.0)))
#+end_src
