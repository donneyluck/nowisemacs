#+TITLE: Emacs Configuration
#+PROPERTY: header-args:elisp :tangle ~/.emacs.d/modules/init-config.el
I failed in love with denote, so previous *org-roam* configs were refiled into [[file:useful-tools/old-elisps/org-roam-config.org][org-roam configs]]
* Content                                                               :toc:
- [[#startup-config][Startup config]]
  - [[#ui-speed-up][UI speed up]]
  - [[#basic-modes][basic modes]]
  - [[#generic][generic]]
  - [[#set-vars][set vars]]
- [[#package-management][Package Management]]
  - [[#setup][setup]]
  - [[#epkg][epkg]]
- [[#gcmh][gcmh]]
- [[#keyboard-bindings][Keyboard Bindings]]
  - [[#meow][meow]]
  - [[#meow-commands-like-vim][meow commands like vim]]
  - [[#transient-for-leader-keybindings][transient for leader-keybindings]]
  - [[#meow-leader-keys][meow leader keys]]
  - [[#which-key][which-key]]
  - [[#insert-pair][insert-pair]]
  - [[#electric][electric]]
- [[#ui][UI]]
  - [[#font][Font]]
  - [[#variable-pitch-and-cn-en-fixed-pitch-faces][variable-pitch and cn-en-fixed-pitch faces]]
  - [[#theme][Theme]]
  - [[#line-number][line number]]
  - [[#all-the-icons][all-the-icons]]
  - [[#rainbow-delimiters][rainbow-delimiters]]
  - [[#diff-hl][diff-hl]]
  - [[#emacs-dashboard][emacs-dashboard]]
  - [[#doom-modeline][doom-modeline]]
  - [[#hl-todo][hl-todo]]
  - [[#pulsar][pulsar]]
  - [[#show-paren-mode][show-paren-mode]]
  - [[#iscroll][iscroll]]
- [[#general-configuration][General Configuration]]
  - [[#simple][simple]]
  - [[#general-modes][general modes]]
  - [[#backup][backup]]
  - [[#no-littering][no-littering]]
  - [[#recentf][recentf]]
  - [[#自动换行][自动换行]]
  - [[#so-long][so-long]]
  - [[#tramp][TRAMP]]
  - [[#automatically-clean-whitespace][Automatically clean whitespace]]
  - [[#exec-path-from-shell][exec-path-from-shell]]
  - [[#undo][Undo]]
- [[#补全][补全]]
  - [[#completions-with-vertico][Completions with Vertico]]
  - [[#orderless-and-pinyinlib][Orderless and pinyinlib]]
  - [[#consult-commands][Consult Commands]]
  - [[#marginalia][Marginalia]]
  - [[#embark][embark]]
  - [[#corfuinstead-of-company][corfu(instead of company)]]
  - [[#corfu-all-the-icons][corfu-all-the-icons]]
  - [[#yasnippet][yasnippet]]
  - [[#tempel][tempel]]
  - [[#rgel][rg.el]]
- [[#window-management][Window Management]]
  - [[#winner-mode][winner-mode]]
  - [[#popper][popper]]
  - [[#move][Move]]
- [[#ibuffer][ibuffer]]
  - [[#ibuffer-1][ibuffer]]
- [[#input][Input]]
- [[#posframe][posframe]]
  - [[#pyim][pyim]]
  - [[#rime][rime]]
- [[#file-and-browsing][File and Browsing]]
  - [[#file-browsing][file browsing]]
  - [[#structure-browsing][structure browsing]]
  - [[#tab-line-and-tab-bar][tab-line and tab-bar]]
  - [[#tabspaces][tabspaces]]
  - [[#project][project]]
  - [[#project-rootfile][project-rootfile]]
- [[#shell][shell]]
  - [[#vterm][vterm]]
  - [[#vterm-toggle][vterm-toggle]]
  - [[#eshell][eshell]]
- [[#git][git]]
  - [[#magit][magit]]
  - [[#ediff][ediff]]
- [[#program][Program]]
  - [[#language][Language]]
  - [[#useful-programing-tools][Useful programing tools]]
- [[#org-mode][Org Mode]]
  - [[#org-mode-1][org-mode]]
  - [[#org-modern][org-modern]]
  - [[#org-modern-indent][org-modern-indent]]
  - [[#org-appear][org-appear]]
  - [[#org-download][org-download]]
  - [[#ox-hugo][ox-hugo]]
  - [[#org-clock][org-clock]]
  - [[#org-noter][org-noter]]
  - [[#org-present][org-present]]
  - [[#bibtex-related][bibtex related]]
  - [[#toc-org][toc-org]]
  - [[#denote][denote]]
  - [[#find-orgmode-dir-files][find orgmode dir files]]
  - [[#org-imagine-excalidraw][org-imagine, excalidraw]]
  - [[#shrface][shrface]]
  - [[#org-remark][org-remark]]
  - [[#clue][clue]]
  - [[#org-transclusion][org-transclusion]]
  - [[#agendagtd][agenda/gtd]]
  - [[#my-gtd][my-gtd]]
  - [[#org-ql][org-ql]]
  - [[#xeft][xeft]]
- [[#翻译][翻译]]
  - [[#go-translate][go-translate]]
  - [[#corfu-english-helper][corfu-english-helper]]
  - [[#dictionary-overlay][dictionary-overlay]]
- [[#阅读][阅读]]
  - [[#pdf-tools][pdf-tools]]
  - [[#elfeed][elfeed]]
  - [[#efleed-org][efleed-org]]
  - [[#nov][nov]]
  - [[#nov-xwidget][nov-xwidget]]
  - [[#darkroom][darkroom]]
  - [[#markdown-mode][markdown-mode]]
- [[#tools][tools]]
  - [[#xwidget-and-browser][xwidget and browser]]
  - [[#eaf][eaf]]
  - [[#proxy][proxy]]
  - [[#app-launcher][app-launcher]]
  - [[#keyfreq][keyfreq]]
  - [[#gif-screencast][gif-screencast]]
  - [[#emacs-guix][emacs-guix]]
  - [[#mind-wave][mind-wave]]
- [[#use-single-file-to-load-configs][use single file to load configs]]
  - [[#provide][provide]]
  - [[#load-init-configel][load init-config.el]]
- [[#quick-edit-and-minimal-file][quick-edit and minimal-file]]
  - [[#init-quick-edit][init-quick-edit]]
  - [[#init-minimal][init-minimal]]

* Startup config
** UI speed up
#+name: ui-speed-up
#+begin_src elisp :tangle ~/.emacs.d/early-init.el
  ;; -*- lexical-binding: t; -*-
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.5) ;;defer gc futher back
  ;; Package initialize occurs automatically, before `user-init-file' is
  ;; loaded, but after `early-init-file'. We handle package
  ;; initialization, so we must prevent Emacs from doing it early!
  (setq package-enable-at-startup nil)

  ;; Inhibit resizing frame
  (setq frame-inhibit-implied-resize t)

  ;; no title bar
  ;; (add-to-list 'default-frame-alist '(undecorated . t))
  ;; Faster to disable these here (before they've been initialized)
  (push '(alpha-background . 85) default-frame-alist)
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  ;; (push '(undecorated . t) default-frame-alist)
  (setq initial-major-mode 'fundamental-mode ;; 默认用最简单的模式
        package--init-file-ensured t
        inhibit-startup-message t             ; 关闭启动 Emacs 时的欢迎界面
        )
#+end_src
** basic modes
#+begin_src elisp
  ;; -*- lexical-binding: t; -*-
    ;; basic modes
    (setq use-short-answers t)
    (setq confirm-kill-emacs 'y-or-n-p)
    (setq ring-bell-function 'ignore)       ;关闭烦人的出错时的提示声
    (set-default-coding-systems 'utf-8)
    (setq-default indent-tabs-mode nil)

    (setq-default tab-width 4)
    ;; 平滑地进行半屏滚动，避免滚动后recenter操作
    (setq scroll-step 1
          scroll-conservatively 10000)
    (setq completions-detailed t) ;;useful in emacs 28
    (setq use-dialog-box nil)               ;never pop dialog
    (setq mouse-yank-at-point t)            ;粘贴于光标处,而不是鼠标指针处

    ;; (setq frame-resize-pixelwise t) ;设置缩放的模式,避免Mac平台最大化窗口以后右边和下边有空隙
    ;; (set-frame-parameter nil 'fullscreen 'maximized)
#+end_src
** generic
#+begin_src elisp
  (add-to-list 'load-path (expand-file-name "lib/borg" user-emacs-directory))
  (require 'borg)
  (setq borg-rewrite-urls-alist
        '(("git@github.com:" . "https://github.com/")
          ("git@gitlab.com:" . "https://gitlab.com/")))
  (borg-initialize)
#+end_src

The following content is not enabled yet, because I want to minimize unnecessary settings as much as possible
#+begin_src elisp :tangle no
  ;; Restore emacs session.
  (setq initial-buffer-choice t)
  (run-with-timer 1 nil #'(lambda () (bury-buffer)))
  ;; 增加IO性能
  (setq process-adaptive-read-buffering nil)
  (setq read-process-output-max (* 1024 1024))

  (transient-mark-mode 1)                 ;标记高亮
  (global-subword-mode 1)                 ;Word移动支持 FooBar 的格式
  (setq initial-scratch-message "") ;关闭启动空白buffer, 这个buffer会干扰session恢复
  (setq-default comment-style 'indent)    ;设定自动缩进的注释风格
  (setq default-major-mode 'text-mode)    ;设置默认地主模式为TEXT模式
  (setq split-width-threshold nil)        ;分屏的时候使用上下分屏
  (setq inhibit-compacting-font-caches t) ;使用字体缓存，避免卡顿
  (setq confirm-kill-processes nil)       ;退出自动杀掉进程
  (setq async-bytecomp-allowed-packages nil) ;避免magit报错
  (setq profiler-report-cpu-line-format ;让 profiler-report 第一列宽一点
        '((100 left)
          (24 right ((19 right)
                     (5 right)))))
  (setq profiler-report-memory-line-format
        '((100 left)
          (19 right ((14 right profiler-format-number)
                     (5 right)))))

  ;; (add-hook 'find-file-hook 'highlight-parentheses-mode t) ;增强的括号高亮
  (setq ad-redefinition-action 'accept)   ;不要烦人的 redefine warning
#+end_src
** set vars
#+begin_src elisp
  (defvar nowisemacs-config-file (expand-file-name "init.org" user-emacs-directory))
  (defvar nowisemacs-config-useful-tools (expand-file-name "useful-tools/" user-emacs-directory))
  (defvar nowisemacs-doc-emacs-dir (file-truename "~/Documents/emacs/"))
  (defvar nowisemacs-gtd-dir (concat nowisemacs-doc-emacs-dir "01-orgmode/xnotes/gtd"))
#+end_src

* Package Management
** setup
#+begin_src elisp
  (require 'setup)

  (setup-define :delay
    (lambda (&optional time)
      `(run-with-idle-timer ,(or time 1) nil
                            (lambda () (require ',(setup-get 'feature)))))
    :documentation "Delay loading the feature until a certain amount of idle time has passed.")

  (setup-define :defer
    (lambda (features)
      `(run-with-idle-timer 1 nil
                            (lambda ()
                              ,features)))
      :documentation "Delay loading the feature until a certain amount of idle time has passed."
      :repeatable t)

  (setup-define :load-after
      (lambda (features &rest body)
        (let ((body `(progn
                       (require ',(setup-get 'feature))
                       ,@body)))
          (dolist (feature (if (listp features)
                               (nreverse features)
                             (list features)))
            (setq body `(with-eval-after-load ',feature ,body)))
          body))
    :documentation "Load the current feature after FEATURES."
    :indent 1)

  (setup-define :if-system
    (lambda (systemtype)
      `(unless (eq system-type ,systemtype)
         ,(setup-quit)))
    :documentation "If SYSTEMTYPE is not the current systemtype, stop evaluating form.")

  (setup-define :autoload
    (lambda (func)
      (let ((fn (if (memq (car-safe func) '(quote function))
                    (cadr func)
                  func)))
        `(unless (fboundp (quote ,fn))
           (autoload (function ,fn) ,(symbol-name (setup-get 'feature)) nil t))))
    :documentation "Autoload COMMAND if not already bound."
    :repeatable t
    :signature '(FUNC ...))

  (setup-define :messure-time
    (lambda ()
      (let ((feature-string (symbol-name (setup-get 'feature)))
            (load-time `(time-subtract-millis (current-time) start-time)))
        `(progn
           (message (format (concat ,feature-string ":%d") ,load-time))
           (setq start-time (current-time))
           )))
    :documentation "Messure the current feature after FEATURES.")
#+end_src
** epkg
I use borg to manage packages, so setup.el is only used to config packages quickly, I write several macros in [[https://github.com/nowislewis/nowisemacs-base.git][nowisemacs-base]]. It should be noticed that if you use only a =init.el= file, all the funcs or macros defined in =init.el= can't pass native comp, so move these things that you defined yourself to a seperate repo(nowisemacs-base) will resolve this problem.
#+begin_src elisp
    (setup compat)
    ;; (setup emacsql)
    ;; (setup closql)

    ;; (when (>= emacs-major-version 29)
    ;;   (setq epkg-database-connector 'sqlite-builtin))
    ;; (setup epkg)
#+end_src
* gcmh
Enforce a sneaky Garbage Collection strategy to minimize GC interference with user activity.
#+begin_src elisp
  (setup gcmh
    (:option gcmh-auto-idle-delay-factor 10
             gcmh-high-cons-threshold (* 16 1024 1024))
    (gcmh-mode 1))
#+end_src
* Keyboard Bindings
I used to be a vim(evil) user, but now I use meow to manage all my keys.
** meow
Maybe I should add a new state.
#+begin_src elisp
  (setup meow
    (require 'meow)
    (:option meow-use-keypad-when-execute-kbd nil
             meow-expand-exclude-mode-list nil
             meow-use-clipboard t
             meow-cursor-type-normal '(bar . 5)
             meow-cursor-type-insert '(bar . 1)
             meow-replace-state-name-list '((normal . "N")
                                            (motion . "M")
                                            (keypad . "K")
                                            (insert . "I")
                                            (beacon . "B"))
             meow-use-enhanced-selection-effect t
             meow-cheatsheet-layout meow-cheatsheet-layout-qwerty
             meow-keypad-start-keys '((?c . ?c)
                                      (?x . ?x))
             )
    ;; motion keys
    (meow-motion-overwrite-define-key '("j" . meow-next)
                                      '("k" . meow-prev)
                                      ;; '("h" . meow-left)
                                      ;; '("l" . meow-right)
                                      '("<escape>" . ignore)
                                      '("." . repeat))
    ;; normal keys
    (meow-normal-define-key '("0" . meow-expand-0)
                            '("9" . meow-expand-9)
                            '("8" . meow-expand-8)
                            '("7" . meow-expand-7)
                            '("6" . meow-expand-6)
                            '("5" . meow-expand-5)
                            '("4" . meow-expand-4)
                            '("3" . meow-expand-3)
                            '("2" . meow-expand-2)
                            '("1" . meow-expand-1)

                            '("a" . meow-append)
                            '("A" . meow-append-vim)
                            '("b" . meow-back-word)
                            '("B" . meow-back-symbol)
                            '("c c" . meow-change)
                            '("d" . meow-kill)
                            '("e" . meow-next-word)
                            '("E" . meow-next-symbol)
                            '("f" . meow-find)
                            '("g" . g-extra-commands)
                            '("G" . meow-grab)
                            '("h" . meow-left)
                            '("H" . meow-left-expand)
                            '("i" . meow-insert)
                            '("I" . meow-insert-vim)
                            '("j" . meow-next)
                            '("J" . meow-next-expand)
                            '("k" . meow-prev)
                            '("K" . meow-prev-expand)
                            '("l" . meow-right)
                            '("L" . meow-right-expand)
                            '("m" . consult-register-store)
                            '("M" . meow-block)
                            '("n" . meow-search)
                            '("N" . meow-pop-selection);;

                            '("o" . meow-open-below)
                            '("O" . meow-open-above)
                            '("p" . meow-yank)
                            '("P" . meow-yank-pop);;
                            '("q" . meow-quit)
                            ;; '("Q" . meow-goto-line)
                            '("Q" . consult-goto-line)
                            '("r" . meow-replace)
                            '("R" . meow-swap-grab)
                            '("s" . meow-line)
                            '("S" . meow-kmacro-lines) ;;
                            '("t" . meow-till)
                            '("u" . meow-undo)
                            '("U" . vundo)
                            '("v v" . meow-visit) ;;
                            '("V" . meow-kmacro-matches) ;;
                            '("w" . meow-mark-word)
                            '("W" . meow-mark-symbol)

                            '("x" . meow-delete)
                            '("X" . meow-backward-delete)
                            '("y" . meow-save)
                            ;; '("Y" . meow-sync-save)
                            '("z a" . hs-toggle-hiding)
                            '("z c" . hs-hide-block)
                            '("z o" . hs-show-block)
                            '("z m" . hs-hide-all)
                            '("z r" . hs-show-all)

                            '("v i" . meow-inner-of-thing)
                            '("v a" . meow-bounds-of-thing)
                            '("v \'" . insert-quotations)
                            '("v \"" . insert-quotes)
                            '("v \`" . insert-backquote)
                            '("v *" . insert-star)
                            '("v (" . insert-parentheses)
                            '("v [" . insert-bracket)
                            '("v {" . insert-curly)
                            '("v =" . insert-equation)

                            '("-" . negative-argument)
                            ;; '("=" . format-all-region)
                            '("=" . indent-region)
                            '("[" . meow-beginning-of-thing)
                            '("]" . meow-end-of-thing)
                            '("\\" . quoted-insert)
                            '(";" . meow-expand-1)
                            ;; '(":" . async-shell-command)
                            '("'" . consult-register-load)
                            '("," . meow-reverse)
                            '("." . repeat)


                            '("<escape>" . ignore)
                            '("!" . meow-start-kmacro-or-insert-counter)
                            '("@" . meow-end-or-call-kmacro)
                            '("#" . symbol-overlay-put)
                            '("^" . meow-join)
                            '("*" . symbol-overlay-put)
                            '("/" . consult-line))
    (meow-global-mode 1))
#+end_src
** meow commands like vim
#+begin_src elisp
  (defun meow-append-vim()
    (interactive)
    (progn (meow-line 1)
           (meow-append)))
  (defun meow-insert-vim()
    (interactive)
    (progn (meow-join 1)
           (meow-append)))
#+end_src
** transient for leader-keybindings
*** Transient
#+begin_src elisp
  (setup transient
    (require 'transient)
    (:with-map transient-base-map
      (:bind "<escape>" transient-quit-one)))
#+end_src
*** G extra commands
#+begin_src elisp
  (transient-define-prefix g-extra-commands()
    "Define notes leader-key maps"
    [["Code find"
      ("d" "find-definitions" xref-find-definitions)
      ("D" "find-references" xref-find-references)
      ("j" "find-apropos" xref-find-apropos)
      ("i" "find-impl" eglot-find-implementation)
      ("o" "find-def-other-window" xref-find-definitions-other-window)
      ]
     ["Code action"
      ("a" "code-actions" eglot-code-actions)
      ("r" "rename" eglot-rename)
      ("f" "format-all-region" format-all-region)
      ("F" "format-all-buffer" format-all-buffer)]
     ["diagnostic"
      ("n" "jump-to-next-diagnostic" flymake-goto-next-error)
      ;; ("p" "jump-to-prev-diagnostic" flymake-goto-prev-error)
      ("l" "list-diagnostics" consult-flymake)
      ]
     ["Navigate"
      ("m" "consult-mark" consult-mark)
      ]
     ["Clue"
      ("w" "clue-copy" clue-copy)
      ("y" "clue-yank" clue-paste)
      ]
     ["citre"
      ("p" "citre-peek" citre-peek)
      ("c" "citre-ace-peek" citre-ace-peek)
      ]
     ])
#+end_src
*** lewis-keybindings
#+begin_src elisp
  (transient-define-prefix leader-map-for-lewis()
    "Define leader-key map for special functions"
    [["Citre"
      ("ca" "ace-peek" citre-ace-peek)
      ("cj" "jump" citre-jump)
      ("cp" "peek" citre-peek)
      ("cJ" "jump-back" citre-jump-back)
      ("cu" "update-this-tags-file" citre-update-this-tags-file)
      ("cr" "peek-restore" citre-peek-restore)
      ("cs" "peek-save-session" citre-peek-save-session)
      ("cl" "peek-load-session" citre-peek-load-session)]
     ["Imenu"
      ("l" "Imenu list smart toggle" imenu-list-smart-toggle)]
      ;; ("L" "Boxy imenu" boxy-imenu)]
     ;; english help
     ["English helper"
      ("ht" "Toggle corfu english helper" toggle-corfu-english-helper)]
     ;; org-download
     ["Org download"
      ("d" "Screenshot" org-download-screenshot)]
     ["Youdao"
      ("yp" "Translate posframe" my-gts-translate-posframe)
      ("yi" "Translate input" gts-do-translate)]])
#+end_src
*** buffer-keybindings
#+begin_src elisp
  (transient-define-prefix leader-map-for-buffer()
    "Define leader-key map for buffer functions"
    [["Buffer"
     ("b" "consult-buffer" consult-buffer) ;; work with C-x b
     ("k" "kill-current-buffer" kill-current-buffer)
     ("l" "meow-last-buffer" meow-last-buffer)
     ("n" "next-buffer" next-buffer)
     ("p" "previous-buffer" previous-buffer)
     ("r" "revert-buffer" revert-buffer)]
     ["Bookmark"
     ("j" "bookmark-jump" bookmark-jump)
     ("m" "bookmark-set" bookmark-set)
     ("M" "bookmark-delete" bookmark-delete)]])
#+end_src
** meow leader keys
#+begin_src elisp
  ;; default
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; '("h" . "H-h")
   ;; '("l" . "H-l")
   '("." . "H-.")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))

  ;; buffer
  (meow-leader-define-key
   ;; '("b b" . persp-switch-to-buffer)
   '("b" . leader-map-for-buffer))

  ;; lewisliu
  (meow-leader-define-key
   '("e" . leader-map-for-lewis))

  ;; search
  (meow-leader-define-key
   ;; '("s" . leader-map-for-search)
   '("s b" . consult-buffer)
   '("s d" . consult-ripgrep)
   '("s D" . lewis/ripgrep-search-other-dir)
   '("s f" . consult-find)
   '("s F" . lewis/find-file-other-dir)
   '("s g" . rg)
   '("s h" . consult-history)
   '("s i" . consult-imenu)
   '("s l" . consult-keep-lines)
   '("s s" . consult-line)
   '("s S" . consult-ripgrep-one-file)
   )
  ;; apps
  (meow-leader-define-key
   '("a a" . org-agenda)
   '("a c" . my-gtd-choose)
   '("a c" . org-capture)
   '("a w" . my/weekly-agenda-review)
   '("a e" . my/show-next-without-effort)

   '("a g s" . gif-screencast-start-or-stop)
   '("a g p" . gif-screencast-toggle-pause)
   '("a l" . app-launcher-run-app)
   '("a b" . vterm-toggle-backward)
   '("a i" . double-vterm-toggle-insert-cd)
   '("a t" . org-pomodoro)
   )


  (defun find-config-file()
    (interactive)
    (find-file nowisemacs-config-file))

  ;; file
  (meow-leader-define-key
   '("f r" . consult-recent-file)
   '("f p" . find-config-file))

  ;; notes
  (meow-leader-define-key
   ;; '("n r f" . project-find-xnotes-dir-files)
   '("n r f" . denote-open-or-create-with-subdirectory)
   '("n r p" . project-find-papers-dir-files)
   '("n r s" . project-find-searchable-dir-files)
   '("n r o" . project-find-orgmode-dir-files)
   '("n r c" . consult-notes)
   '("n r g" . project-find-gtd-dir-files)

   '("n e" . org-noter)

   '("n b" . citar-open)
   ;; org-remark
   '("n m m" . org-remark-mark))


  (meow-leader-define-key
   ;;w workspace
   '("TAB". leader-map-for-tabspaces))
#+END_SRC
** which-key
#+begin_src elisp
  (setup which-key
    (:option which-key-idle-delay 0.1)
    (:defer (which-key-mode)))
#+end_src
** insert-pair
#+begin_src elisp
  ;; insert pairs
  (defun insert-quotations (&optional arg)
    "Enclose following ARG sexps in quotation marks.
      Leave point after open-paren."
    (interactive "*P")
    (insert-pair arg ?\' ?\'))

  (defun insert-quotes (&optional arg)
    "Enclose following ARG sexps in quotes.
      Leave point after open-quote."
    (interactive "*P")
    (insert-pair arg ?\" ?\"))

  (defun insert-backquote (&optional arg)
    "Enclose following ARG sexps in quotations with backquote.
      Leave point after open-quotation."
    (interactive "*P")
    (insert-pair arg ?\` ?\'))

  (defun insert-star (&optional arg)
    "Enclose following ARG sexps in stars.
    Leave point after open-quotation."
    (interactive "*P")
    (insert-pair arg ?\* ?\*))

  (defun insert-bracket (&optional arg)
    "Enclose following ARG sexps in brackets.
    Leave point after open-quotation."
    (interactive "*P")
    (insert-pair arg ?\[ ?\]))

  (defun insert-curly (&optional arg)
    "Enclose following ARG sexps in curly braces.
    Leave point after open-quotation."
    (interactive "*P")
    (insert-pair arg ?\{ ?\}))

  (defun insert-equate (&optional arg)
    "Enclose following ARG sexps in equations.
    Leave point after open-quotation."
    (interactive "*P")
    (insert-pair arg ?\= ?\=))
#+end_src
** electric
#+begin_src elisp
  (setup elec-pair
    (:defer
     (electric-pair-mode)))
#+end_src
* UI
** Font
#+begin_src elisp
  (defun font-installed-p (font-name)
    "Check if font with FONT-NAME is available."
    (find-font (font-spec :name font-name)))

  ;; font size
  (if (eq system-type 'darwin)
      (defvar lewis-font-size 140)
    (defvar lewis-font-size 120))

  ;; fixed font
  (setq lewis-fixed-font (cl-loop for font in '(
                                                "Maple Mono SC NF"
                                                ;; "InconsolataGo QiHei NF"
                                                ;; "yaheiInconsolata"
                                                "JetBrainsMono Nerd Font"
                                                "JetBrains Mono"
                                                "Sarasa Mono SC Nerd"
                                                "Monaco"
                                                "Consolas"
                                                )
                                  when (font-installed-p font)
                                  return font))
  ;; variable font
  (setq lewis-variable-font (cl-loop for font in '(
                                                   "Noto Sans CJK SC"
                                                   "Arial"
                                                   "Helvetica"
                                                   "Times New Roman")
                                     when (font-installed-p font)
                                     return font))

  ;; chinese font
  (setq lewis-chinese-font (cl-loop for font in '("Maple Mono SC NF"
                                                  "Sarasa Mono SC Nerd"
                                                  "Microsoft Yahei")
                                    when (font-installed-p font)
                                    return font))

  ;; symbol font
  (setq lewis-symbol-font (cl-loop for font in '("Symbola"
                                                 "Symbol")
                                   when (font-installed-p font)
                                   return font))

  (when (display-graphic-p)
    ;; Set default font
    (if lewis-fixed-font
        (progn
          (set-face-attribute 'default nil :family lewis-fixed-font :height lewis-font-size)
          (set-face-attribute 'fixed-pitch nil :family lewis-fixed-font :height 1.0)))

    ;; variable-pitch
    (if lewis-variable-font
        (set-face-attribute 'variable-pitch nil :family lewis-variable-font :height 1.0))

    ;; Specify font for all unicode characters
    ;; (if lewis-symbol-font
    ;;     return(set-fontset-font t 'unicode lewis-symbol-font nil 'prepend))

    ;; ;; Specify font for Chinese characters
    (if lewis-chinese-font
        (set-fontset-font t '(#x4e00 . #x9fff) lewis-chinese-font))
    )
#+end_src
** variable-pitch and cn-en-fixed-pitch faces
#+begin_src elisp :tangle no
  (setup mixed-pitch
    (:when-loaded
      (delete 'org-table mixed-pitch-fixed-pitch-faces)))
  ;; 中英文严格等宽字体设置
  (with-eval-after-load 'org
    (dolist (fixed-chinese-english-face '(org-table))
      (set-face-attribute fixed-chinese-english-face nil :family "Sarasa Mono SC Nerd" :height 1.0)))
#+end_src
** Theme
*** ef-themes
#+begin_src elisp
  (setup ef-themes)
  (load-theme 'ef-winter t)
#+end_src
** line number
#+begin_src elisp
  ;; line number
  ;; only enable line number in some modes, borrowed from lazycat-emacs
  (setq display-line-numbers-width-start t)
  (setq line-number-display-limit large-file-warning-threshold)
  (setq line-number-display-limit-width 1000)

  (dolist (hook (list
                 'c-mode-common-hook
                 'c-mode-hook
                 'emacs-lisp-mode-hook
                 'lisp-interaction-mode-hook
                 'lisp-mode-hook
                 'java-mode-hook
                 'asm-mode-hook

                 'haskell-mode-hook
                 'rcirc-mode-hook
                 'erc-mode-hook
                 'sh-mode-hook
                 'makefile-gmake-mode-hook
                 'python-mode-hook
                 'js-mode-hook
                 'html-mode-hook
                 'css-mode-hook
                 'tuareg-mode-hook
                 'go-mode-hook
                 'coffee-mode-hook
                 'qml-mode-hook
                 'markdown-mode-hook
                 'slime-repl-mode-hook
                 'package-menu-mode-hook
                 'cmake-mode-hook
                 'php-mode-hook
                 'web-mode-hook
                 'coffee-mode-hook
                 'sws-mode-hook
                 'jade-mode-hook
                 'vala-mode-hook
                 'rust-mode-hook
                 'ruby-mode-hook
                 'qmake-mode-hook
                 'lua-mode-hook
                 'swift-mode-hook
                 'llvm-mode-hook
                 'conf-toml-mode-hook
                 'nxml-mode-hook
                 'nim-mode-hook
                 ;;'org-mode-hook
                 'verilog-mode-hook
                 ))
    (add-hook hook (lambda () (display-line-numbers-mode))))
#+end_src
** all-the-icons
I'm thinking about removing this package, but it's pretty good so far
*** all-the-icons
#+begin_src elisp
  (setup all-the-icons
    (:option all-the-icons-scale-factor 1.0))
  (setup all-the-icons-completion
    (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))
#+end_src

** rainbow-delimiters
rainbow-delimiters is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth.
#+begin_src elisp
  (setup rainbow-delimiters
    (:hook-into prog-mode))
#+end_src
** diff-hl
diff-hl-mode highlights uncommitted changes on the left side of the window (area also known as the "gutter"), allows you to jump between and revert them selectively.
#+begin_src elisp
  (setup diff-hl
    (:hook-into prog-mode)
    (:when-loaded
      (diff-hl-margin-mode)))
#+end_src
** emacs-dashboard
#+begin_src elisp
  (setup dashboard
    (:option dashboard-items '((recents . 5)
                               ;; (agenda . 5)
                               (bookmarks . 5)
                               ;; (projects . 5)
                               )
             dashboard-set-heading-icons t
             dashboard-set-file-icons t
             dashboard-center-content t
             dashboard-startup-banner (concat nowisemacs-config-useful-tools "banner.txt")
             dashboard-set-init-info t)
    (dashboard-setup-startup-hook))
#+end_src
** doom-modeline
#+begin_src elisp
  (setup dash)
  (setup s)
  (setup f)
  (setup shrink-path) ;; <-(setup s)(setup f)

  (setup doom-modeline
    (:option doom-modeline-window-width-limit fill-column
             doom-modeline-height 5
             doom-modeline-hud t
             ;; doom-modeline-icon nil
             doom-modeline-unicode-fallback t)
    (:hook-into after-init))
  (set-face-attribute 'mode-line nil :family lewis-fixed-font :height 100)
#+end_src
** hl-todo
#+begin_src elisp
  ;; 0.48
  (setup hl-todo
    (:defer
     (global-hl-todo-mode))
    )
#+end_src
** pulsar
#+begin_src elisp
  (setup pulsar
    (:defer
     (pulsar-global-mode 1)))
#+end_src
** show-paren-mode
#+begin_src elisp
  (setup paren
    (:option show-paren-context-when-offscreen 'overlay))
#+end_src
** iscroll
#+begin_src elisp
  (setup iscroll
    (:hook-into text-mode))
#+end_src
* General Configuration
** simple
#+begin_src elisp
  (setup simple
    ;; show line/column/filesize in modeline
    (:option line-number-mode t
             column-number-mode t
             size-indication-mode t
             kill-do-not-save-duplicates t
             shell-command-prompt-show-cwd t
             what-cursor-show-names t)
    (:defer
     (global-visual-line-mode)
     ))
#+end_src
** general modes
#+begin_src elisp
  (setup save-place
    (:defer save-place-mode))

  (setup autorevert
    (:option global-auto-revert-non-file-buffers t)
    (:defer (global-auto-revert-mode t)))                  ; 当另一程序修改了文件时，让 Emacs 及时刷新 Buffer
  (setup hl-line
    (:defer
     (global-hl-line-mode)))
  (setup frame
    (:defer (blink-cursor-mode -1)                  ;指针不闪动
            ))

  (setup pixel-scroll
    (:defer
     ;; 最近发现和 pdf-view-mode 工作不协调
     (when (>= emacs-major-version 29)
       (pixel-scroll-precision-mode t))))
  (setup repeat
    (:defer (repeat-mode)))
#+end_src
** backup
*** super-save
#+begin_src elisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)

  (setup super-save
    (:option super-save-auto-save-when-idle t)
    (:defer
     (super-save-mode 1))
    )
#+end_src
*** savehist
#+begin_src elisp
  (setup savehist
    (:option history-length 10000
             history-delete-duplicates t
             savehist-save-minibuffer-history t)
    (:defer
     (savehist-mode)))
#+end_src
** no-littering
#+begin_src lisp
  (setup no-littering)
#+end_src
** recentf
#+begin_src elisp
  (setup recentf
    (:also-load no-littering)
    (:option recentf-max-saved-items 1000
             recentf-exclude `("/tmp/" "/ssh:" ,(concat user-emacs-directory "lib/.*-autoloads\\.el\\'")))
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory)
    (:defer
     (recentf-mode)))
#+end_src
** 自动换行
#+begin_src elisp
  (setq fill-column 100)          ;默认显示 100列就换行
  (setq word-wrap t)
  (setq word-wrap-by-category t)
  ;; (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src
** so-long
解决长行卡死问题
#+begin_src elisp
  (setup so-long
    (:defer
     (global-so-long-mode 1)
     ))
#+end_src
** TRAMP
#+begin_src elisp
  (setq tramp-default-method "ssh")
#+end_src
** Automatically clean whitespace
#+begin_src elisp
  (setup ws-butler
    (:hook-into text-mode prog-mode))
#+end_src
** exec-path-from-shell
可以优化速度, 建议看一下官网的一篇文章
#+begin_src elisp
  (setup exec-path-from-shell
    (:defer
     (when (memq window-system '(mac ns x))
       (exec-path-from-shell-initialize))))
#+end_src
** Undo
*** vundo for undo history
#+begin_src elisp
  (setup vundo
    (:bind "l" vundo-forward
           "h" vundo-backward
           "j" vundo-next
           "k" vundo-previous))
#+end_src
* 补全
** Completions with Vertico
#+begin_src elisp
  (setup vertico
    (:option vertico-cycle t)
    (:with-map vertico-map
      (:bind [backspace] vertico-directory-delete-char))
    (:defer
     (vertico-mode)
    ))
#+end_src
** Orderless and pinyinlib
#+begin_src elisp
  (setup orderless
    (:option completion-styles '(orderless)
             completion-category-defaults nil
             completion-category-overrides '((file (styles . (partial-completion)))))
    (:when-loaded
      (require 'pinyinlib)
      (defun completion--regex-pinyin (str)
        (orderless-regexp (pinyinlib-build-regexp-string str)))
      (add-to-list 'orderless-matching-styles 'completion--regex-pinyin)
      ))
#+end_src
** Consult Commands
*** consult
#+begin_src elisp
  (setup consult
    (:option register-preview-delay 0.1
             register-preview-function #'consult-register-format
             xref-show-xrefs-function #'consult-xref
             xref-show-definitions-function #'consult-xref
             consult-project-root-function (lambda ()
                                             (when-let (project (project-current))
                                               (car (project-roots project)))))
    (:with-map minibuffer-local-map
      (:bind "C-r" consult-history)))
#+end_src
*** consult-ripgrep-one-file
#+begin_src elisp
  (defcustom my-consult-ripgrep-or-line-limit 1000
    "Buffer size threshold for `my-consult-ripgrep-or-line'.
  When the number of characters in a buffer exceeds this threshold,
  `consult-ripgrep' will be used instead of `consult-line'."
    :type 'integer)

    (defun consult-ripgrep-one-file ()
    "Call `consult-ripgrep' for the current buffer (a single file)."
    (interactive)
    (let ((consult-project-root-function (lambda nil nil))
          (consult-ripgrep-args
           (concat "rg "
                   "--null "
                   "--line-buffered "
                   "--color=never "
                   "--line-number "
                   "--smart-case "
                   "--no-heading "
                   "--max-columns=1000 "
                   "--max-columns-preview "
                   "--search-zip "
                   "--with-filename "
                   (shell-quote-argument buffer-file-name))))
      (consult-ripgrep)))
#+end_src
*** search other cwd
#+begin_src elisp
  (defun lewis/ripgrep-search-other-dir()
    (interactive)
    (let ((current-prefix-arg '(-1)))
      (call-interactively 'consult-ripgrep)))

  (defun lewis/find-file-other-dir()
    (interactive)
    (let ((current-prefix-arg '(-1)))
      (call-interactively 'consult-find)))
#+end_src
*** consult-dash
#+begin_src elisp :tangle no
  (setup dash-docs
    (:option dash-docs-docsets-path (concat no-littering-var-directory "dash-docsets")
             dash-docs-common-docsets '("C++")))
  (setup consult-dash)
    #+end_src
** Marginalia
#+begin_src elisp
  (setup marginalia
    (:option marginalia-annotators '(marginalia-annotators-heavy
                                     marginalia-annotators-light
                                     nil))
    (:when-loaded
      (cl-pushnew 'epkg-marginalia-annotate-package
                  (alist-get 'package marginalia-annotator-registry)))
    (:hook-into after-init))
#+end_src
** embark
should be check after reading the embark.el manual
#+begin_src elisp
  (setup embark-consult
    (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode))

  (setup embark
    (:also-load embark-consult)
    (setq prefix-help-command 'embark-prefix-help-command)
    (:global "C-S-a" embark-act))

  (setup wgrep)
#+end_src
** corfu(instead of company)
#+begin_src elisp
  ;;0.585
  (setup corfu
    (:option corfu-cycle t                ;; Enable cycling for `corfu-next/previous'
             corfu-auto t                 ;; Enable auto completion
             corfu-quit-no-match t        ;; Automatically quit if there is no match
             corfu-preview-current nil    ;; Disable current candidate preview
             ;; corfu-echo-documentation nil ;; Disable documentation in the echo area
             corfu-auto-prefix 1
             corfu-auto-delay 0.01
             )
    (:with-map corfu-map
      (:bind
       ;; [tab] corfu-next
       ;;       [backtab] corfu-previous
       "<escape>" corfu-quit))
    (:hook corfu-popupinfo-mode)
    (:defer
     (global-corfu-mode)
     (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)
     )
    )

  (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active."
    (unless (or (bound-and-true-p mct--active)
                (bound-and-true-p vertico--input))
      ;; (setq-local corfu-auto nil) Enable/disable auto completion
      (corfu-mode 1)))

  (setup cape
    (add-to-list 'completion-at-point-functions #'cape-file)
    ;; (add-to-list 'completion-at-point-functions #'cape-tex)
    ;; (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    ;; (add-to-list 'completion-at-point-functions #'cape-keyword)
    )

#+end_src
** corfu-all-the-icons
#+begin_src elisp
  (setup corfu-all-the-icons
    (:with-feature corfu
      (:when-loaded
        (require 'all-the-icons)

        (defvar kind-all-the-icons--cache nil
          "The cache of styled and padded label (text or icon).
  An alist.")

        (defun kind-all-the-icons-reset-cache ()
          "Remove all cached icons from `kind-all-the-icons-mapping'."
          (interactive)
          (setq kind-all-the-icons--cache nil))

        (defun kind-all-the-icons--set-default-clear-cache (&rest args)
          (kind-all-the-icons-reset-cache)
          (apply #'set-default args))

        (defvar kind-all-the-icons--icons
          `((unknown . ,(all-the-icons-material "find_in_page" :height 0.8 :v-adjust -0.15))
            (text . ,(all-the-icons-faicon "text-width" :height 0.8 :v-adjust -0.02))
            (method . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
            (function . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
            (fun . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
            (constructor . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
            (ctor . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
            (field . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
            (variable . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
            (var . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
            (class . ,(all-the-icons-material "settings_input_component" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
            (interface . ,(all-the-icons-material "share" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
            (i/f . ,(all-the-icons-material "share" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
            (module . ,(all-the-icons-material "view_module" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
            (mod . ,(all-the-icons-material "view_module" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
            (property . ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.02))
            (prop . ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.02))
            (unit . ,(all-the-icons-material "settings_system_daydream" :height 0.8 :v-adjust -0.15))
            (value . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
            (enum . ,(all-the-icons-material "storage" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
            (keyword . ,(all-the-icons-material "filter_center_focus" :height 0.8 :v-adjust -0.15))
            (k/w . ,(all-the-icons-material "filter_center_focus" :height 0.8 :v-adjust -0.15))
            (snippet . ,(all-the-icons-material "format_align_center" :height 0.8 :v-adjust -0.15))
            (sn . ,(all-the-icons-material "format_align_center" :height 0.8 :v-adjust -0.15))
            (color . ,(all-the-icons-material "palette" :height 0.8 :v-adjust -0.15))
            (file . ,(all-the-icons-faicon "file-o" :height 0.8 :v-adjust -0.02))
            (reference . ,(all-the-icons-material "collections_bookmark" :height 0.8 :v-adjust -0.15))
            (ref . ,(all-the-icons-material "collections_bookmark" :height 0.8 :v-adjust -0.15))
            (folder . ,(all-the-icons-faicon "folder-open" :height 0.8 :v-adjust -0.02))
            (dir . ,(all-the-icons-faicon "folder-open" :height 0.8 :v-adjust -0.02))
            (enum-member . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15))
            (enummember . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15))
            (member . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15))
            (constant . ,(all-the-icons-faicon "square-o" :height 0.8 :v-adjust -0.1))
            (const . ,(all-the-icons-faicon "square-o" :height 0.8 :v-adjust -0.1))
            (struct . ,(all-the-icons-material "settings_input_component" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
            (event . ,(all-the-icons-octicon "zap" :height 0.8 :v-adjust 0 :face 'all-the-icons-orange))
            (operator . ,(all-the-icons-material "control_point" :height 0.8 :v-adjust -0.15))
            (op . ,(all-the-icons-material "control_point" :height 0.8 :v-adjust -0.15))
            (type-parameter . ,(all-the-icons-faicon "arrows" :height 0.8 :v-adjust -0.02))
            (param . ,(all-the-icons-faicon "arrows" :height 0.8 :v-adjust -0.02))
            (template . ,(all-the-icons-material "format_align_left" :height 0.8 :v-adjust -0.15))
            (t . ,(all-the-icons-material "find_in_page" :height 0.8 :v-adjust -0.15))))


        (defsubst kind-all-the-icons--metadata-get (metadata type-name)
          (or
           (plist-get completion-extra-properties (intern (format ":%s" type-name)))
           (cdr (assq (intern type-name) metadata))))

        (defun kind-all-the-icons-formatted (kind)
          "Format icon kind with all-the-icons"
          (or (alist-get kind kind-all-the-icons--cache)
              (let ((map (assq kind kind-all-the-icons--icons)))
                (let*  ((icon (if map
                                  (cdr map)
                                (cdr (assq t kind-all-the-icons--icons))))
                        (half (/ (default-font-width) 2))
                        (pad (propertize " " 'display `(space :width (,half))))
                        (disp (concat pad icon pad)))
                  (setf (alist-get kind kind-all-the-icons--cache) disp)
                  disp))))

        (defun kind-all-the-icons-margin-formatter (metadata)
          "Return a margin-formatter function which produces kind icons.
  METADATA is the completion metadata supplied by the caller (see
  info node `(elisp)Programmed Completion').  To use, add this
  function to the relevant margin-formatters list."
          (if-let ((kind-func (kind-all-the-icons--metadata-get metadata "company-kind")))
              (lambda (cand)
                (if-let ((kind (funcall kind-func cand)))
                    (kind-all-the-icons-formatted kind)
                  (kind-all-the-icons-formatted t))))) ;; as a backup

        (add-to-list 'corfu-margin-formatters
                     #'kind-all-the-icons-margin-formatter)
        )))
#+end_src
** yasnippet
#+begin_src elisp
  (setup yasnippet
    (:option yas-snippet-dirs (list (concat nowisemacs-config-useful-tools "snippets")))
    (:defer (yas-global-mode))
   )
#+end_src
** tempel
#+begin_src elisp
  (setup tempel
    (:option tempel-path "~/.emacs.d/useful-tools/tempel-snippets"
             tempel-trigger-prefix "<")
    (:global "M-*" tempel-insert
             "M-+"  tempel-complete)
    (:with-map tempel-map
      (:bind "M-]"  tempel-next
             "M-["  tempel-previous)))
  ;; Setup completion at point
  (defun tempel-setup-capf ()
    (setq-local completion-at-point-functions
                (cons #'tempel-complete
                      completion-at-point-functions)))
  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  (add-hook 'text-mode-hook 'tempel-setup-capf)
#+end_src
** rg.el
#+begin_src elisp
  (setup rg)
#+end_src
* Window Management
** winner-mode
#+begin_src elisp
  (setup winner
    (:defer
     (winner-mode t)))
#+end_src
** popper
Popper is a minor-mode to tame the flood of ephemeral windows Emacs produces, while still keeping them within arm’s reach.
#+begin_src elisp
  (setup popper
    (:option popper-reference-buffers '("\\*Messages\\*"
                                        "Output\\*$"
                                        "\\*Async Shell Command\\*"
                                        "Go-Translate"
                                        help-mode
                                        helpful-mode
                                        compilation-mode
                                        youdao-dictionary-mode)
             popper-window-height  (lambda (win)
                                     (fit-window-to-buffer
                                      win
                                      (floor (frame-height) 2)))
             )
    (:global "M-`" popper-toggle-latest ;; shadown tmm-menubar
             "C-M-`" popper-toggle-type)
    (:defer
     (popper-mode +1)
     (popper-echo-mode +1))
    )
#+end_src
** Move
*** avy
Jump anywhere in the world
#+begin_src elisp
  (setup avy
    (:global "M-j" avy-goto-word-1))
#+end_src
*** jump-back
borrowed from citre, now you can always jump-back use "M-,"
#+begin_src elisp :tangle no
  (defun my--push-point-to-xref-marker-stack (&rest r)
    (xref-push-marker-stack (point-marker))) ;; must autoload this command in xref
  (dolist (func '(find-function
                  consult-imenu
                  consult-ripgrep
                  consult-line
                  consult-find
                  find-file
                  meow-goto-line
                  isearch-forward))
    (advice-add func :before 'my--push-point-to-xref-marker-stack))
#+end_src
*** bookmark
#+begin_src elisp
  (setq bookmark-default-file (concat nowisemacs-doc-emacs-dir "bookmarks"))
#+end_src
*** ace-window
#+begin_src elisp
  (setup ace-window
      (:global [remap other-window] #'ace-window))
#+end_src
*** windmove
#+begin_src elisp
  (setup windmove
    (transient-define-prefix windmove-transient-keybindings()
      "Define windmove maps"
      [[("h" "left" windmove-left :transient t)
        ("H" "swap-left" windmove-swap-states-left :transient t)]
       [("j" "down" windmove-down :transient t)
        ("J" "swap-down" windmove-swap-states-down :transient t)]
       [("k" "up" windmove-up :transient t)
        ("K" "swap-up" windmove-swap-states-up :transient t)]
       [("l" "right" windmove-right :transient t)
        ("L" "swap-right" windmove-swap-states-right :transient t)]
       ])
    (:global "C-x O" windmove-transient-keybindings)
    )

#+end_src
* ibuffer
** ibuffer
#+begin_src elisp
  (setup ibuffer
    (:global [remap list-buffers] #'ibuffer))
#+end_src
* Input
* posframe
#+begin_src elisp
  (setup posframe)
#+end_src
** pyim
#+begin_src elisp :tangle no
  ;; (setup pyim-tsinghua-dict
  ;;   (:load-after pyim-dict)
  ;;   (:when-loaded
  ;;     (pyim-tsinghua-dict-enable)))
  ;; (setup pyim-sogou-scel-dict
  ;;   (:load-after pyim-dict)
  ;;   (:when-loaded
  ;;     (pyim-sogou-scel-dict-enable)))
  (setup xr)
  (setup pyim
    (:option pyim-cloudim 'baidu
             pyim-punctuation-translate-p '(no yes auto)
             pyim-page-tooltip 'posframe
             pyim-page-length 5
             pyim-dcache-backend 'pyim-dregcache
             pyim-dcache-directory (concat nowisemacs-doc-emacs-dir "01-binary-files/pyim/dcache/")
             )
    (:when-loaded
      (require 'popup nil t)
      (require 'pyim-dregcache)
      (require 'pyim-cregexp-utils)
      (require 'pyim-cstring-utils)
      (set-default 'pyim-punctuation-half-width-functions
                   '(pyim-probe-punctuation-line-beginning pyim-probe-punctuation-after-punctuation))
      ;; (pyim-default-scheme 'xiaohe-shuangpin)
      (pyim-default-scheme 'quanpin)
      (pyim-isearch-mode 1)

      (defalias 'pyim-probe-meow-normal-mode #'(lambda nil
                                                 (meow-normal-mode-p)))
      (set-default 'pyim-english-input-switch-functions '(pyim-probe-auto-english
                                                          pyim-probe-isearch-mode
                                                          pyim-probe-program-mode
                                                          pyim-probe-org-structure-template
                                                          pyim-probe-org-latex-mode
                                                          pyim-probe-meow-normal-mode))
      (defalias 'my-orderless-regexp
        #'(lambda
            (orig_func component)
            (let
                ((result
                  (funcall orig_func component)))
              (pyim-cregexp-build result))))
      (advice-add 'orderless-regexp :around #'my-orderless-regexp)
      )
    (:defer
     (require 'pyim))
    ;; (setq default-input-method "pyim")
    )
#+end_src
** rime
#+begin_src elisp
    (setup rime
      (:option rime-disable-predicates '(meow-normal-mode-p
                                         meow-motion-mode-p
                                         meow-keypad-mode-p
                                         rime-predicate-prog-in-code-p
                                         rime-predicate-punctuation-line-begin-p ;;在行首要输入符号时
                                         ;; rime-predicate-after-alphabet-char-p ;;在英文字符串之后（必须为以字母开头的英文字符串）
                                         rime-predicate-current-input-punctuation-p ;;当要输入的是符号时
                                         rime-predicate-after-ascii-char-p ;;任意英文字符后 ,enable this to use with <s
                                         rime-predicate-current-uppercase-letter-p ;; 将要输入的为大写字母时
                                         rime-predicate-space-after-cc-p ;;在中文字符且有空格之后
                                         )
               ;; rime-inline-predicates '(
               ;;                          )
               default-input-method "rime"
               rime-show-candidate 'posframe
               rime-posframe-properties (list :internal-border-width 1
                                              :font "Maple Mono SC NF")
               rime-user-data-dir "~/Documents/emacs-rime-user-data/"
               rime-inline-ascii-trigger 'shift-r
               )
      (when (eq system-type 'darwin)
        (setq
         rime-emacs-module-header-root "/Applications/Emacs.app/Contents/Resources/include/" ;; use build-emacs
         ;; rime-emacs-module-header-root "/opt/homebrew/opt/emacs-plus@30/include" ;;use emacs-plus
         rime-librime-root "~/Downloads/rime-1/dist"
         ))
      )
#+end_src
* File and Browsing
** file browsing
*** dired
#+begin_src elisp
  (setup dired
    (:option dired-dwim-target t)
    (:hook dired-hide-details-mode dired-omit-mode)
    )
    #+end_src
*** diredfl
#+begin_src elisp
  (setup diredfl
    (:hook-into dired-mode))
#+end_src
*** dirvish
Dirvish is a minimalistic file manager based on Dired. It's fast
#+begin_src elisp
    (setup dirvish
      (:option dirvish-attributes '(subtree-state all-the-icons)
               dirvish-side-width 40)
      (:bind "TAB" dirvish-toggle-subtree)
      (:when-loaded
        (dirvish-override-dired-mode)
        (dirvish-side-follow-mode)))
#+end_src
** structure browsing
*** imenu-list
#+begin_src elisp
  (setup imenu-list
    (:autoload himenu-list-smart-toggle)
    (:option imenu-list-focus-after-activate t
             imenu-list-auto-resize t
             imenu-list-position 'left
             imenu-list-auto-update nil
             ))
#+end_src
*** maple-explorer
#+begin_src elisp
  (setup maple-explorer
    (:option maple-explorer-imenu-display-alist '((side . left) (slot . -1))
          maple-explorer-imenu-width '(20 . 60)))
#+end_src
** tab-line and tab-bar
#+begin_src elisp
  (setup tab-bar
    (:option tab-bar-new-button-show nil
             tab-bar-close-button-show nil)
    (:when-loaded
      (defun tab-bar-select-tab-1st()
        (interactive)
        (tab-bar-select-tab 1))
      (defun tab-bar-select-tab-2nd()
        (interactive)
        (tab-bar-select-tab 2))
      (defun tab-bar-select-tab-3rd()
        (interactive)
        (tab-bar-select-tab 3))
      (defun tab-bar-select-tab-4th()
        (interactive)
        (tab-bar-select-tab 4))
      (defun tab-bar-select-tab-5th()
        (interactive)
        (tab-bar-select-tab 5))
      (defun tab-bar-select-tab-6th()
        (interactive)
        (tab-bar-select-tab 6))
      (defun tab-bar-select-tab-7th()
        (interactive)
        (tab-bar-select-tab 7))
      )
    )
  (setup tab-line
    (:option tab-line-new-button-show nil
             tab-line-close-button-show nil)
    ;; (:defer (global-tab-line-mode))
    )
#+end_src
** tabspaces
#+begin_src elisp
      (setup tabspaces
        (:option tabspaces-use-filtered-buffers-as-default t)
        (:defer
         (tabspaces-mode))
        (:when-loaded
          (transient-define-prefix leader-map-for-tabspaces()
            "Define tabspaces leader-key maps"
            [["Create or close"
              ("s" "tabspaces-switch-or-create-workspace" tabspaces-switch-or-create-workspace)
              ("c" "tabspaces-close-workspace" tabspaces-close-workspace)
              ("k" "tabspaces-remove-selected-buffer" tabspaces-remove-selected-buffer)
              ("o" "tabspaces-open-or-create-project-and-workspace" tabspaces-open-or-create-project-and-workspace)
              ("R" "tab-bar-rename-tab" tab-bar-rename-tab)
              ("r" "tab-bar-rename-tab-by-name" tab-bar-rename-tab-by-name)
              ]
             ["Switch tab bar"
              ("n" "tab-bar-switch-to-next-tab" tab-bar-switch-to-next-tab)
              ("p" "tab-bar-switch-to-prev-tab" tab-bar-switch-to-prev-tab)
              ("l" "tab-bar-switch-to-last-tab" tab-bar-switch-to-last-tab)
              ]
             ["Switch tab bar by index"
              ("1" "tab-bar-select-tab-1st" tab-bar-select-tab-1st)
              ("2" "tab-bar-select-tab-2nd" tab-bar-select-tab-2nd)
              ("3" "tab-bar-select-tab-3rd" tab-bar-select-tab-3rd)
              ("4" "tab-bar-select-tab-4th" tab-bar-select-tab-4th)
              ("5" "tab-bar-select-tab-5th" tab-bar-select-tab-5th)
              ("6" "tab-bar-select-tab-6th" tab-bar-select-tab-6th)
              ("7" "tab-bar-select-tab-7th" tab-bar-select-tab-7th)
              ]
             ]
            )
          ))
    #+end_src
** project
#+begin_src elisp
  (setup project
    (:when-loaded
      (add-to-list 'project-find-functions #'project-rootfile-try-detect)
      )
    )
#+end_src
** project-rootfile
#+begin_src elisp
  (setup project-rootfile
    (:option project-rootfile-list '(".project"))
   )
#+end_src
* shell
** vterm
#+begin_src elisp
  (setup vterm
    (:bind [(control return)] vterm-toggle-insert-cd))
  (defun new-vterm(name)
    "create a new vterm with a given name"
    (interactive "sInput a name:")
    (let ((vterm-buffer-name name))
      (vterm)))
#+end_src
** vterm-toggle
#+begin_src elisp
  (setup vterm-toggle
    (:option vterm-toggle-hide-method 'reset-window-configration)
    (:global "C-`" vterm-toggle)
    (:when-loaded
      (setq vterm-toggle-fullscreen-p nil)
      (add-to-list 'display-buffer-alist
                   '((lambda (buffer-or-name _)
                       (let ((buffer (get-buffer buffer-or-name)))
                         (with-current-buffer buffer
                           (or (equal major-mode 'vterm-mode)
                               (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                     (display-buffer-reuse-window display-buffer-at-bottom)
                     (reusable-frames . visible)
                     (window-height . 0.3)))
      (defun double-vterm-toggle-insert-cd()
        (interactive)
        (vterm-toggle-insert-cd)
        (vterm-toggle-insert-cd))
      )
    )
#+end_src
** eshell
#+begin_src elisp
  (defun new-eshell(name)
    "create a new eshell with a given name"
    (interactive "sInput a name:")
    (let ((eshell-buffer-name name))
    (eshell)))
#+end_src
* git
** magit
#+begin_src elisp
  (setup with-editor)
  (setup magit)
    ;; (:defer
    ;;  (require 'libgit)))
#+end_src
** ediff
#+begin_src elisp
  (setup ediff
    (:option ediff-split-window-function 'split-window-horizontally
             ediff-window-setup-function 'ediff-setup-windows-plain)
    ;; restore windows Configuration after ediff
    (add-hook 'ediff-before-setup-hook #'ediff-save-window-conf)
    (add-hook 'ediff-quit-hook #'ediff-restore-window-conf)
    (:when-loaded
      (defvar local-ediff-saved-window-conf nil)

      (defun ediff-save-window-conf ()
        (setq local-ediff-saved-window-conf (current-window-configuration)))

      (defun ediff-restore-window-conf ()
        (when (window-configuration-p local-ediff-saved-window-conf)
          (set-window-configuration local-ediff-saved-window-conf)))
      ))

#+end_src
* Program
** Language
*** elisp
**** helpful
#+begin_src elisp
  (setup elisp-refs)
  (setup helpful
    (:global "C-h f" #'helpful-callable
             "C-h v" #'helpful-variable
             "C-h k" #'helpful-key
             "C-c C-d" #'helpful-at-point
             "C-h F" #'helpful-function
             "C-h C" #'helpful-command))
#+end_src
**** elisp-demos
#+begin_src elisp
  (setup elisp-demos
    (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src
*** graphviz-dot-mode
#+begin_src elisp
  (setup graphviz-dot-mode
    (:file-match "\\.dot\\'")
    (:option graphviz-dot-indent-width 4)
    )
#+end_src
*** plantuml-mode
#+begin_src elisp
  (setup plantuml-mode
    (:option plantuml-jar-path "~/.emacs.d/var/plantuml.jar"))
#+end_src
*** beancount
Emacs major-mode to work with Beancount ledger files
#+begin_src elisp
  (setup beancount
    (:file-match "\\.beancount\\'"))
    (add-to-list 'auto-mode-alist
               (cons "\\.[pP][dD][fF]\\'" 'eaf-mode))
#+end_src
*** latex
**** basic
#+begin_src elisp
;;  (setup auctex)
  (setup cdlatex)
#+end_src
**** org-elp
#+begin_src elisp
  (setup org-elp
    (:option org-elp-idle-time 1))
#+end_src
*** python
**** python
#+begin_src elisp
  (setup python
    (:with-hook inferior-python-mode-hook
      (:hook (lambda ()
               (process-query-on-exit-flag
                (get-process "Python")))))
    (:when-loaded
      (when (and (executable-find "python3")
                 (string= python-shell-interpreter "python"))
        (setq python-shell-interpreter "python3"))
      (with-eval-after-load 'exec-path-from-shell
        (exec-path-from-shell-copy-env "PYTHONPATH"))
      ))
#+end_src
*** scheme
#+begin_src elisp
  (setup geiser)
  (setup geiser-guile)
#+end_src
*** common lisp slime
#+begin_src elisp
  (setup slime
    (:option inferior-lisp-program "sbcl"))
#+end_src
*** cc-mode
#+begin_src emacs-lisp
  (setup cc-mode
    (:option c-basic-offset 4))

  (setup hideif
    (:option hide-ifdef-shadow t
             hide-ifdef-initially t)
    (:with-feature hide-ifdef-mode
      (:hook-into c-mode c++-mode)))
#+end_src
*** lua-mode
#+begin_src elisp
(setup lua-mode)
#+end_src
*** cmake-mode
#+begin_src elisp
(setup cmake-mode)
#+end_src
** Useful programing tools
*** UI
**** tree-sitter
#+begin_src elisp :tangle no
  (setup tree-sitter
    (:hook-into c-mode-common python-mode)
    (:hook tree-sitter-hl-mode))
  (setup tree-sitter-langs)
#+end_src
**** treesit-auto
#+begin_src elisp
  (setup treesit-auto
    (:defer
    (global-treesit-auto-mode)))
#+end_src
**** symbol-overlay
Highlight symbols with keymap-enabled overlays
#+begin_src elisp
  (setup symbol-overlay
    (:autoload symbol-overlay-put))
#+end_src
**** electric-pair
#+begin_src elisp
    (setup elec-pair
      (:defer
       (electric-pair-mode)))
#+end_src
*** Complete
**** lsp mode
***** eglot
#+begin_src elisp
  (setup project)
  (setup xref
    (:option xref-search-program #'ripgrep)
    (:autoload xref-push-marker-stack)) ;; autoload this command for jump-back


  (setq read-process-output-max (* 1024 1024))
  (setup eglot
    (:option eglot-events-buffer-size 0
             eglot-workspace-configuration '((:python.analysis :useLibraryCodeForTypes t)))
    (:autoload eglot-find-implementation)
    (:when-loaded
      (set-face-attribute 'eglot-highlight-symbol-face nil :background "#227700")
    ))
  (setup eldoc
    (:option eldoc-echo-area-use-multiline-p t
             eldoc-echo-area-display-truncation-message t))
  ;; (setq eldoc-echo-area-prefer-doc-buffer nil)
#+end_src
***** consult-eglot
#+begin_src elisp
  (setup consult-eglot
    (:load-after eglot)
    (:with-map eglot-mode-map
      (:bind [remap xref-find-apropos] #'consult-eglot-symbols)))
#+end_src
***** lsp-bridge
#+begin_src elisp
    (setup lsp-bridge
      (:option lsp-bridge-org-babel-lang-list '("emacs-lisp"
                                                "python"
                                                "dot"
                                                "latex"
                                                "C"
                                                "C++"
                                                "scheme"
                                                "plantuml")
               ))

#+end_src
**** citre
Citre is an advanced Ctags (or actually, readtags) frontend for Emacs.
#+begin_src elisp
  (setup citre
    (:defer
     (require 'citre-config))
    (:option citre-use-project-root-when-creating-tags t
             citre-prompt-language-for-ctags-command t
             ;; citre-auto-enable-citre-mode-modes '(prog-mode)
             )
    )
#+end_src
**** eacl
#+begin_src elisp
  (setup eacl
    (:option eacl-grep-program "ripgrep")
    (:global "M-l" eacl-complete-line
             "M-L" eacl-complete-multiline))
#+end_src
*** quickrun
#+begin_src elisp
  (setup ht)
  (setup quickrun)
#+end_src
*** eglot-ltex
eglot client leveraging LTEX Language Server.
#+begin_src elisp
  (setup eglot-ltex
    (:option eglot-languagetool-server-path "~/Downloads/ltex-ls/")
    (:with-hook org-mode-hook
      (:hook (lambda ()
               (require 'eglot-ltex)))))
#+end_src
*** Code toggle with hideshow
#+begin_src elisp
  (setup hideshow
    (:with-hook prog-mode-hook
      (:hook hs-minor-mode))
    (add-to-list 'hs-special-modes-alist '(verilog-mode "\\(\\<begin\\>\\|\\<case\\>\\|\\<module\\>\\|\\<class\\>\\|\\<function\\>\\|\\<task\\>\\)"
                                                        "\\(\\<end\\>\\|\\<endcase\\>\\|\\<endmodule\\>\\|\\<endclass\\>\\|\\<endfunction\\>\\|\\<endtask\\>\\)" nil verilog-forward-sexp-function))
    )
#+end_src
*** separedit
#+begin_src elisp
  (setup edit-indirect)
  (setup separedit
    (:option separedit-default-mode 'org-mode
             separedit-continue-fill-column t
             separedit-remove-trailing-spaces-in-comment t)
    (:autoload separedit))

  (define-key prog-mode-map (kbd "C-c '") #'separedit)
#+end_src
*** format-all
#+begin_src elisp
  (setup inheritenv)
  (setup language-id)
  (setup format-all)
#+end_src
*** gdb
#+begin_src elisp
    (setup gdb-mi
      (:global "<f5>" gdb-transient-keybindings)
      (:when-loaded
        (transient-define-prefix gdb-transient-keybindings()
          "Define map for gdb functions"
          [[("b" "gud-break" gud-break)
            ("c" "gud-cont" gud-cont)]
           [("f" "gud-finish" gud-finish)
            ("j" "gud-jump" gud-jump)]
           [("n" "gud-next" gud-next)
            ("p" "gud-print" gud-print)]
           [("r" "gud-run" gud-run)
            ("R" "gud-remove" gud-remove)]
           [("s" "gud-step" gud-step)
            ("u" "gud-until" gud-until)]
           [("w" "gud-watch" gud-watch)]
           ])))
#+end_src
*** disaster
Disassemble C, C++ or Fortran code under cursor
#+begin_src elisp
  (setup disaster
    (:option disaster-assembly-mode 'nasm-mode
             disaster-objdump "objdump -d -M att -Sl --no-show-raw-insn"))
#+end_src
* Org Mode
** org-mode
#+begin_src elisp
  (setup org
    (setq org-directory (concat nowisemacs-doc-emacs-dir "01-orgmode/"))
    (:option org-adapt-indentation nil
             org-startup-indented t
             org-hide-emphasis-markers t
             org-imenu-depth 5
             org-return-follows-link t
             org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                                    (vm-imap . vm-visit-imap-folder-other-frame)
                                    (gnus . org-gnus-no-new-news)
                                    (file . find-file)
                                    (wl . wl-other-frame))
             org-log-done 'time ;; 记录完成时间
             org-blank-before-new-entry '((heading . nil)
                                          (plain-list-item . nil))

             org-image-actual-width 600 ;; this will use 600 for width for all the images.
             org-preview-latex-image-directory (concat no-littering-var-directory "ltximg/")
             org-confirm-babel-evaluate nil
             org-src-window-setup 'split-window-below
             org-ellipsis "⤵"
             org-plantuml-jar-path plantuml-jar-path
             org-special-ctrl-a/e t

             fill-column 120
             )
    ;; (:hook org-num-mode)
    (:when-loaded
      (require 'org-tempo) ;; so that <s is useful
      ;; 导出相关的设置
      (setq org-latex-pdf-process '("tectonic %f"))
      (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0)) ;; use a large preview for latex

      (defface my-org-emphasis-bold
        '((default :inherit bold)
          (((class color) (min-colors 88) (background light))
           :foreground "pale violet red")
          (((class color) (min-colors 88) (background dark))
           :foreground "pale violet red"))
        "My bold emphasis for Org.")

      (defface my-org-emphasis-italic
        '((default :inherit italic)
          (((class color) (min-colors 88) (background light))
           :foreground "green3")
          (((class color) (min-colors 88) (background dark))
           :foreground "green3"))
        "My italic emphasis for Org.")

      (defface my-org-emphasis-underline
        '((default :inherit underline)
          (((class color) (min-colors 88) (background light))
           :foreground "#813e00")
          (((class color) (min-colors 88) (background dark))
           :foreground "#d0bc00"))
        "My underline emphasis for Org.")

      (setq org-emphasis-alist
            '(("*" my-org-emphasis-bold)
              ("/" my-org-emphasis-italic)
              ("_" underline)
              ("=" org-verbatim verbatim)
              ("~" org-code verbatim)
              ("+" (:strike-through t))
              ))

      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (python . t)
         (dot . t)
         (latex . t)
         (C . t)
         (scheme . t)
         (plantuml . t)
         ))
      ;; didn't redisplay for now
      ;; (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
      ;; open word
      (add-to-list 'org-file-apps '("\\.docx\\'" . default))
      (defun lewis/org-export-docx ()
        (interactive)
        (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) ".docx"))
              (template-file (concat nowisemacs-doc-emacs-dir
                                     "02-binary-files/template.docx")))
          (shell-command (format "pandoc %s -o %s --reference-doc=%s"
                                 (buffer-file-name)
                                 docx-file
                                 template-file
                                 ))
          (message "Convert finish: %s" docx-file)))
      ))
#+end_src
** org-modern
#+begin_src elisp
  (setup org-modern
    (:option org-modern-list '((?+ . "➤")
                               (?- . "–")
                               (?* . "•"))
             org-modern-star '("Ⓐ" "Ⓑ" "Ⓒ" "Ⓓ" "Ⓔ" "Ⓕ" "Ⓖ" "Ⓗ" "Ⓘ" "Ⓙ" "Ⓚ" "Ⓛ" "Ⓜ")
             org-modern-table nil)
    (:hook-into org-mode)
    ;; (add-hook 'org-agenda-finalize-hook #'org-modern-agenda)
    )
#+end_src
** org-modern-indent
#+begin_src elisp
  (setup org-modern-indent
    (add-hook 'org-mode-hook #'org-modern-indent-mode 90))
#+end_src
** org-appear
#+begin_src elisp
  (setup org-appear
    (:hook-into org-mode))
#+end_src
** org-download
#+begin_src elisp
  (setup async)
  (setup org-download
    (:option org-download-method 'directory
             org-download-screenshot-basename "screenshot.jpg"
             org-download-image-dir (concat nowisemacs-doc-emacs-dir "02-binary-files/01-pictures/org_download_images")
             org-download-abbreviate-filename-function 'expand-file-name)
    (:when-loaded
      (when (eq system-type 'gnu/linux)
        (setq-default org-download-screenshot-method "scrot -s %s"))

      (when (eq system-type 'darwin)
        (setq org-download-screenshot-method "screencapture -i %s")))
    (:autoload org-download-screenshot
               org-download-yank))
#+end_src
** ox-hugo
#+begin_src elisp
  (setup tomelr)
  (setup ox-hugo
    (:load-after ox))
#+end_src
** org-clock
*** org-pomodoro
#+begin_src elisp
  (setup alert)
  (setup org-pomodoro
    (:option org-pomodoro-finished-sound (concat nowisemacs-doc-emacs-dir "02-binary-files/applaud.wav")))
#+end_src
** org-noter
#+begin_src elisp
  (setup org-noter
    (:option org-noter-notes-search-path (list org-directory)
             org-noter-auto-save-last-location t
             org-noter-separate-notes-from-heading nil
             org-noter-hide-other nil
             org-noter-doc-split-percentage '(0.6 . 0.4))
    (:when-loaded
      ;; (require 'org-pdftools)
      ;; (require 'org-noter-pdftools)
      (require 'org-noter-pdf)
      (require 'org-noter-nov)
      (require 'org-noter-nov-overlay)
      (require 'org-noter-dynamic-block))
      )
#+end_src
** org-present
#+begin_src elisp
  (setup org-present)
#+end_src
** bibtex related
*** bibtex
#+begin_src elisp
  (setup bibtex
    (:option bibtex-autokey-year-length 4
             bibtex-autokey-titleword-separator "_"
             bibtex-autokey-name-year-separator "_"
             bibtex-autokey-year-title-separator "_"
             bibtex-autokey-titleword-length 15
             bibtex-autokey-titlewords 10
             bibtex-autokey-titleword-ignore ;; I took "On" out of this
             '("A" "An" "The" "Eine?" "Der" "Die" "Das")))

  (defvar do.refs/pdf-dir nil
    "The path to the directory containing the PDF files. The file
    for the entry with key <key> is stored as <key>.pdf.")

  (defvar do.refs/notes-dir nil
    "The path to the directory containing my notes for the
    references. The note for the item with key <key> is stored in
    this folder as <key>.org")

  (defvar do.refs/pdf-download-dir nil
    "The path to the temporary directory to which we download PDF
    files.")

  (defun do.refs/get-db-file-list ()
    "Get the list of all the bib files containing my bib database."
    (directory-files "~/Documents/emacs/03-bibliography/" t "\\.bib\\'"))

  (defun do.refs/update-db-file-list ()
    "Update the list of bib files."
    (interactive)
    (let ((db-list (do.refs/get-db-file-list)))
      (setq reftex-default-bibliography db-list)
      (setq bibtex-completion-bibliography db-list)
      (setq ebib-preload-bib-files db-list)))

#+end_src
*** citar
#+begin_src elisp
  (setup parsebib)
  ;; (setup citeproc) ;;<- (setup queue) (setup string-inflection)
  (setup citar
    (:option org-cite-global-bibliography (do.refs/get-db-file-list)
             org-cite-insert-processor 'citar
             org-cite-follow-processor 'citar
             org-cite-activate-processor 'citar
             citar-library-paths '("~/Documents/emacs/02-binary-files/02-searchable/01-papers-markable/")
             citar-bibliography org-cite-global-bibliography))
#+end_src
*** citar-denote
#+begin_src elisp
  (setup citar-denote
    (:option citar-denote-title-format "title")
    (:defer (citar-denote-mode)))
#+end_src
*** ebib
#+begin_src elisp
  (setup ebib
    (:option ebib-preload-bib-files org-cite-global-bibliography
             ebib-file-search-dirs '("~/Documents/emacs/02-binary-files/02-searchable/01-papers-markable/")
             ebib-file-associations '(("pdf" . "xpdf")
                                      ("ps" . "gv")
                                      ("epub"))
             ebib-index-window-size 25
             )
    (:when-loaded
      (defcustom ebib-zotero-translation-server "http://127.0.0.1:1969"
        "The address of Zotero translation server."
        :group 'ebib
        :type 'string)

      (defun ebib-zotero-translate (item server-path &optional export-format)
        "Convert item to EXPORT-FORMAT entry through `ebib-zotero-translation-server'."
        (let ((export-format (or export-format
                                 (downcase (symbol-name (intern-soft bibtex-dialect))))))
          (shell-command-to-string
           (format "curl -s -d '%s' -H 'Content-Type: text/plain' '%s/%s' | curl -s -d @- -H 'Content-Type: application/json' '%s/export?format=%s'" item ebib-zotero-translation-server server-path ebib-zotero-translation-server export-format))))

      (defun ebib-zotero-import-url (url)
        "Fetch a entry from zotero translation server via a URL.
  The entry is stored in the current database."
        (interactive "MURL: ")
        (with-temp-buffer
          (insert (ebib-zotero-translate url "web"))
          (ebib-import-entries ebib--cur-db)))

      (defun ebib-zotero-import-identifier (identifier)
        "Fetch a entry from zotero translation server via an IDENTIFIER.
  The entry is stored in the current database,
  and the identifier can be DOI, ISBN, PMID, or arXiv ID."
        (interactive "MIDENTIFIER: ")
        (with-temp-buffer
          (insert (ebib-zotero-translate identifier "search"))
          (ebib-import-entries ebib--cur-db)))
      )
    )
#+end_src

** toc-org
#+begin_src elisp
  (setup toc-org
    (:hook-into org-mode))
#+end_src
** denote
#+begin_src elisp
  (setup denote
    (:option denote-directory (expand-file-name (concat nowisemacs-doc-emacs-dir "01-orgmode/xnotes"))
             denote-dired-directories (list denote-directory
                                            (thread-last denote-directory (expand-file-name "xnotes")))
             denote-date-prompt-use-org-read-date t
             denote-modules '(project))
    (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
    (:when-loaded
      (setq denote-faces--file-name-regexp (concat "\\(?8:[[:alnum:][:nonascii:]/]*\\)?"
                                                   "\\(?1:[0-9]\\{8\\}\\)\\(?2:T[0-9]\\{6\\}\\)"
                                                   "\\(?:\\(?3:--\\)\\(?4:[[:alnum:][:nonascii:]-]*\\)\\)?"
                                                   "\\(?:\\(?5:__\\)\\(?6:[[:alnum:][:nonascii:]_-]*\\)\\)?"
                                                   "\\(?7:\\..*\\)?$"))

      (setq denote-faces-file-name-keywords `((,(concat " " denote-faces--file-name-regexp)
                                               (1 'denote-faces-delimiter nil t)
                                               (2 'denote-faces-delimiter nil t)
                                               (3 'denote-faces-delimiter nil t)
                                               (4 'denote-faces-title nil t)
                                               (5 'denote-faces-delimiter nil t)
                                               (6 'denote-faces-keywords nil t)
                                               (7 'denote-faces-extension nil t )
                                               (8 'denote-faces-time)
                                               ;; (9 'denote-faces-delimiter nil t)
                                               )))
      )
        ;;;###autoload
    (defun denote-open-or-create-with-subdirectory ()
      "Invoke `denote-open-or-create' but also prompt for subdirectory.
    This is the equivalent to calling `denote-open-or-create' when
    `denote-prompts' is set to \\='(subdirectory title keywords)."
      (declare (interactive-only t))
      (interactive)
      (let ((denote-prompts '(subdirectory title keywords)))
        (call-interactively #'denote-open-or-create)))
    )
  (defun denote-link-or-create-with-subdirectory ()
    "Invoke `denote-link-or-create' but also prompt for subdirectory.
  This is the equivalent to calling `denote-link-or-create' when
  `denote-prompts' is set to \\='(subdirectory title keywords)."
    (declare (interactive-only t))
    (interactive)
    (let ((denote-prompts '(subdirectory title keywords)))
      (call-interactively #'denote-link-or-create)))

  (defun denote-rename-file-using-dired()
    (interactive nil dired-mode)
    (if-let ((marks (dired-get-marked-files)))
        (progn
          (dolist (file marks)
            (let* ((dir (file-name-directory file))
                   (id (denote-retrieve-or-create-file-identifier file))
                   (file-type (denote-filetype-heuristics file))
                   (title (denote-retrieve-filename-title file))
                   (keywords (denote-retrieve-keywords-value file 'org))
                   (extension (file-name-extension file t))
                   (new-name (denote-format-file-name
                              dir id keywords (denote-sluggify title) extension)))
              (denote-rename-file-and-buffer file new-name)
              (denote-update-dired-buffers)
              (when (denote-file-is-writable-and-supported-p new-name)
                (if (denote--edit-front-matter-p new-name file-type)
                    (denote--rewrite-front-matter new-name title keywords file-type)
                  (denote--add-front-matter new-name title keywords id file-type))))))))
#+end_src

** find orgmode dir files
#+begin_src elisp
  (defun project-find-orgmode-dir-files ()
    (interactive)
    (dired (concat nowisemacs-doc-emacs-dir "01-orgmode")
    (project-find-file t)))
  (defun project-find-xnotes-dir-files ()
    (interactive)
    (dired (concat nowisemacs-doc-emacs-dir "01-orgmode/xnotes"))
    (project-find-file t))
  (defun project-find-papers-dir-files ()
    (interactive)
    (dired (concat nowisemacs-doc-emacs-dir "02-binary-files/02-searchable/01-papers-markable"))
    (project-find-file t))
  (defun project-find-searchable-dir-files ()
    (interactive)
    (dired (concat nowisemacs-doc-emacs-dir "02-binary-files/02-searchable"))
    (project-find-file t))
  (defun project-find-gtd-dir-files ()
    (interactive)
    (dired nowisemacs-gtd-dir)
    (project-find-file t))
#+end_src
** org-imagine, excalidraw
#+begin_src elisp
  (defvar org-excalidraw--default-base
    "{
      \"type\": \"excalidraw\",
      \"version\": 2,
      \"source\": \"https://excalidraw.com\",
      \"elements\": [],
      \"appState\": {
        \"gridSize\": null,
        \"viewBackgroundColor\": \"#ffffff\"
      },
      \"files\": {}
    }
  "
        "Get default JSON template used for new excalidraw files."
    )

  (defun lewis-create-excalidraw()
    (interactive)
    (let* ((filename (concat (car (split-string (buffer-name) "\\.")) ".excalidraw"))
           (path (concat nowisemacs-doc-emacs-dir "05-excalidraw/" filename))
           (link (format "[[file:%s]]" path)))
      (insert link)
      (with-temp-file path (insert org-excalidraw--default-base))))
  (setup org-imagine)
#+end_src
** shrface
#+begin_src elisp
  (setup shrface
    (:load-after nov)
    (:load-after eww)
    (:hook-into nov-mode
                eww-after-render)
    (:when-loaded
      (shrface-basic)
      (shrface-trial)
      (shrface-default-keybindings) ; setup default keybindings
      (setq shrface-href-versatile t)
      (setq nov-shr-rendering-functions '((img . nov-render-img) (title . nov-render-title)))
      (setq nov-shr-rendering-functions (append nov-shr-rendering-functions shr-external-rendering-functions))))
#+end_src

** org-remark
Highlight and annotate any text file with using Org mode.
#+begin_src elisp
  (setup org-remark
    (:bind "C-c n m o" #'org-remark-open
           "C-c n m ]" #'org-remark-view-next
           "C-c n m [" #'org-remark-view-prev
           "C-c n m d" #'org-remark-remove)
    (:defer
     (require 'org-remark-global-tracking)
     (org-remark-global-tracking-mode +1)
     )
    (:when-loaded
      (defun my/function ()
        (concat (concat nowisemacs-doc-emacs-dir "01-orgmode/org-remark/")
                (file-name-base (org-remark-notes-file-name-function))
                ".org"))
      (setq org-remark-notes-file-name #'my/function)
      ))
#+end_src
** clue
Connecting clues while reading code.
#+begin_src elisp
    (setup clue)
#+end_src
** org-transclusion
#+begin_src elisp
  (setup org-transclusion)
#+end_src
** agenda/gtd
https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html
https://dindi.garjola.net/org-agenda-weekly.html
#+begin_src elisp
    (defvar nowisemacs-index-org (concat nowisemacs-gtd-dir "/index.org"))
    (defvar nowisemacs-gtd-org (concat nowisemacs-gtd-dir "/action.org"))
    (defvar nowisemacs-someday-org (concat nowisemacs-gtd-dir "/someday.org"))
    (setup org
      (:option org-agenda-files (list nowisemacs-index-org
                                      nowisemacs-gtd-org
                                      (concat nowisemacs-gtd-dir "/index.org_archive")
                                      (concat nowisemacs-gtd-dir "/action.org_archive")
                                      (concat nowisemacs-gtd-dir "/someday.org_archive"))
               org-todo-keywords (quote ((sequence "TODO(t!/!)" "NEXT(n!/!)"  "STARTED(s!)" "|" "DONE(d!/!)")
                                         (type "PROJECT(p!/!)" "|" "DONE_PROJECT(D!/!)")
                                         (type "SOMEDAY(S!)" "|" "NEED_COLLECTED(N!)")
                                         (sequence "WAIT(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))

               org-todo-keyword-faces (quote (("TODO" :foreground "red" :weight bold)
                                              ("NEXT" :foreground "blue" :weight bold)
                                              ("STARTED" :foreground "blue" :weight bold)
                                              ("DONE" :foreground "forest green" :weight bold)

                                              ("PROJECT" :foreground "red" :weight bold)
                                              ("DONE_PROJECT" :foreground "forest green" :weight bold)

                                              ("WAIT" :foreground "orange" :weight bold)
                                              ("HOLD" :foreground "orange" :weight bold)
                                              ("CANCELLED" :foreground "forest green" :weight bold)

                                              ("SOMEDAY" :foreground "orange" :weight bold)
                                              ("NEED_COLLECTED" :foreground "orange" :weight bold)
                                              ))
               ))
    (setup org-refile
      (:option org-refile-targets (list (cons nowisemacs-gtd-org '(:maxlevel . 1))
                                        (cons nowisemacs-someday-org '(:level . 1)))))
    (setup org-capture
      (:option org-capture-templates '(("t" "Todo [inbox]" entry
                                        (file+headline nowisemacs-index-org "Tasks")
                                        "* TODO %i%?"))))

    (setup org-agenda
      (:option org-agenda-custom-commands
               '(
                 ;; schedule or reschedule
                 ("D" "Daily(last, Today and futuer) Action List" ((agenda ""
                                                                           ((org-agenda-span 1)
                                                                            (org-agenda-sorting-strategy
                                                                             (quote
                                                                              ((agenda time-up category-up tag-up))))
                                                                            (org-deadline-warning-days 7)))))
                 ;; next, should check effort
                 ("n" . "Next Actions List")
                 ("nn" tags "+TODO=\"NEXT\"|+TODO=\"STARTED\"")
                 ("n2" tags "+2mins+TODO=\"NEXT\"|+2mins+TODO=\"STARTED\"")
                 )
               )
      )
    ;; (defun my/show-next-without-effort ()
    ;;   (interactive)
    ;;   (org-ql-search (org-agenda-files)
    ;;                  '(and (todo "NEXT")
    ;;                        (not (property "Effort")))))
    (defun my/weekly-agenda-review ()
      "Generate the agenda for the weekly review"
      (interactive)
      (let ((span-days 24)
            (offset-past-days 10))
        (message "Generating agenda for %s days starting %s days ago"
                 span-days offset-past-days)
        (org-agenda-list nil (- (time-to-days (date-to-time
                                               (current-time-string)))
                                offset-past-days)
                         span-days)
        (org-agenda-log-mode)
        (goto-char (point-min))))
#+end_src
** my-gtd
#+begin_src elisp

    (defun my-gtd-2mins()
      (interactive)
      (org-todo "NEXT")
      (org-set-tags "2mins")
      (org-refile)
      )

    (defun my-gtd-next()
      (interactive)
      (org-todo "NEXT")
      (org-refile)
      )

    (defun my-gtd-wait()
      (interactive)
      (org-todo "WAIT")
      (org-refile)
      )
    (defun my-gtd-project()
      (interactive)
      (org-todo "PROJECT")
      (org-set-tags "Project")
      (org-refile)
      )
    (defun my-gtd-someday()
      (interactive)
      (org-todo "SOMEDAY")
      (org-refile)
      )
    (defun my-gtd-need-collected()
      (interactive)
      (org-todo "NEED_COLLECTED")
      (org-refile)
      )

  (transient-define-prefix my-gtd-choose ()
    "Choose how to categorize the current item.
  Note that this function is intended to be used only during inbox processing."
    ["Actionable"
     [("2" "2mins" my-gtd-2mins)
      ("n" "next (one-step)" my-gtd-next)
      ("w" "wait (wait someone)" my-gtd-wait)
      ("p" "Project (multi-step)" my-gtd-project)
      ;; ("c" "Calendar" my-gtd-calendar)
      ]]
    ["Non-actionable"
     [("s" "Someday" my-gtd-someday)
      ;; ("A" "Archive this knowledge" my-gtd-archive)
      ("N" "Need collected" my-gtd-need-collected)]])
#+end_src
** org-ql
#+begin_src elisp
  (setup ts)
  (setup peg)
  (setup org-super-agenda)
  (setup ov)
  (setup org-ql
    (:option org-super-agenda-groups '((:auto-parent t))
             ))
#+end_src
** xeft
#+begin_src elisp
  (setup xeft
    (:option xeft-default-extension "org"
             xeft-directory org-directory
             xeft-database (concat no-littering-var-directory "xeft-db")
             xeft-recursive t
             ))
#+end_src
* 翻译
** go-translate
#+begin_src elisp
  (setup go-translate
    (:option gts-translate-list '(("en" "zh")))
    (:when-loaded
      (setq gts-default-translator (gts-translator
                                    :picker (gts-prompt-picker)
                                    :engines (list (gts-google-rpc-engine))
                                    :render (gts-buffer-render))))
    (defun my-gts-translate-posframe ()
      (interactive)
      (if (not (featurep 'go-translate))
          (require 'go-translate))
      (defvar my-translator-posframe
        (gts-translator
         :picker (gts-noprompt-picker)
         :engines (gts-google-engine)
         :render (gts-posframe-pop-render)))
      (gts-translate my-translator-posframe)))
#+end_src
** corfu-english-helper
I use corfu english helper instead of company-english-helper.
#+begin_src elisp
  (setup corfu-english-helper
    (:autoload toggle-corfu-english-helper))
#+end_src
** dictionary-overlay
#+begin_src elisp
  (setup websocket)
  (setup websocket-bridge)
  (setup dictionary-overlay
    (:option dictionary-overlay-sdcv-dictionary-path "~/Downloads/stardict-ecdict-2.4.2/")
    (:autoload dictionary-overlay-toggle)
    (:when-loaded
      (copy-face 'font-lock-keyword-face 'dictionary-overlay-unknownword)
      (copy-face 'font-lock-comment-face 'dictionary-overlay-translation)
      ))
#+end_src
* 阅读
** pdf-tools
#+begin_src elisp
  (setup tablist)
  (setup pdf-tools
    (:option pdf-view-use-scaling t
             pdf-annot-list-format '((page . 3)
                                     (type . 10)
                                     (contents . 56)
                                     (date . 24)))
    (:with-map pdf-view-mode-map
      (:bind "h h" pdf-annot-add-highlight-markup-annotation
             "[" pdf-view-scroll-down-or-previous-page
             "]" pdf-view-scroll-up-or-next-page))
    (pdf-loader-install))
    ;; (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1))))

  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
        TeX-source-correlate-start-server t)

  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)
#+end_src
** elfeed
#+begin_src elisp
  (setup elfeed
    (:option elfeed-show-entry-switch 'display-buffer))
  #+end_src
** efleed-org
#+begin_src elisp
  (setup elfeed-org
    (:option rmh-elfeed-org-files (list (concat nowisemacs-config-useful-tools "elfeed.org"))))
  (defun my-elfeed()
    (interactive)
    (unless (featurep 'elfeed-org)
      (elfeed-org))
    (elfeed))
#+end_src
** nov
#+begin_src elisp
  (setup esxml) ;; <- (setup kv)
  (setup nov
    (:file-match "\\.epub\\'"))
#+end_src
** nov-xwidget
#+begin_src elisp
  (setup nov-xwidget
    (:load-after nov)
    (:with-map nov-xwidget-webkit-mode-map
    (:bind "n" 'nov-xwidget-next-document
           "p" 'nov-xwidget-previous-document
           "]" 'nov-xwidget-next-document
           "[" 'nov-xwidget-previous-document
           "t" 'nov-xwidget-goto-toc
           "S" 'nov-xwidget-find-source-file))
    (:when-loaded
      (define-key nov-mode-map (kbd "o") 'nov-xwidget-view)
      (add-hook 'nov-mode-hook 'nov-xwidget-inject-all-files)))
#+end_src
** darkroom
Simple distraction-free editing. I use darkroom instead of writeroom because it's more simple
#+begin_src elisp
  (setup darkroom)
#+end_src
** markdown-mode
#+begin_src elisp
  (setup markdown-mode
    (:file-match "\\.md\\'"))
#+end_src
* tools
** xwidget and browser
#+begin_src elisp
  (defun lewis/url-browser-new-buffer(url &optional new-session)
    (interactive (progn
                   (require 'browse-url)
                   (browse-url-interactive-arg "xwidget-webkit URL: ")))
    (xwidget-webkit-browse-url url t))

  ;; now use eww
  ;; (setq browse-url-browser-function 'lewis/url-browser-new-buffer)
  ;; (setq browse-url-browser-function 'eww-browse-url)
#+end_src
** eaf
#+begin_src elisp
  (setup eaf
    (add-to-list 'load-path "~/.emacs.d/lib/eaf")
    (:option eaf-browser-enable-autofill t
             eaf-webengine-font-family lewis-variable-font
             eaf-webengine-serif-font-family lewis-variable-font
             eaf-webengine-fixed-font-family lewis-fixed-font
             eaf-config-location (concat no-littering-var-directory "eaf/")
             )
    (if (eq system-type 'darwin)
             (setq eaf-python-command "~/.pyenv/shims/python3")))


  (setup eaf-browser
    (:autoload eaf-open-browser)
    )
  (setup eaf-pdf-viewer
    (:autoload eaf-open-pdf-from-history))
  (setup eaf-rss-reader
    (:autoload eaf-open-rss-reader))
  (setup eaf-map
    (:autoload eaf-open-map))
  (setup eaf-markdown-previewer)
  (setup eaf-markmap)

  (setup eaf-interleave
    (:option eaf-interleave-org-notes-dir-list '("~/Documents/emacs/01-orgmode/" ".")
             eaf-interleave-disable-narrowing t
             eaf-interleave-split-lines 20
             eaf-find-alternate-file-in-dired t
             )
    (:bind "M-."  'eaf-interleave-sync-current-note
           "M-p"  'eaf-interleave-sync-previous-note
           "M-n"  'eaf-interleave-sync-next-note)
    (:with-map eaf-interleave-app-mode-map
      (:bind
       "C-c M-i"  'eaf-interleave-add-note
       "C-c M-o"  'eaf-interleave-open-notes-file
       "C-c M-q"  'eaf-interleave-quit))
    (add-hook 'eaf-pdf-viewer-hook 'eaf-interleave-app-mode)
    (add-hook 'eaf-browser-hook 'eaf-interleave-app-mode)
    ;; (add-hook 'org-mode-hook 'eaf-interleave-mode)
    )
#+end_src

** proxy
#+begin_src elisp
  ;; Configure network proxy
  (setq my-proxy "socks://127.0.0.1:1089")
  (defun show-proxy ()
    "Show http/https proxy."
    (interactive)
    (if url-proxy-services
        (message "Current proxy is \"%s\"" my-proxy)
      (message "No proxy")))

  (defun set-proxy ()
    "Set http/https proxy."
    (interactive)
    (setq url-proxy-services `(("http" . ,my-proxy)
                               ("https" . ,my-proxy)))
    (show-proxy))

  (defun unset-proxy ()
    "Unset http/https proxy."
    (interactive)
    (setq url-proxy-services nil)
    (show-proxy))

  (defun toggle-proxy ()
    "Toggle http/https proxy."
    (interactive)
    (if url-proxy-services
        (unset-proxy)
      (set-proxy)))
#+end_src
** app-launcher
#+begin_src elisp
(setup app-launcher)
#+end_src
** keyfreq
#+begin_src elisp
  (setup keyfreq
    (:defer
     (keyfreq-mode 1)
     (keyfreq-autosave-mode 1)))
#+end_src
** gif-screencast
#+begin_src elisp
  (setup gif-screencast
    (:autoload gif-screencast-start-or-stop
               gif-screencast-toggle-pause)
    (:if-system 'darwin)
    (:when-loaded
      (:option gif-screencast-args '("-x") ;; To shut up the shutter sound of `screencapture' (see `gif-screencast-command').
               gif-screencast-cropping-program "mogrify" ;; Optional: Used to crop the capture to the Emacs frame.
               gif-screencast-capture-format "ppm" ;; Optional: Required to crop captured images.
               gif-screencast-scale-factor 2.0))
    (defun my/siri-ocr ()
      (interactive)
      (shell-command "shortcuts run \"OCR Selected Area\"")
      (do-applescript "tell application id \"org.gnu.Emacs\" to activate")
      )
    (keymap-global-set "M-o" #'my/siri-ocr)
    )
#+end_src
** emacs-guix
#+begin_src elisp
  (setup bui)
  (setup magit-popup)
  (setup emacs-guix)
#+end_src

** mind-wave
#+begin_src elisp
  (setup mind-wave
    ;; (:option mind-wave-api-key-path "~/Documents/emacs/08-keys/chatgpt_api_key.txt")
    (:autoload mind-wave-chat-mode))
#+end_src
* use single file to load configs
this can avoid errors of native compilation of init.el
** provide
#+begin_src elisp
(provide 'init-config)
#+end_src
** load init-config.el
#+begin_src elisp :tangle ~/.emacs.d/init.el
  ;; -*- lexical-binding: t; -*-
(add-to-list 'load-path (expand-file-name "modules/" user-emacs-directory))
(require 'init-config)
#+end_src
* quick-edit and minimal-file
These 2 files are tangled using noweb and will be used for special purpose.

1. =init-quick-edit.el= will be used to open a file, edit it and close it quickly.
2. =init-mininal.el= is a file to start from scratch in which case you don't want the full-blown configurations.
** init-quick-edit
** init-minimal
